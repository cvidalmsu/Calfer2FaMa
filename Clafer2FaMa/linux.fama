%Relationships
Linux_Kernel_Configuration:  [c64BIT] [X86_32] [X86_64] [X86] [OUTPUT_FORMAT] [ARCH_DEFCONFIG] [GENERIC_TIME] [GENERIC_CMOS_UPDATE] [CLOCKSOURCE_WATCHDOG] [GENERIC_CLOCKEVENTS] [GENERIC_CLOCKEVENTS_BROADCAST] [LOCKDEP_SUPPORT] [STACKTRACE_SUPPORT] [HAVE_LATENCYTOP_SUPPORT] [MMU] [ZONE_DMA] [SBUS] [GENERIC_ISA_DMA] [GENERIC_IOMAP] [GENERIC_BUG] [GENERIC_BUG_RELATIVE_POINTERS] [GENERIC_HWEIGHT] [GENERIC_GPIO] [ARCH_MAY_HAVE_PC_FDC] [RWSEM_GENERIC_SPINLOCK] [RWSEM_XCHGADD_ALGORITHM] [ARCH_HAS_CPU_IDLE_WAIT] [GENERIC_CALIBRATE_DELAY] [GENERIC_TIME_VSYSCALL] [ARCH_HAS_CPU_RELAX] [ARCH_HAS_DEFAULT_IDLE] [ARCH_HAS_CACHE_LINE_SIZE] [HAVE_SETUP_PER_CPU_AREA] [NEED_PER_CPU_EMBED_FIRST_CHUNK] [NEED_PER_CPU_PAGE_FIRST_CHUNK] [HAVE_CPUMASK_OF_CPU_MAP] [ARCH_HIBERNATION_POSSIBLE] [ARCH_SUSPEND_POSSIBLE] [ZONE_DMA32] [ARCH_POPULATES_NODE_MAP] [AUDIT_ARCH] [ARCH_SUPPORTS_OPTIMIZED_INLINING] [ARCH_SUPPORTS_DEBUG_PAGEALLOC] [HAVE_INTEL_TXT] [GENERIC_HARDIRQS] [GENERIC_HARDIRQS_NO__DO_IRQ] [GENERIC_IRQ_PROBE] [GENERIC_PENDING_IRQ] [USE_GENERIC_SMP_HELPERS1] [X86_32_SMP] [X86_64_SMP] [X86_HT] [X86_TRAMPOLINE] [X86_32_LAZY_GS] [KTIME_SCALAR] [ARCH] [KERNELVERSION] [DEFCONFIG_LIST] [CONSTRUCTORS] General_setup [HAVE_GENERIC_DMA_COHERENT] [SLABINFO] [RT_MUTEXES] [BASE_SMALL] [MODULES] [INIT_ALL_POSSIBLE] [STOP_MACHINE] [BLOCK] [PREEMPT_NOTIFIERS] [FREEZER] Processor_type_and_features [ARCH_ENABLE_MEMORY_HOTPLUG] [ARCH_ENABLE_MEMORY_HOTREMOVE] [HAVE_ARCH_EARLY_PFN_TO_NID] Power_management_and_ACPI_options Bus_options__PCI_etc__ Executable_file_formats___Emulations [HAVE_ATOMIC_IOMAP] [NET] Device_Drivers Firmware_Drivers File_systems Kernel_hacking Security_options [XOR_BLOCKS] [ASYNC_CORE] [ASYNC_MEMCPY] [ASYNC_XOR] [ASYNC_MEMSET] [ASYNC_PQ] [ASYNC_RAID6_RECOV] [ASYNC_TX_DISABLE_PQ_VAL_DMA] [ASYNC_TX_DISABLE_XOR_VAL_DMA] [CRYPTO] [HAVE_KVM] [HAVE_KVM_IRQCHIP] [HAVE_KVM_EVENTFD] [KVM_APIC_ARCHITECTURE] [VIRTUALIZATION] [BINARY_PRINTF] Library_routines;
General_setup:  [EXPERIMENTAL] [BROKEN] [BROKEN_ON_SMP] [LOCK_KERNEL] [INIT_ENV_ARG_LIMIT] [LOCALVERSION] [LOCALVERSION_AUTO] [HAVE_KERNEL_GZIP] [HAVE_KERNEL_BZIP2] [HAVE_KERNEL_LZMA] Kernel_compression_mode [SWAP] [SYSVIPC] [POSIX_MQUEUE] [BSD_PROCESS_ACCT] [TASKSTATS] [AUDIT] RCU_Subsystem [IKCONFIG] [LOG_BUF_SHIFT] [HAVE_UNSTABLE_SCHED_CLOCK] [GROUP_SCHED] [CGROUPS] [MM_OWNER] [SYSFS_DEPRECATED] [SYSFS_DEPRECATED_V2] [RELAY] [NAMESPACES] [BLK_DEV_INITRD] [CC_OPTIMIZE_FOR_SIZE] [SYSCTL] [ANON_INODES] [EMBEDDED] [HAVE_PERF_EVENTS] [PERF_USE_VMALLOC] Kernel_Performance_Events_And_Counters [VM_EVENT_COUNTERS] [PCI_QUIRKS] [SLUB_DEBUG] [COMPAT_BRK] Choose_SLAB_allocator [PROFILING] [TRACEPOINTS] [OPROFILE] [HAVE_OPROFILE] [KPROBES] [HAVE_EFFICIENT_UNALIGNED_ACCESS] [HAVE_SYSCALL_WRAPPERS] [KRETPROBES] [HAVE_IOREMAP_PROT] [HAVE_KPROBES] [HAVE_KRETPROBES] [HAVE_ARCH_TRACEHOOK] [HAVE_DMA_ATTRS] [USE_GENERIC_SMP_HELPERS2] [HAVE_CLK] [HAVE_DMA_API_DEBUG] [HAVE_DEFAULT_NO_SPIN_MUTEXES] GCOV_based_kernel_profiling [SLOW_WORK] [SLOW_WORK_DEBUG];
MODULES:  [MODULE_FORCE_LOAD] [MODULE_UNLOAD] [MODVERSIONS] [MODULE_SRCVERSION_ALL];
BLOCK:  [LBDAF] [BLK_DEV_BSG] [BLK_DEV_INTEGRITY] [BLOCK_COMPAT] IO_Schedulers;
Processor_type_and_features:  [TICK_ONESHOT] [NO_HZ] [HIGH_RES_TIMERS] [GENERIC_CLOCKEVENTS_BUILD] [SMP] [X86_X2APIC] [SPARSE_IRQ] [X86_MPPARSE] [X86_BIGSMP] [X86_EXTENDED_PLATFORM] [X86_VSMP] [X86_UV] [X86_ELAN] [X86_MRST] [X86_RDC321X] [X86_32_NON_STANDARD] [X86_SUPPORTS_MEMORY_FAILURE] [X86_VISWS] [X86_SUMMIT] [X86_ES7000] [SCHED_OMIT_FRAME_POINTER] [PARAVIRT_GUEST] [PARAVIRT_DEBUG] [MEMTEST] [X86_SUMMIT_NUMA] [X86_CYCLONE_TIMER] Processor_family [X86_GENERIC] [X86_CPU] [X86_L1_CACHE_BYTES] [X86_INTERNODE_CACHE_BYTES] [X86_CMPXCHG] [X86_L1_CACHE_SHIFT] [X86_XADD] [X86_PPRO_FENCE] [X86_F00F_BUG] [X86_WP_WORKS_OK] [X86_INVLPG] [X86_BSWAP] [X86_POPAD_OK] [X86_ALIGNMENT_16] [X86_INTEL_USERCOPY] [X86_USE_PPRO_CHECKSUM] [X86_USE_3DNOW] [X86_OOSTORE] [X86_P6_NOP] [X86_TSC] [X86_CMPXCHG64] [X86_CMOV] [X86_MINIMUM_CPU_FAMILY] [X86_DEBUGCTLMSR] [PROCESSOR_SELECT] [X86_DS] [X86_PTRACE_BTS] [HPET_TIMER] [DMI] [GART_IOMMU] [CALGARY_IOMMU] [AMD_IOMMU] [SWIOTLB] [IOMMU_HELPER] [IOMMU_API] [MAXSMP] [NR_CPUS] [SCHED_SMT] [SCHED_MC] Preemption_Model [X86_UP_APIC] [X86_LOCAL_APIC] [X86_IO_APIC] [X86_VISWS_APIC] [X86_REROUTE_FOR_BROKEN_BOOT_IRQS] [X86_MCE] [X86_MCE_THRESHOLD] [X86_MCE_INJECT] [X86_THERMAL_VECTOR] [VM86] [TOSHIBA] [I8K] [X86_REBOOTFIXUPS] [MICROCODE] [X86_MSR] [X86_CPUID] [X86_CPU_DEBUG] High_Memory_Support Memory_split [PAGE_OFFSET] [HIGHMEM] [X86_PAE] [ARCH_PHYS_ADDR_T_64BIT] [DIRECT_GBPAGES] [NUMA] [K8_NUMA] [X86_64_ACPI_NUMA] [NUMA_EMU] [NODES_SHIFT] [HAVE_ARCH_BOOTMEM] [ARCH_HAVE_MEMORY_PRESENT] [NEED_NODE_MEMMAP_SIZE] [HAVE_ARCH_ALLOC_REMAP] [ARCH_FLATMEM_ENABLE] [ARCH_DISCONTIGMEM_ENABLE] [ARCH_DISCONTIGMEM_DEFAULT] [ARCH_PROC_KCORE_TEXT] [ARCH_SPARSEMEM_DEFAULT] [ARCH_SPARSEMEM_ENABLE] [ARCH_SELECT_MEMORY_MODEL] [ARCH_MEMORY_PROBE] [SELECT_MEMORY_MODEL] Memory_model [DISCONTIGMEM] [SPARSEMEM] [FLATMEM] [FLAT_NODE_MEM_MAP] [NEED_MULTIPLE_NODES] [HAVE_MEMORY_PRESENT] [SPARSEMEM_STATIC] [SPARSEMEM_EXTREME] [SPARSEMEM_VMEMMAP_ENABLE] [SPARSEMEM_VMEMMAP] [MEMORY_HOTPLUG] [PAGEFLAGS_EXTENDED] [SPLIT_PTLOCK_CPUS] [MIGRATION] [PHYS_ADDR_T_64BIT] [ZONE_DMA_FLAG] [BOUNCE] [NR_QUICK] [VIRT_TO_BUS] [HAVE_MLOCK] [HAVE_MLOCKED_PAGE_BIT] [MMU_NOTIFIER] [KSM] [DEFAULT_MMAP_MIN_ADDR] [ARCH_SUPPORTS_MEMORY_FAILURE] [MEMORY_FAILURE] [NOMMU_INITIAL_TRIM_EXCESS] [HIGHPTE] [X86_CHECK_BIOS_CORRUPTION] [X86_RESERVE_LOW_64K] [MATH_EMULATION] [MTRR] [EFI] [SECCOMP] [CC_STACKPROTECTOR] Timer_frequency [HZ] [SCHED_HRTICK] [KEXEC] [CRASH_DUMP] [KEXEC_JUMP] [PHYSICAL_START] [RELOCATABLE] [PHYSICAL_ALIGN] [HOTPLUG_CPU] [COMPAT_VDSO] [CMDLINE_BOOL];
Power_management_and_ACPI_options:  [ARCH_HIBERNATION_HEADER] [PM] [PM_TRACE] [PM_TRACE_RTC] [PM_SLEEP_SMP] [PM_SLEEP] [SUSPEND] [HIBERNATION_NVS] [HIBERNATION] [APM_EMULATION] [PM_RUNTIME] [ACPI] [SFI] [X86_APM_BOOT] [APM] CPU_Frequency_scaling [CPU_IDLE] Memory_power_savings;
Bus_options__PCI_etc__:  [PCI] [DMAR] [INTR_REMAP] [PCIEPORTBUS] [ARCH_SUPPORTS_MSI] [PCI_MSI] [PCI_LEGACY] [PCI_DEBUG] [PCI_STUB] [HT_IRQ] [PCI_IOV] [ISA_DMA_API] [ISA] [MCA] [SCx200] [GEODE_MFGPT_TIMER] [OLPC] [K8_NB] [PCCARD] [HOTPLUG_PCI];
Executable_file_formats___Emulations:  [BINFMT_ELF] [BINFMT_ELF_FDPIC] [CORE_DUMP_DEFAULT_ELF_HEADERS] [BINFMT_FLAT] [HAVE_AOUT] [BINFMT_AOUT] [BINFMT_EM86] [BINFMT_SOM] [BINFMT_MISC] [IA32_EMULATION] [COMPAT_FOR_U64_ALIGNMENT] [SYSVIPC_COMPAT];
NET:  [WANT_COMPAT_NETLINK_MESSAGES] [COMPAT_NETLINK_MESSAGES] Networking_options [HAMRADIO] [CAN] [IRDA] [BT] [AF_RXRPC] [FIB_RULES] [WIRELESS] [WIMAX] [RFKILL] [NET_9P];
Device_Drivers:  Generic_Driver_Options [CONNECTOR] [MTD] [OF_DEVICE] [OF_GPIO] [OF_I2C] [OF_SPI] [OF_MDIO] [PARPORT] [PNP] [BLK_DEV] [MISC_DEVICES] [HAVE_IDE] [IDE] SCSI_device_support [ATA] [MD] [FUSION] IEEE_1394__FireWire__support [I2O] [MACINTOSH_DRIVERS] [NETDEVICES] [ISDN] [PHONE] Input_device_support Character_devices [I2C] [SPI] PPS_support [ARCH_WANT_OPTIONAL_GPIOLIB] [ARCH_REQUIRE_GPIOLIB] [GPIOLIB] [W1] [POWER_SUPPLY] [HWMON] [THERMAL] [WATCHDOG] [SSB_POSSIBLE] Sonics_Silicon_Backplane Multifunction_device_drivers Multimedia_Capabilities_Port_drivers [REGULATOR] [MEDIA_SUPPORT] Graphics_support [SOUND] [AC97_BUS] [HID_SUPPORT] [USB_SUPPORT] [UWB] [MMC] [MEMSTICK] [NEW_LEDS] [ACCESSIBILITY] [INFINIBAND] [EDAC] [RTC_LIB] [RTC_CLASS] [DMADEVICES] [DCA] [AUXDISPLAY] [UIO] TI_VLYNQ [XEN_BALLOON] [XEN_DEV_EVTCHN] [XENFS] [XEN_SYS_HYPERVISOR] [STAGING] [X86_PLATFORM_DEVICES];
Firmware_Drivers:  [EDD] [FIRMWARE_MEMMAP] [EFI_VARS] [EFI_PCDP] [DELL_RBU] [DCDBAS] [DMIID] [ISCSI_IBFT_FIND];
File_systems:  [EXT2_FS] [EXT3_FS] [EXT4_FS] [FS_XIP] [JBD] [JBD_DEBUG] [JBD2] [JBD2_DEBUG] [FS_MBCACHE] [REISERFS_FS] [JFS_FS] [FS_POSIX_ACL] [XFS_FS] [GFS2_FS] [OCFS2_FS] [BTRFS_FS] [NILFS2_FS] [FILE_LOCKING] [FSNOTIFY] [DNOTIFY] [INOTIFY] [INOTIFY_USER] [QUOTA] [QUOTA_TREE] [QFMT_V1] [QFMT_V2] [QUOTACTL] [AUTOFS_FS] [AUTOFS4_FS] [FUSE_FS] [GENERIC_ACL] Caches CD_ROM_DVD_Filesystems DOS_FAT_NT_Filesystems Pseudo_filesystems [MISC_FILESYSTEMS] [NETWORK_FILESYSTEMS] Partition_Types [NLS] [DLM];
Kernel_hacking:  [TRACE_IRQFLAGS_SUPPORT] [PRINTK_TIME] [ENABLE_WARN_DEPRECATED] [ENABLE_MUST_CHECK] [FRAME_WARN] [MAGIC_SYSRQ] [STRIP_ASM_SYMS] [UNUSED_SYMBOLS] [DEBUG_FS] [HEADERS_CHECK] [DEBUG_SECTION_MISMATCH] [DEBUG_KERNEL] [SLUB_DEBUG_ON] [SLUB_STATS] [DEBUG_KMEMLEAK] [DEBUG_PREEMPT] [DEBUG_RT_MUTEXES] [RT_MUTEX_TESTER] [DEBUG_SPINLOCK] [DEBUG_MUTEXES] [DEBUG_LOCK_ALLOC] [PROVE_LOCKING] [LOCKDEP] [LOCK_STAT] [DEBUG_LOCKDEP] [TRACE_IRQFLAGS] [DEBUG_SPINLOCK_SLEEP] [DEBUG_LOCKING_API_SELFTESTS] [STACKTRACE] [DEBUG_KOBJECT] [DEBUG_HIGHMEM] [DEBUG_BUGVERBOSE] [DEBUG_INFO] [DEBUG_VM] [DEBUG_VIRTUAL] [DEBUG_NOMMU_REGIONS] [DEBUG_WRITECOUNT] [DEBUG_MEMORY_INIT] [DEBUG_LIST] [DEBUG_SG] [DEBUG_NOTIFIERS] [DEBUG_CREDENTIALS] [ARCH_WANT_FRAME_POINTERS] [FRAME_POINTER] [BOOT_PRINTK_DELAY] [RCU_TORTURE_TEST] [RCU_CPU_STALL_DETECTOR] [KPROBES_SANITY_TEST] [BACKTRACE_SELF_TEST] [DEBUG_BLOCK_EXT_DEVT] [DEBUG_FORCE_WEAK_PER_CPU] [LKDTM] [FAULT_INJECTION] [LATENCYTOP] [SYSCTL_SYSCALL_CHECK] [DEBUG_PAGEALLOC] [WANT_PAGE_DEBUG_FLAGS] [PAGE_POISONING] [USER_STACKTRACE_SUPPORT] [NOP_TRACER] [HAVE_FTRACE_NMI_ENTER] [HAVE_FUNCTION_TRACER] [HAVE_FUNCTION_GRAPH_TRACER] [HAVE_FUNCTION_GRAPH_FP_TEST] [HAVE_FUNCTION_TRACE_MCOUNT_TEST] [HAVE_DYNAMIC_FTRACE] [HAVE_FTRACE_MCOUNT_RECORD] [HAVE_HW_BRANCH_TRACER] [HAVE_SYSCALL_TRACEPOINTS] [TRACER_MAX_TRACE] [RING_BUFFER] [FTRACE_NMI_ENTER] [EVENT_TRACING] [CONTEXT_SWITCH_TRACER] [RING_BUFFER_ALLOW_SWAP] [TRACING] [GENERIC_TRACER] [TRACING_SUPPORT] [FTRACE] [PROVIDE_OHCI1394_DMA_INIT] [FIREWIRE_OHCI_REMOTE_DMA] [BUILD_DOCSRC] [DYNAMIC_DEBUG] [DMA_API_DEBUG] [SAMPLES] [HAVE_ARCH_KGDB] [KGDB] [HAVE_ARCH_KMEMCHECK] [KMEMCHECK] [STRICT_DEVMEM] [X86_VERBOSE_BOOTUP] [EARLY_PRINTK] [DEBUG_STACKOVERFLOW] [DEBUG_STACK_USAGE] [DEBUG_PER_CPU_MAPS] [X86_PTDUMP] [DEBUG_RODATA] [DEBUG_NX_TEST] [c4KSTACKS] [DOUBLEFAULT] [IOMMU_DEBUG] [IOMMU_STRESS] [IOMMU_LEAK] [X86_DS_SELFTEST] [HAVE_MMIOTRACE_SUPPORT] [IO_DELAY_TYPE_0X80] [IO_DELAY_TYPE_0XED] [IO_DELAY_TYPE_UDELAY] [IO_DELAY_TYPE_NONE] IO_delay_type [DEFAULT_IO_DELAY_TYPE]   [CPA_DEBUG] [OPTIMIZE_INLINING];
Security_options:  [KEYS] [SECURITY] [SECURITYFS] [SECURITY_NETWORK] [SECURITY_PATH] [SECURITY_FILE_CAPABILITIES] [SECURITY_ROOTPLUG] [INTEL_TXT] [LSM_MMAP_MIN_ADDR] [SECURITY_SELINUX] [SECURITY_SMACK] [SECURITY_TOMOYO] [IMA];
CRYPTO:  [CRYPTO_FIPS] [CRYPTO_ALGAPI] [CRYPTO_ALGAPI2] [CRYPTO_AEAD] [CRYPTO_AEAD2] [CRYPTO_BLKCIPHER] [CRYPTO_BLKCIPHER2] [CRYPTO_HASH] [CRYPTO_HASH2] [CRYPTO_RNG] [CRYPTO_RNG2] [CRYPTO_PCOMP] [CRYPTO_MANAGER] [CRYPTO_MANAGER2] [CRYPTO_GF128MUL] [CRYPTO_NULL] [CRYPTO_WORKQUEUE] [CRYPTO_CRYPTD] [CRYPTO_AUTHENC] [CRYPTO_TEST] [CRYPTO_CCM] [CRYPTO_GCM] [CRYPTO_SEQIV] [CRYPTO_CBC] [CRYPTO_CTR] [CRYPTO_CTS] [CRYPTO_ECB] [CRYPTO_LRW] [CRYPTO_PCBC] [CRYPTO_XTS] [CRYPTO_FPU] [CRYPTO_HMAC] [CRYPTO_XCBC] [CRYPTO_VMAC] [CRYPTO_CRC32C] [CRYPTO_CRC32C_INTEL] [CRYPTO_GHASH] [CRYPTO_MD4] [CRYPTO_MD5] [CRYPTO_MICHAEL_MIC] [CRYPTO_RMD128] [CRYPTO_RMD160] [CRYPTO_RMD256] [CRYPTO_RMD320] [CRYPTO_SHA1] [CRYPTO_SHA256] [CRYPTO_SHA512] [CRYPTO_TGR192] [CRYPTO_WP512] [CRYPTO_AES] [CRYPTO_AES_586] [CRYPTO_AES_X86_64] [CRYPTO_AES_NI_INTEL] [CRYPTO_ANUBIS] [CRYPTO_ARC4] [CRYPTO_BLOWFISH] [CRYPTO_CAMELLIA] [CRYPTO_CAST5] [CRYPTO_CAST6] [CRYPTO_DES] [CRYPTO_FCRYPT] [CRYPTO_KHAZAD] [CRYPTO_SALSA20] [CRYPTO_SALSA20_586] [CRYPTO_SALSA20_X86_64] [CRYPTO_SEED] [CRYPTO_SERPENT] [CRYPTO_TEA] [CRYPTO_TWOFISH] [CRYPTO_TWOFISH_COMMON] [CRYPTO_TWOFISH_586] [CRYPTO_TWOFISH_X86_64] [CRYPTO_DEFLATE] [CRYPTO_ZLIB] [CRYPTO_LZO] [CRYPTO_ANSI_CPRNG] [CRYPTO_HW];
VIRTUALIZATION:  [KVM] [LGUEST] [VIRTIO] [VIRTIO_RING] [VIRTIO_PCI] [VIRTIO_BALLOON];
Library_routines:  [BITREVERSE] [RATIONAL] [GENERIC_FIND_FIRST_BIT] [GENERIC_FIND_NEXT_BIT] [GENERIC_FIND_LAST_BIT] [CRC_CCITT] [CRC16] [CRC_T10DIF] [CRC_ITU_T] [CRC32] [CRC7] [LIBCRC32C] [AUDIT_GENERIC] [ZLIB_INFLATE] [ZLIB_DEFLATE] [LZO_COMPRESS] [LZO_DECOMPRESS] [DECOMPRESS_GZIP] [DECOMPRESS_BZIP2] [DECOMPRESS_LZMA] [GENERIC_ALLOCATOR] [REED_SOLOMON] [REED_SOLOMON_ENC8] [REED_SOLOMON_DEC8] [REED_SOLOMON_ENC16] [REED_SOLOMON_DEC16] [TEXTSEARCH] [TEXTSEARCH_KMP] [TEXTSEARCH_BM] [TEXTSEARCH_FSM] [HAS_IOMEM] [HAS_IOPORT] [HAS_DMA] [CHECK_SIGNATURE] [HAVE_LMB] [CPUMASK_OFFSTACK] [DISABLE_OBSOLETE_CPUMASK_FUNCTIONS] [NLATTR] [GENERIC_ATOMIC64];
Kernel_compression_mode: [1, 1] { KERNEL_GZIP KERNEL_BZIP2 KERNEL_LZMA};
SYSVIPC:  [SYSVIPC_SYSCTL];
POSIX_MQUEUE:  [POSIX_MQUEUE_SYSCTL];
BSD_PROCESS_ACCT:  [BSD_PROCESS_ACCT_V3];
TASKSTATS:  [TASK_DELAY_ACCT] [TASK_XACCT];
AUDIT:  [AUDITSYSCALL];
RCU_Subsystem:  RCU_Implementation [RCU_TRACE] [RCU_FANOUT] [RCU_FANOUT_EXACT] [TREE_RCU_TRACE];
IKCONFIG:  [IKCONFIG_PROC];
GROUP_SCHED:  [FAIR_GROUP_SCHED] [RT_GROUP_SCHED] Basis_for_grouping_tasks;
CGROUPS:  [CGROUP_DEBUG] [CGROUP_NS] [CGROUP_FREEZER] [CGROUP_DEVICE] [CPUSETS] [CGROUP_CPUACCT] [RESOURCE_COUNTERS];
NAMESPACES:  [UTS_NS] [IPC_NS] [USER_NS] [PID_NS] [NET_NS];
BLK_DEV_INITRD:  [INITRAMFS_SOURCE] [RD_GZIP] [RD_BZIP2] [RD_LZMA] Built_in_initramfs_compression_mode;
EMBEDDED:  [UID16] [SYSCTL_SYSCALL] [KALLSYMS] [HOTPLUG] [PRINTK] [BUG] [ELF_CORE] [PCSPKR_PLATFORM] [BASE_FULL] [FUTEX] [EPOLL] [SIGNALFD] [TIMERFD] [EVENTFD] [SHMEM] [AIO];
Kernel_Performance_Events_And_Counters:  [PERF_EVENTS] [PERF_COUNTERS] [DEBUG_PERF_USE_VMALLOC];
Choose_SLAB_allocator: [1, 1] { SLAB SLUB SLOB};
OPROFILE:  [OPROFILE_IBS] [OPROFILE_EVENT_MULTIPLEX];
GCOV_based_kernel_profiling:  [GCOV_KERNEL];
MODULE_UNLOAD:  [MODULE_FORCE_UNLOAD];
IO_Schedulers:  [IOSCHED_NOOP] [IOSCHED_AS] [IOSCHED_DEADLINE] [IOSCHED_CFQ] Default_I_O_scheduler [DEFAULT_IOSCHED];
SPARSE_IRQ:  [NUMA_IRQ_DESC];
X86_32_NON_STANDARD:  [X86_NUMAQ];
PARAVIRT_GUEST:  [XEN] [VMI] [KVM_CLOCK] [KVM_GUEST] [LGUEST_GUEST] [PARAVIRT] [PARAVIRT_CLOCK];
Processor_family: [1, 1] { M386 M486 M586 M586TSC M586MMX M686 MPENTIUMII MPENTIUMIII MPENTIUMM MPENTIUM4 MK6 MK7 MK8 MCRUSOE MEFFICEON MWINCHIPC6 MWINCHIP3D MGEODEGX1 MGEODE_LX MCYRIXIII MVIAC3_2 MVIAC7 MPSC MCORE2 MATOM GENERIC_CPU};
PROCESSOR_SELECT:  [CPU_SUP_INTEL] [CPU_SUP_CYRIX_32] [CPU_SUP_AMD] [CPU_SUP_CENTAUR] [CPU_SUP_TRANSMETA_32] [CPU_SUP_UMC_32];
HPET_TIMER:  [HPET_EMULATE_RTC];
CALGARY_IOMMU:  [CALGARY_IOMMU_ENABLED_BY_DEFAULT];
AMD_IOMMU:  [AMD_IOMMU_STATS];
Preemption_Model: [1, 1] { PREEMPT_NONE PREEMPT_VOLUNTARY PREEMPT};
X86_UP_APIC:  [X86_UP_IOAPIC];
X86_MCE:  [X86_MCE_INTEL] [X86_MCE_AMD] [X86_ANCIENT_MCE];
MICROCODE:  [MICROCODE_INTEL] [MICROCODE_AMD] [MICROCODE_OLD_INTERFACE];
High_Memory_Support: [1, 1] { NOHIGHMEM HIGHMEM4G HIGHMEM64G};
Memory_split: [1, 1] { VMSPLIT_3G VMSPLIT_3G_OPT VMSPLIT_2G VMSPLIT_2G_OPT VMSPLIT_1G};
X86_64_ACPI_NUMA:  [NODES_SPAN_OTHER_NODES];
Memory_model: [1, 1] { FLATMEM_MANUAL DISCONTIGMEM_MANUAL SPARSEMEM_MANUAL};
MEMORY_HOTPLUG:  [MEMORY_HOTPLUG_SPARSE] [MEMORY_HOTREMOVE];
MEMORY_FAILURE:  [HWPOISON_INJECT];
X86_CHECK_BIOS_CORRUPTION:  [X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK];
MTRR:  [MTRR_SANITIZER] [X86_PAT];
Timer_frequency: [1, 1] { HZ_100 HZ_250 HZ_300 HZ_1000};
RELOCATABLE:  [X86_NEED_RELOCS];
CMDLINE_BOOL:  [CMDLINE] [CMDLINE_OVERRIDE];
PM:  [PM_DEBUG];
SUSPEND:  [PM_TEST_SUSPEND] [SUSPEND_FREEZER];
HIBERNATION:  [PM_STD_PARTITION];
ACPI:  [ACPI_SLEEP] [ACPI_PROCFS] [ACPI_PROCFS_POWER] [ACPI_POWER_METER] [ACPI_SYSFS_POWER] [ACPI_PROC_EVENT] [ACPI_AC] [ACPI_BATTERY] [ACPI_BUTTON] [ACPI_VIDEO] [ACPI_FAN] [ACPI_DOCK] [ACPI_PROCESSOR] [ACPI_NUMA] [ACPI_CUSTOM_DSDT_FILE] [ACPI_CUSTOM_DSDT] [ACPI_BLACKLIST_YEAR] [ACPI_DEBUG] [ACPI_PCI_SLOT] [X86_PM_TIMER] [ACPI_CONTAINER] [ACPI_HOTPLUG_MEMORY] [ACPI_SBS];
APM:  [APM_IGNORE_USER_SUSPEND] [APM_DO_ENABLE] [APM_CPU_IDLE] [APM_DISPLAY_BLANK] [APM_ALLOW_INTS];
CPU_Frequency_scaling:  [CPU_FREQ];
CPU_IDLE:  [CPU_IDLE_GOV_LADDER] [CPU_IDLE_GOV_MENU];
Memory_power_savings:  [I7300_IDLE_IOAT_CHANNEL] [I7300_IDLE];
PCI:  PCI_access_mode [PCI_BIOS] [PCI_DIRECT] [PCI_OLPC] [PCI_DOMAINS] [PCI_MMCONFIG];
DMAR:  [DMAR_DEFAULT_ON] [DMAR_BROKEN_GFX_WA] [DMAR_FLOPPY_WA];
PCIEPORTBUS:  [HOTPLUG_PCI_PCIE] [PCIEAER] [PCIEASPM];
ISA:  [EISA];
MCA:  [MCA_LEGACY];
SCx200:  [SCx200HR_TIMER];
PCCARD:  [PCMCIA_DEBUG] [PCMCIA] [CARDBUS] [YENTA] [PD6729] [I82092] [I82365] [TCIC] [PCMCIA_M8XX] [PCMCIA_AU1X00] [PCMCIA_BCM63XX] [PCMCIA_SA1100] [PCMCIA_SA1111] [PCMCIA_PXA2XX] [PCMCIA_PROBE] [M32R_PCC] [M32R_CFC] [PCMCIA_VRC4171] [PCMCIA_VRC4173] [OMAP_CF] [BFIN_CFPCMCIA] [AT91_CF] [ELECTRA_CF] [PCCARD_NONSTATIC] [PCCARD_IODYN];
HOTPLUG_PCI:  [HOTPLUG_PCI_FAKE] [HOTPLUG_PCI_COMPAQ] [HOTPLUG_PCI_IBM] [HOTPLUG_PCI_ACPI] [HOTPLUG_PCI_CPCI] [HOTPLUG_PCI_SHPC] [HOTPLUG_PCI_RPA] [HOTPLUG_PCI_SGI];
BINFMT_ELF:  [COMPAT_BINFMT_ELF];
BINFMT_FLAT:  [BINFMT_ZFLAT] [BINFMT_SHARED_FLAT];
BINFMT_AOUT:  [OSF4_COMPAT];
IA32_EMULATION:  [IA32_AOUT] [COMPAT];
Networking_options:  [PACKET] [UNIX] [XFRM] [XFRM_USER] [XFRM_SUB_POLICY] [XFRM_MIGRATE] [XFRM_STATISTICS] [XFRM_IPCOMP] [NET_KEY] [IUCV] [INET] [NETWORK_SECMARK] [NETFILTER] [IP_DCCP] [IP_SCTP] [RDS] [TIPC] [ATM] [STP] [GARP] [BRIDGE] [NET_DSA] [VLAN_8021Q] [DECNET] [LLC] [LLC2] [IPX] [ATALK] [X25] [LAPB] [ECONET] [WAN_ROUTER] [PHONET] [IEEE802154] [NET_SCHED] [NET_SCH_FIFO] [DCB] Network_testing;
HAMRADIO:  [AX25];
CAN:  [CAN_RAW] [CAN_BCM] CAN_Device_Drivers;
IRDA:  [IRLAN] [IRNET] [IRCOMM] [IRDA_ULTRA] [IRDA_CACHE_LAST_LSAP] [IRDA_FAST_RR] [IRDA_DEBUG] Infrared_port_device_drivers;
BT:  [BT_L2CAP] [BT_SCO] [BT_RFCOMM] [BT_BNEP] [BT_CMTP] [BT_HIDP] Bluetooth_device_drivers;
AF_RXRPC:  [AF_RXRPC_DEBUG] [RXKAD];
WIRELESS:  [CFG80211] [CFG80211_DEFAULT_PS_VALUE] [CFG80211_DEBUGFS] [WIRELESS_OLD_REGULATORY] [WIRELESS_EXT] [LIB80211] [LIB80211_CRYPT_WEP] [LIB80211_CRYPT_CCMP] [LIB80211_CRYPT_TKIP] [LIB80211_DEBUG] [MAC80211] [MAC80211_RC_PID] [MAC80211_RC_MINSTREL] Default_rate_control_algorithm [MAC80211_RC_DEFAULT] [MAC80211_MESH] [MAC80211_LEDS] [MAC80211_DEBUGFS] [MAC80211_DEBUG_MENU];
WIMAX:  [WIMAX_DEBUG_LEVEL];
RFKILL:  [RFKILL_LEDS] [RFKILL_INPUT];
NET_9P:  [NET_9P_VIRTIO] [NET_9P_RDMA] [NET_9P_DEBUG];
Generic_Driver_Options:  [UEVENT_HELPER_PATH] [DEVTMPFS] [STANDALONE] [PREVENT_FIRMWARE_BUILD] [FW_LOADER] [EXTRA_FIRMWARE_DIR] [DEBUG_DRIVER] [DEBUG_DEVRES] [SYS_HYPERVISOR];
CONNECTOR:  [PROC_EVENTS];
MTD:  [MTD_DEBUG] [MTD_TESTS] [MTD_CONCAT] [MTD_PARTITIONS] [MTD_CHAR] [HAVE_MTD_OTP] [MTD_BLKDEVS] [MTD_BLOCK] [FTL] [NFTL] [INFTL] [RFD_FTL] [SSFDC] [MTD_OOPS] RAM_ROM_Flash_chip_drivers Mapping_drivers_for_chip_access Self_contained_MTD_device_drivers [MTD_NAND] [MTD_ONENAND] LPDDR_flash_memory_drivers UBI___Unsorted_block_images;
PARPORT:  [PARPORT_PC] [PARPORT_IP32] [PARPORT_AMIGA] [PARPORT_MFC3] [PARPORT_ATARI] [PARPORT_GSC] [PARPORT_SUNBPP] [PARPORT_AX88796] [PARPORT_1284] [PARPORT_NOT_PC];
PNP:  [PNP_DEBUG_MESSAGES] [ISAPNP] [PNPBIOS] [PNPACPI];
BLK_DEV:  [BLK_DEV_FD] [AMIGA_FLOPPY] [ATARI_FLOPPY] [MAC_FLOPPY] [BLK_DEV_SWIM] [AMIGA_Z2RAM] [BLK_DEV_XD] [PARIDE] [GDROM] [PARIDE_PD] [PARIDE_PCD] [PARIDE_PF] [PARIDE_PT] [PARIDE_PG] [PARIDE_ATEN] [PARIDE_BPCK] [PARIDE_BPCK6] [PARIDE_COMM] [PARIDE_DSTR] [PARIDE_FIT2] [PARIDE_FIT3] [PARIDE_EPAT] [PARIDE_EPIA] [PARIDE_FRIQ] [PARIDE_FRPW] [PARIDE_KBIC] [PARIDE_KTTI] [PARIDE_ON20] [PARIDE_ON26] [BLK_CPQ_DA] [BLK_CPQ_CISS_DA] [BLK_DEV_DAC960] [BLK_DEV_UMEM] [BLK_DEV_UBD] [BLK_DEV_COW_COMMON] [BLK_DEV_LOOP] [BLK_DEV_NBD] [BLK_DEV_OSD] [BLK_DEV_SX8] [BLK_DEV_UB] [BLK_DEV_RAM] [CDROM_PKTCDVD] [ATA_OVER_ETH] [MG_DISK] [SUNVDC] [BLK_DEV_XPRAM] [DCSSBLK] [DASD] [XILINX_SYSACE] [XEN_BLKDEV_FRONTEND] [VIRTIO_BLK] [BLK_DEV_HD];
MISC_DEVICES:  [ATMEL_PWM] [ATMEL_TCLIB] [IBM_ASM] [PHANTOM] [SGI_IOC4] [TIFM_CORE] [ICS932S401] [ATMEL_SSC] [ENCLOSURE_SERVICES] [SGI_XP] [HP_ILO] [SGI_GRU] [ISL29003] [EP93XX_PWM] [C2PORT] EEPROM_support [CB710_CORE];
IDE:  [IDE_XFER_MODE] [IDE_TIMINGS] [IDE_ATAPI] [IDE_LEGACY] [BLK_DEV_IDE_SATA] [IDE_GD] [BLK_DEV_IDECS] [BLK_DEV_DELKIN] [BLK_DEV_IDECD] [BLK_DEV_IDETAPE] [BLK_DEV_IDEACPI] [IDE_TASK_IOCTL] [IDE_PROC_FS] [IDE_GENERIC] [BLK_DEV_PLATFORM] [BLK_DEV_CMD640] [BLK_DEV_IDEPNP] [BLK_DEV_IDEDMA_SFF] [BLK_DEV_IDEPCI] [IDEPCI_PCIBUS_ORDER] [BLK_DEV_OFFBOARD] [BLK_DEV_GENERIC] [BLK_DEV_OPTI621] [BLK_DEV_RZ1000] [BLK_DEV_IDEDMA_PCI] [BLK_DEV_AEC62XX] [BLK_DEV_ALI15X3] [BLK_DEV_AMD74XX] [BLK_DEV_ATIIXP] [BLK_DEV_CMD64X] [BLK_DEV_TRIFLEX] [BLK_DEV_CY82C693] [BLK_DEV_CS5520] [BLK_DEV_CS5530] [BLK_DEV_CS5535] [BLK_DEV_CS5536] [BLK_DEV_HPT366] [BLK_DEV_JMICRON] [BLK_DEV_SC1200] [BLK_DEV_PIIX] [BLK_DEV_IT8172] [BLK_DEV_IT8213] [BLK_DEV_IT821X] [BLK_DEV_NS87415] [BLK_DEV_PDC202XX_OLD] [BLK_DEV_PDC202XX_NEW] [BLK_DEV_SVWKS] [BLK_DEV_SGIIOC4] [BLK_DEV_SIIMAGE] [BLK_DEV_SIS5513] [BLK_DEV_SL82C105] [BLK_DEV_SLC90E66] [BLK_DEV_TRM290] [BLK_DEV_VIA82CXXX] [BLK_DEV_TC86C001] [BLK_DEV_CELLEB] [BLK_DEV_IDE_PMAC] [BLK_DEV_IDE_AU1XXX] [BLK_DEV_IDE_TX4938] [BLK_DEV_IDE_TX4939] [BLK_DEV_IDE_AT91] [BLK_DEV_IDE_ICSIDE] [BLK_DEV_IDE_RAPIDE] [IDE_H8300] [BLK_DEV_GAYLE] [BLK_DEV_BUDDHA] [BLK_DEV_FALCON_IDE] [BLK_DEV_MAC_IDE] [BLK_DEV_Q40IDE] [BLK_DEV_PALMCHIP_BK3710] [BLK_DEV_4DRIVES] [BLK_DEV_ALI14XX] [BLK_DEV_DTC2278] [BLK_DEV_HT6560B] [BLK_DEV_QD65XX] [BLK_DEV_UMC8672] [BLK_DEV_IDEDMA];
SCSI_device_support:  [RAID_ATTRS] [SCSI] [SCSI_DMA] [SCSI_TGT] [SCSI_NETLINK] [SCSI_PROC_FS] [BLK_DEV_SD] [CHR_DEV_ST] [CHR_DEV_OSST] [BLK_DEV_SR] [CHR_DEV_SG] [CHR_DEV_SCH] [SCSI_ENCLOSURE] [SCSI_MULTI_LUN] [SCSI_CONSTANTS] [SCSI_LOGGING] [SCSI_SCAN_ASYNC] [SCSI_WAIT_SCAN] SCSI_Transports [SCSI_LOWLEVEL] [SCSI_LOWLEVEL_PCMCIA] [SCSI_DH] [SCSI_OSD_INITIATOR];
ATA:  [ATA_NONSTANDARD] [ATA_VERBOSE_ERROR] [ATA_ACPI] [SATA_PMP] [SATA_AHCI] [SATA_SIL24] [SATA_FSL] [ATA_SFF];
MD:  [BLK_DEV_MD] [MD_RAID6_PQ] [ASYNC_RAID6_TEST] [MD_MULTIPATH] [MD_FAULTY] [BLK_DEV_DM];
FUSION:  [FUSION_SPI] [FUSION_FC] [FUSION_SAS] [FUSION_MAX_SGE] [FUSION_CTL] [FUSION_LAN] [FUSION_LOGGING];
IEEE_1394__FireWire__support:  [FIREWIRE] [IEEE1394];
I2O:  [I2O_LCT_NOTIFY_ON_CHANGES] [I2O_EXT_ADAPTEC] [I2O_CONFIG] [I2O_BUS] [I2O_BLOCK] [I2O_SCSI] [I2O_PROC];
MACINTOSH_DRIVERS:  [ADB] [ADB_CUDA] [ADB_PMU] [PMAC_SMU] [PMAC_APM_EMU] [PMAC_MEDIABAY] [PMAC_BACKLIGHT] [ADB_MACIO] [INPUT_ADBHID] [MAC_EMUMOUSEBTN] [THERM_WINDTUNNEL] [THERM_ADT746X] [THERM_PM72] [WINDFARM] [ANSLCD] [PMAC_RACKMETER];
NETDEVICES:  [IFB] [DUMMY] [BONDING] [MACVLAN] [EQUALIZER] [TUN] [VETH] [NET_SB1000] [ARCNET] [PHYLIB] [NET_ETHERNET] [NETDEV_1000] [NETDEV_10000] [TR] [WLAN] WiMAX_Wireless_Broadband_devices USB_Network_Adapters [NET_PCMCIA] [WAN] [ATM_DRIVERS] [IEEE802154_DRIVERS] S_390_network_device_drivers [XEN_NETDEV_FRONTEND] [ISERIES_VETH] [RIONET] [FDDI] [HIPPI] [PLIP] [PPP] [SLIP] [SLHC] [SLIP_SMART] [SLIP_MODE_SLIP6] [NET_FC] [NETCONSOLE] [NETPOLL] [NETPOLL_TRAP] [NET_POLL_CONTROLLER] [VIRTIO_NET] [VMXNET3];
ISDN:  [ISDN_I4L] [MISDN] [ISDN_PPP] [ISDN_AUDIO] [ISDN_X25] ISDN_feature_submodules Passive_cards Active_cards [ISDN_HDLC] [ISDN_CAPI] [ISDN_DRV_GIGASET];
PHONE:  [PHONE_IXJ];
Input_device_support:  [INPUT] Hardware_I_O_ports;
Character_devices:  [VT] [DEVKMEM] [BFIN_JTAG_COMM] [SERIAL_NONSTANDARD] [NOZOMI] [A2232] [SGI_SNSC] [SGI_TIOCX] Serial_drivers [UNIX98_PTYS] [LEGACY_PTYS] [BRIQ_PANEL] [BFIN_OTP] [PRINTER] [PPDEV] [HVC_DRIVER] [HVC_IRQ] [HVC_CONSOLE] [HVC_ISERIES] [HVC_RTAS] [HVC_BEAT] [HVC_IUCV] [HVC_XEN] [HVC_UDBG] [VIRTIO_CONSOLE] [HVCS] [IBM_BSR] [IPMI_HANDLER] [DS1620] [NWBUTTON] [NWFLASH] [HW_RANDOM] [NVRAM] [RTC] [JS_RTC] [GEN_RTC] [EFI_RTC] [DS1302] [DTLK] [XILINX_HWICAP] [R3964] [APPLICOM] [SONYPI] [GPIO_TB0219] PCMCIA_character_devices [MWAVE] [SCx200_GPIO] [PC8736x_GPIO] [NSC_GPIO] [CS5535_GPIO] [RAW_DRIVER] [HPET] [HANGCHECK_TIMER] [MMTIMER] [UV_MMTIMER] [TCG_TPM] [TELCLOCK] [DEVPORT] [TN3270] [TN3215] [CCW_CONSOLE] [SCLP_TTY] [SCLP_VT220_TTY] [SCLP_CPI] [SCLP_ASYNC] [S390_TAPE] [VMLOGRDR] [VMCP] [MONREADER] [MONWRITER] [S390_VMUR];
I2C:  [I2C_BOARDINFO] [I2C_COMPAT] [I2C_CHARDEV] [I2C_HELPER_AUTO] I2C_Hardware_Bus_support Miscellaneous_I2C_Chip_support [I2C_DEBUG_CORE] [I2C_DEBUG_ALGO] [I2C_DEBUG_BUS] [I2C_DEBUG_CHIP];
SPI:  [SPI_DEBUG] [SPI_MASTER] [SPI_ATMEL] [SPI_BFIN] [SPI_AU1550] [SPI_BITBANG] [SPI_BUTTERFLY] [SPI_GPIO] [SPI_IMX] [SPI_LM70_LLP] [SPI_MPC52xx_PSC] [SPI_MPC8xxx] [SPI_OMAP_UWIRE] [SPI_OMAP24XX] [SPI_ORION] [SPI_PL022] [SPI_PPC4xx] [SPI_PXA2XX] [SPI_S3C24XX] [SPI_S3C24XX_GPIO] [SPI_SH_SCI] [SPI_STMP3XXX] [SPI_TXX9] [SPI_XILINX] [SPI_SPIDEV] [SPI_TLE62X0];
PPS_support:  [PPS];
GPIOLIB:  [DEBUG_GPIO] [GPIO_SYSFS] [GPIO_PL061] [GPIO_XILINX] [GPIO_VR41XX] [GPIO_MAX732X] [GPIO_PCA953X] [GPIO_PCF857X] [GPIO_TWL4030] [GPIO_WM831X] [GPIO_ADP5520] [GPIO_BT8XX] [GPIO_LANGWELL] [GPIO_MAX7301] [GPIO_MCP23S08] [GPIO_MC33880] [GPIO_UCB1400];
W1:  [W1_CON] c1_wire_Bus_Masters c1_wire_Slaves;
POWER_SUPPLY:  [POWER_SUPPLY_DEBUG] [PDA_POWER] [APM_POWER] [WM831X_POWER] [WM8350_POWER] [BATTERY_DS2760] [BATTERY_DS2782] [BATTERY_PMU] [BATTERY_OLPC] [BATTERY_TOSA] [BATTERY_WM97XX] [BATTERY_BQ27x00] [BATTERY_DA9030] [BATTERY_MAX17040] [CHARGER_PCF50633];
HWMON:  [HWMON_VID] [HWMON_DEBUG_CHIP] [SENSORS_ABITUGURU] [SENSORS_ABITUGURU3] [SENSORS_AD7414] [SENSORS_AD7418] [SENSORS_ADCXX] [SENSORS_ADM1021] [SENSORS_ADM1025] [SENSORS_ADM1026] [SENSORS_ADM1029] [SENSORS_ADM1031] [SENSORS_ADM9240] [SENSORS_ADT7462] [SENSORS_ADT7470] [SENSORS_ADT7473] [SENSORS_ADT7475] [SENSORS_K8TEMP] [SENSORS_AMS] [SENSORS_ASB100] [SENSORS_ATXP1] [SENSORS_DS1621] [SENSORS_I5K_AMB] [SENSORS_F71805F] [SENSORS_F71882FG] [SENSORS_F75375S] [SENSORS_FSCHMD] [SENSORS_G760A] [SENSORS_GL518SM] [SENSORS_GL520SM] [SENSORS_CORETEMP] [SENSORS_IBMAEM] [SENSORS_IBMPEX] [SENSORS_IT87] [SENSORS_LM63] [SENSORS_LM70] [SENSORS_LM75] [SENSORS_LM77] [SENSORS_LM78] [SENSORS_LM80] [SENSORS_LM83] [SENSORS_LM85] [SENSORS_LM87] [SENSORS_LM90] [SENSORS_LM92] [SENSORS_LM93] [SENSORS_LTC4215] [SENSORS_LTC4245] [SENSORS_LM95241] [SENSORS_MAX1111] [SENSORS_MAX1619] [SENSORS_MAX6650] [SENSORS_PC87360] [SENSORS_PC87427] [SENSORS_PCF8591] [SENSORS_SHT15] [SENSORS_S3C] [SENSORS_SIS5595] [SENSORS_DME1737] [SENSORS_SMSC47M1] [SENSORS_SMSC47M192] [SENSORS_SMSC47B397] [SENSORS_ADS7828] [SENSORS_THMC50] [SENSORS_TMP401] [SENSORS_TMP421] [SENSORS_VIA686A] [SENSORS_VT1211] [SENSORS_VT8231] [SENSORS_W83781D] [SENSORS_W83791D] [SENSORS_W83792D] [SENSORS_W83793] [SENSORS_W83L785TS] [SENSORS_W83L786NG] [SENSORS_W83627HF] [SENSORS_W83627EHF] [SENSORS_WM831X] [SENSORS_WM8350] [SENSORS_ULTRA45] [SENSORS_HDAPS] [SENSORS_LIS3_SPI] [SENSORS_APPLESMC] [SENSORS_ATK0110] [SENSORS_LIS3LV02D];
THERMAL:  [THERMAL_HWMON];
WATCHDOG:  [WATCHDOG_NOWAYOUT] [SOFT_WATCHDOG] [WM831X_WATCHDOG] [WM8350_WATCHDOG] [AT91RM9200_WATCHDOG] [AT91SAM9X_WATCHDOG] [c21285_WATCHDOG] [c977_WATCHDOG] [IXP2000_WATCHDOG] [IXP4XX_WATCHDOG] [KS8695_WATCHDOG] [S3C2410_WATCHDOG] [SA1100_WATCHDOG] [MPCORE_WATCHDOG] [EP93XX_WATCHDOG] [OMAP_WATCHDOG] [PNX4008_WATCHDOG] [IOP_WATCHDOG] [DAVINCI_WATCHDOG] [ORION_WATCHDOG] [COH901327_WATCHDOG] [TWL4030_WATCHDOG] [STMP3XXX_WATCHDOG] [NUC900_WATCHDOG] [ADX_WATCHDOG] [AT32AP700X_WDT] [BFIN_WDT] [ACQUIRE_WDT] [ADVANTECH_WDT] [ALIM1535_WDT] [ALIM7101_WDT] [GEODE_WDT] [SC520_WDT] [SBC_FITPC2_WATCHDOG] [EUROTECH_WDT] [IB700_WDT] [IBMASR] [WAFER_WDT] [I6300ESB_WDT] [ITCO_WDT] [IT8712F_WDT] [IT87_WDT] [HP_WATCHDOG] [SC1200_WDT] [SCx200_WDT] [PC87413_WDT] [RDC321X_WDT] [c60XX_WDT] [SBC8360_WDT] [SBC7240_WDT] [CPU5_WDT] [SMSC_SCH311X_WDT] [SMSC37B787_WDT] [W83627HF_WDT] [W83697HF_WDT] [W83697UG_WDT] [W83877F_WDT] [W83977F_WDT] [MACHZ_WDT] [SBC_EPX_C3_WATCHDOG] [BCM47XX_WDT] [RC32434_WDT] [INDYDOG] [WDT_MTX1] [PNX833X_WDT] [WDT_RM9K_GPI] [SIBYTE_WDOG] [AR7_WDT] [TXX9_WDT] [GEF_WDT] [MPC5200_WDT] [c8xxx_WDT] [MV64X60_WDT] [PIKA_WDT] [BOOKE_WDT] [WATCHDOG_RTAS] [ZVM_WATCHDOG] [SH_WDT] [WATCHDOG_CP1XXX] [WATCHDOG_RIO] [PCWATCHDOG] [MIXCOMWD] [WDT] [PCIPCWATCHDOG] [WDTPCI] [USBPCWATCHDOG];
Sonics_Silicon_Backplane:  [SSB] [SSB_SPROM] [SSB_BLOCKIO] [SSB_PCIHOST_POSSIBLE] [SSB_PCIHOST] [SSB_PCMCIAHOST_POSSIBLE] [SSB_PCMCIAHOST] [SSB_SDIOHOST_POSSIBLE] [SSB_SDIOHOST] [SSB_SILENT] [SSB_DEBUG] [SSB_SERIAL] [SSB_DRIVER_PCICORE_POSSIBLE] [SSB_DRIVER_PCICORE] [SSB_DRIVER_MIPS] [SSB_DRIVER_GIGE];
Multifunction_device_drivers:  [MFD_CORE] [MFD_SM501] [MFD_ASIC3] [MFD_DM355EVM_MSP] [HTC_EGPIO] [HTC_PASIC3] [UCB1400_CORE] [TPS65010] [MENELAUS] [TWL4030_CORE] [MFD_TMIO] [MFD_T7L66XB] [MFD_TC6387XB] [MFD_TC6393XB] [PMIC_DA903X] [MFD_WM8400] [MFD_WM831X] [MFD_WM8350] [MFD_WM8350_CONFIG_MODE_0] [MFD_WM8350_CONFIG_MODE_1] [MFD_WM8350_CONFIG_MODE_2] [MFD_WM8350_CONFIG_MODE_3] [MFD_WM8351_CONFIG_MODE_0] [MFD_WM8351_CONFIG_MODE_1] [MFD_WM8351_CONFIG_MODE_2] [MFD_WM8351_CONFIG_MODE_3] [MFD_WM8352_CONFIG_MODE_0] [MFD_WM8352_CONFIG_MODE_1] [MFD_WM8352_CONFIG_MODE_2] [MFD_WM8352_CONFIG_MODE_3] [MFD_WM8350_I2C] [MFD_PCF50633] [MFD_MC13783] [PCF50633_ADC] [PCF50633_GPIO] [AB3100_CORE] [EZX_PCAP];
Multimedia_Capabilities_Port_drivers:  [MCP] [MCP_SA11X0] [MCP_UCB1200];
REGULATOR:  [REGULATOR_DEBUG] [REGULATOR_FIXED_VOLTAGE] [REGULATOR_VIRTUAL_CONSUMER] [REGULATOR_USERSPACE_CONSUMER] [REGULATOR_BQ24022] [REGULATOR_MAX1586] [REGULATOR_TWL4030] [REGULATOR_WM831X] [REGULATOR_WM8350] [REGULATOR_WM8400] [REGULATOR_DA903X] [REGULATOR_PCF50633] [REGULATOR_LP3971] [REGULATOR_PCAP] [REGULATOR_MC13783] [REGULATOR_AB3100] [REGULATOR_TPS65023] [REGULATOR_TPS6507X];
MEDIA_SUPPORT:  [VIDEO_DEV] [DVB_CORE] [VIDEO_MEDIA] [VIDEO_SAA7146] [VIDEO_SAA7146_VV] [MEDIA_ATTACH] [MEDIA_TUNER] [MEDIA_TUNER_CUSTOMISE] [VIDEO_V4L2] [VIDEO_V4L1] [VIDEOBUF_GEN] [VIDEOBUF_DMA_SG] [VIDEOBUF_VMALLOC] [VIDEOBUF_DMA_CONTIG] [VIDEOBUF_DVB] [VIDEO_BTCX] [VIDEO_IR] [VIDEO_TVEEPROM] [VIDEO_TUNER] [VIDEO_CAPTURE_DRIVERS] [RADIO_ADAPTERS] [DVB_MAX_ADAPTERS] [DVB_DYNAMIC_MINORS] [DVB_CAPTURE_DRIVERS] [DAB];
Graphics_support:  [AGP] [VGA_ARB] [DRM] [VGASTATE] [VIDEO_OUTPUT_CONTROL] [FB] [FB_OMAP_LCD_VGA] Screen_resolution [FB_OMAP_LCDC_EXTERNAL] [FB_OMAP_LCD_MIPID] [FB_OMAP_BOOTLOADER_INIT] [FB_OMAP_CONSISTENT_DMA_SIZE] [FB_OMAP_DMA_TUNE] [BACKLIGHT_LCD_SUPPORT] Display_device_support Console_display_driver_support [LOGO];
SOUND:  [SOUND_OSS_CORE] [SOUND_OSS_CORE_PRECLAIM] [DMASOUND_ATARI] [DMASOUND_PAULA] [DMASOUND_Q40] [DMASOUND] [SND] [SOUND_PRIME];
HID_SUPPORT:  [HID] [USB_HID] [HID_PID] [USB_HIDDEV] USB_HID_Boot_Protocol_drivers Special_HID_drivers;
USB_SUPPORT:  [USB_ARCH_HAS_HCD] [USB_ARCH_HAS_OHCI] [USB_ARCH_HAS_EHCI] [USB] [USB_MUSB_HDRC] [USB_ACM] [USB_PRINTER] [USB_WDM] [USB_TMC] [USB_STORAGE] [USB_LIBUSUAL] [USB_MDC800] [USB_MICROTEK] [USB_USS720] [USB_SERIAL] [USB_EMI62] [USB_EMI26] [USB_ADUTUX] [USB_SEVSEG] [USB_RIO500] [USB_LEGOTOWER] [USB_LCD] [USB_BERRY_CHARGE] [USB_LED] [USB_CYPRESS_CY7C63] [USB_CYTHERM] [USB_IDMOUSE] [USB_FTDI_ELAN] [USB_APPLEDISPLAY] [USB_SISUSBVGA] [USB_LD] [USB_TRANCEVIBRATOR] [USB_IOWARRIOR] [USB_TEST] [USB_ISIGHTFW] [USB_VST] [USB_ATM] [USB_GADGET] [USB_OTG_UTILS] [USB_GPIO_VBUS] [ISP1301_OMAP] [TWL4030_USB] [NOP_USB_XCEIV];
UWB:  [UWB_HWA] [UWB_WHCI] [UWB_WLP] [UWB_I1480U];
MMC:  [MMC_DEBUG] [MMC_UNSAFE_RESUME] [MMC_BLOCK] [SDIO_UART] [MMC_TEST] [MMC_ARMMMCI] [MMC_PXA] [MMC_SDHCI] [MMC_OMAP] [MMC_OMAP_HS] [MMC_WBSD] [MMC_AU1X] Atmel_SD_MMC_Driver [MMC_ATMELMCI_DMA] [MMC_IMX] [MMC_MSM7X00A] [MMC_MXC] [MMC_TIFM_SD] [MMC_MVSDIO] [MMC_SPI] [MMC_S3C] [MMC_SDRICOH_CS] [MMC_TMIO] [MMC_CB710] [MMC_VIA_SDMMC];
MEMSTICK:  [MEMSTICK_DEBUG] [MEMSTICK_UNSAFE_RESUME] [MSPRO_BLOCK] [MEMSTICK_TIFM_MS] [MEMSTICK_JMICRON_38X];
NEW_LEDS:  [LEDS_CLASS] [LEDS_ATMEL_PWM] [LEDS_LOCOMO] [LEDS_MIKROTIK_RB532] [LEDS_S3C24XX] [LEDS_AMS_DELTA] [LEDS_NET48XX] [LEDS_FSG] [LEDS_WRAP] [LEDS_ALIX2] [LEDS_H1940] [LEDS_COBALT_QUBE] [LEDS_COBALT_RAQ] [LEDS_SUNFIRE] [LEDS_HP6XX] [LEDS_PCA9532] [LEDS_GPIO] [LEDS_LP3944] [LEDS_CLEVO_MAIL] [LEDS_PCA955X] [LEDS_WM831X_STATUS] [LEDS_WM8350] [LEDS_DA903X] [LEDS_DAC124S085] [LEDS_PWM] [LEDS_BD2802] [LEDS_TRIGGERS];
ACCESSIBILITY:  [A11Y_BRAILLE_CONSOLE];
INFINIBAND:  [INFINIBAND_USER_MAD] [INFINIBAND_USER_ACCESS] [INFINIBAND_ADDR_TRANS] [INFINIBAND_MTHCA] [INFINIBAND_IPATH] [INFINIBAND_EHCA] [INFINIBAND_AMSO1100] [INFINIBAND_CXGB3] [MLX4_INFINIBAND] [INFINIBAND_NES] [INFINIBAND_IPOIB] [INFINIBAND_SRP] [INFINIBAND_ISER];
EDAC:  [EDAC_DEBUG] [EDAC_DECODE_MCE] [EDAC_MM_EDAC];
RTC_CLASS:  [RTC_HCTOSYS] [RTC_DEBUG] [RTC_INTF_SYSFS] [RTC_INTF_PROC] [RTC_INTF_DEV] [RTC_DRV_TEST] [RTC_DRV_DS1307] [RTC_DRV_DS1374] [RTC_DRV_DS1672] [RTC_DRV_MAX6900] [RTC_DRV_RS5C372] [RTC_DRV_ISL1208] [RTC_DRV_X1205] [RTC_DRV_PCF8563] [RTC_DRV_PCF8583] [RTC_DRV_M41T80] [RTC_DRV_DM355EVM] [RTC_DRV_TWL92330] [RTC_DRV_TWL4030] [RTC_DRV_S35390A] [RTC_DRV_FM3130] [RTC_DRV_RX8581] [RTC_DRV_RX8025] [RTC_DRV_M41T94] [RTC_DRV_DS1305] [RTC_DRV_DS1390] [RTC_DRV_MAX6902] [RTC_DRV_R9701] [RTC_DRV_RS5C348] [RTC_DRV_DS3234] [RTC_DRV_PCF2123] [RTC_DRV_CMOS] [RTC_DRV_DS1216] [RTC_DRV_DS1286] [RTC_DRV_DS1302] [RTC_DRV_DS1511] [RTC_DRV_DS1553] [RTC_DRV_DS1742] [RTC_DRV_EFI] [RTC_DRV_STK17TA8] [RTC_DRV_M48T86] [RTC_DRV_M48T35] [RTC_DRV_M48T59] [RTC_MXC] [RTC_DRV_BQ4802] [RTC_DRV_V3020] [RTC_DRV_WM831X] [RTC_DRV_WM8350] [RTC_DRV_PCF50633] [RTC_DRV_AB3100] [RTC_DRV_OMAP] [RTC_DRV_S3C] [RTC_DRV_EP93XX] [RTC_DRV_SA1100] [RTC_DRV_SH] [RTC_DRV_VR41XX] [RTC_DRV_PL030] [RTC_DRV_PL031] [RTC_DRV_AT32AP700X] [RTC_DRV_AT91RM9200] [RTC_DRV_AT91SAM9] [RTC_DRV_AU1XXX] [RTC_DRV_BFIN] [RTC_DRV_RS5C313] [RTC_DRV_GENERIC] [RTC_DRV_PXA] [RTC_DRV_SUN4V] [RTC_DRV_STARFIRE] [RTC_DRV_TX4939] [RTC_DRV_MV] [RTC_DRV_PS3] [RTC_DRV_COH901331] [RTC_DRV_STMP] [RTC_DRV_PCAP];
DMADEVICES:  [ASYNC_TX_DISABLE_CHANNEL_SWITCH] [INTEL_IOATDMA] [INTEL_IOP_ADMA] [DW_DMAC] [AT_HDMAC] [FSL_DMA] [MV_XOR] [MX3_IPU] [TXX9_DMAC] [SH_DMAE] [DMA_ENGINE] [NET_DMA] [ASYNC_TX_DMA] [DMATEST];
AUXDISPLAY:  [KS0108];
UIO:  [UIO_CIF] [UIO_PDRV] [UIO_PDRV_GENIRQ] [UIO_SMX] [UIO_AEC] [UIO_SERCOS3] [UIO_PCI_GENERIC];
TI_VLYNQ:  [VLYNQ];
XEN_BALLOON:  [XEN_SCRUB_PAGES];
XENFS:  [XEN_COMPAT_XENFS];
STAGING:  [STAGING_EXCLUDE_BUILD];
X86_PLATFORM_DEVICES:  [ACER_WMI] [ACERHDF] [ASUS_LAPTOP] [DELL_LAPTOP] [DELL_WMI] [FUJITSU_LAPTOP] [TC1100_WMI] [HP_WMI] [MSI_LAPTOP] [PANASONIC_LAPTOP] [COMPAL_LAPTOP] [SONY_LAPTOP] [THINKPAD_ACPI] [INTEL_MENLOW] [EEEPC_LAPTOP] [ACPI_WMI] [ACPI_ASUS] [TOPSTAR_LAPTOP] [ACPI_TOSHIBA];
EDD:  [EDD_OFF];
ISCSI_IBFT_FIND:  [ISCSI_IBFT];
EXT2_FS:  [EXT2_FS_XATTR] [EXT2_FS_XIP];
EXT3_FS:  [EXT3_DEFAULTS_TO_ORDERED] [EXT3_FS_XATTR];
EXT4_FS:  [EXT4_FS_XATTR] [EXT4_DEBUG];
REISERFS_FS:  [REISERFS_CHECK] [REISERFS_PROC_INFO] [REISERFS_FS_XATTR];
JFS_FS:  [JFS_POSIX_ACL] [JFS_SECURITY] [JFS_DEBUG] [JFS_STATISTICS];
XFS_FS:  [XFS_QUOTA] [XFS_POSIX_ACL] [XFS_RT] [XFS_DEBUG];
GFS2_FS:  [GFS2_FS_LOCKING_DLM];
OCFS2_FS:  [OCFS2_FS_O2CB] [OCFS2_FS_USERSPACE_CLUSTER] [OCFS2_FS_STATS] [OCFS2_DEBUG_MASKLOG] [OCFS2_DEBUG_FS] [OCFS2_FS_POSIX_ACL];
BTRFS_FS:  [BTRFS_FS_POSIX_ACL];
QUOTA:  [QUOTA_NETLINK_INTERFACE] [PRINT_QUOTA_WARNING];
FUSE_FS:  [CUSE];
Caches:  [FSCACHE];
CD_ROM_DVD_Filesystems:  [ISO9660_FS] [UDF_FS];
DOS_FAT_NT_Filesystems:  [FAT_FS] [MSDOS_FS] [VFAT_FS] [NTFS_FS];
Pseudo_filesystems:  [PROC_FS] [SYSFS] [TMPFS] [HUGETLBFS] [HUGETLB_PAGE] [CONFIGFS_FS];
MISC_FILESYSTEMS:  [ADFS_FS] [AFFS_FS] [ECRYPT_FS] [HFS_FS] [HFSPLUS_FS] [BEFS_FS] [BFS_FS] [EFS_FS] [JFFS2_FS] [UBIFS_FS] [CRAMFS] [SQUASHFS] [VXFS_FS] [MINIX_FS] [OMFS_FS] [HPFS_FS] [QNX4FS_FS] [ROMFS_FS] [ROMFS_ON_BLOCK] [ROMFS_ON_MTD] [SYSV_FS] [UFS_FS] [EXOFS_FS];
NETWORK_FILESYSTEMS:  [NFS_FS] [NFS_FSCACHE] [NFSD] [LOCKD] [LOCKD_V4] [EXPORTFS] [NFS_ACL_SUPPORT] [NFS_COMMON] [SUNRPC] [SUNRPC_GSS] [SUNRPC_XPRT_RDMA] [RPCSEC_GSS_KRB5] [RPCSEC_GSS_SPKM3] [SMB_FS] [CIFS] [NCP_FS] [CODA_FS] [AFS_FS] [AFS_FSCACHE] [c9P_FS] [c9P_FSCACHE];
Partition_Types:  [PARTITION_ADVANCED];
NLS:  [NLS_DEFAULT] [NLS_CODEPAGE_437] [NLS_CODEPAGE_737] [NLS_CODEPAGE_775] [NLS_CODEPAGE_850] [NLS_CODEPAGE_852] [NLS_CODEPAGE_855] [NLS_CODEPAGE_857] [NLS_CODEPAGE_860] [NLS_CODEPAGE_861] [NLS_CODEPAGE_862] [NLS_CODEPAGE_863] [NLS_CODEPAGE_864] [NLS_CODEPAGE_865] [NLS_CODEPAGE_866] [NLS_CODEPAGE_869] [NLS_CODEPAGE_936] [NLS_CODEPAGE_950] [NLS_CODEPAGE_932] [NLS_CODEPAGE_949] [NLS_CODEPAGE_874] [NLS_ISO8859_8] [NLS_CODEPAGE_1250] [NLS_CODEPAGE_1251] [NLS_ASCII] [NLS_ISO8859_1] [NLS_ISO8859_2] [NLS_ISO8859_3] [NLS_ISO8859_4] [NLS_ISO8859_5] [NLS_ISO8859_6] [NLS_ISO8859_7] [NLS_ISO8859_9] [NLS_ISO8859_13] [NLS_ISO8859_14] [NLS_ISO8859_15] [NLS_KOI8_R] [NLS_KOI8_U] [NLS_UTF8];
DLM:  [DLM_DEBUG];
DEBUG_KERNEL:  [DEBUG_SHIRQ] [DETECT_SOFTLOCKUP] [DETECT_HUNG_TASK] [SCHED_DEBUG] [SCHEDSTATS] [TIMER_STATS] [DEBUG_OBJECTS] [DEBUG_SLAB];
DEBUG_KMEMLEAK:  [DEBUG_KMEMLEAK_EARLY_LOG_SIZE] [DEBUG_KMEMLEAK_TEST];
DEBUG_RT_MUTEXES:  [DEBUG_PI_LIST];
RCU_TORTURE_TEST:  [RCU_TORTURE_TEST_RUNNABLE];
FAULT_INJECTION:  [FAILSLAB] [FAIL_PAGE_ALLOC] [FAIL_MAKE_REQUEST] [FAIL_IO_TIMEOUT] [FAULT_INJECTION_DEBUG_FS];
FTRACE:  [FUNCTION_TRACER] [IRQSOFF_TRACER] [PREEMPT_TRACER] [SYSPROF_TRACER] [SCHED_TRACER] [ENABLE_DEFAULT_TRACERS] [FTRACE_SYSCALLS] [BOOT_TRACER] [TRACE_BRANCH_PROFILING] Branch_Profiling [TRACING_BRANCHES] [BRANCH_TRACER] [POWER_TRACER] [STACK_TRACER] [HW_BRANCH_TRACER] [KMEMTRACE] [WORKQUEUE_TRACER] [BLK_DEV_IO_TRACE] [DYNAMIC_FTRACE] [FUNCTION_PROFILER] [FTRACE_MCOUNT_RECORD] [FTRACE_SELFTEST] [FTRACE_STARTUP_TEST] [MMIOTRACE] [RING_BUFFER_BENCHMARK];
SAMPLES:  [SAMPLE_TRACEPOINTS] [SAMPLE_TRACE_EVENTS] [SAMPLE_KOBJECT] [SAMPLE_KPROBES];
KGDB:  [KGDB_SERIAL_CONSOLE] [KGDB_TESTS];
KMEMCHECK:  kmemcheck__default_mode_at_boot [KMEMCHECK_QUEUE_SIZE] [KMEMCHECK_SHADOW_COPY_SHIFT] [KMEMCHECK_PARTIAL_OK] [KMEMCHECK_BITOPS_OK];
EARLY_PRINTK:  [EARLY_PRINTK_DBGP];
DEBUG_RODATA:  [DEBUG_RODATA_TEST];
IO_delay_type: [1, 1] { IO_DELAY_0X80 IO_DELAY_0XED IO_DELAY_UDELAY IO_DELAY_NONE};
KEYS:  [KEYS_DEBUG_PROC_KEYS];
SECURITY_NETWORK:  [SECURITY_NETWORK_XFRM];
SECURITY_SELINUX:  [SECURITY_SELINUX_BOOTPARAM] [SECURITY_SELINUX_DISABLE] [SECURITY_SELINUX_DEVELOP] [SECURITY_SELINUX_AVC_STATS] [SECURITY_SELINUX_CHECKREQPROT_VALUE] [SECURITY_SELINUX_POLICYDB_VERSION_MAX];
IMA:  [IMA_MEASURE_PCR_IDX] [IMA_AUDIT] [IMA_LSM_RULES];
CRYPTO_HW:  [CRYPTO_DEV_PADLOCK] [CRYPTO_DEV_GEODE] [ZCRYPT] [CRYPTO_SHA1_S390] [CRYPTO_SHA256_S390] [CRYPTO_SHA512_S390] [CRYPTO_DES_S390] [CRYPTO_AES_S390] [S390_PRNG] [CRYPTO_DEV_MV_CESA] [CRYPTO_DEV_HIFN_795X] [CRYPTO_DEV_TALITOS] [CRYPTO_DEV_IXP4XX] [CRYPTO_DEV_PPC4XX];
KVM:  [KVM_INTEL] [KVM_AMD];
TASK_XACCT:  [TASK_IO_ACCOUNTING];
AUDITSYSCALL:  [AUDIT_TREE];
RCU_Implementation: [1, 1] { TREE_RCU TREE_PREEMPT_RCU};
Basis_for_grouping_tasks: [1, 1] { USER_SCHED CGROUP_SCHED};
CPUSETS:  [PROC_PID_CPUSET];
RESOURCE_COUNTERS:  [CGROUP_MEM_RES_CTLR];
INITRAMFS_SOURCE:  [INITRAMFS_ROOT_UID] [INITRAMFS_ROOT_GID];
Built_in_initramfs_compression_mode: [1, 1] { INITRAMFS_COMPRESSION_NONE INITRAMFS_COMPRESSION_GZIP INITRAMFS_COMPRESSION_BZIP2 INITRAMFS_COMPRESSION_LZMA};
KALLSYMS:  [KALLSYMS_ALL] [KALLSYMS_EXTRA_PASS];
PERF_EVENTS:  [EVENT_PROFILE];
GCOV_KERNEL:  [GCOV_PROFILE_ALL];
Default_I_O_scheduler: [1, 1] { DEFAULT_AS DEFAULT_DEADLINE DEFAULT_CFQ DEFAULT_NOOP};
XEN:  [XEN_MAX_DOMAIN_MEMORY] [XEN_SAVE_RESTORE] [XEN_DEBUG_FS];
PARAVIRT:  [PARAVIRT_SPINLOCKS];
MTRR_SANITIZER:  [MTRR_SANITIZER_ENABLE_DEFAULT] [MTRR_SANITIZER_SPARE_REG_NR_DEFAULT];
X86_PAT:  [ARCH_USES_PG_UNCACHED];
PM_DEBUG:  [PM_VERBOSE] [CAN_PM_TRACE];
ACPI_PROCESSOR:  [ACPI_HOTPLUG_CPU] [ACPI_PROCESSOR_AGGREGATOR] [ACPI_THERMAL];
ACPI_DEBUG:  [ACPI_DEBUG_FUNC_TRACE];
CPU_FREQ:  [CPU_FREQ_TABLE] [CPU_FREQ_DEBUG] [CPU_FREQ_STAT] Default_CPUFreq_governor [CPU_FREQ_GOV_PERFORMANCE] [CPU_FREQ_GOV_POWERSAVE] [CPU_FREQ_GOV_USERSPACE] [CPU_FREQ_GOV_ONDEMAND] [CPU_FREQ_GOV_CONSERVATIVE] [X86_ACPI_CPUFREQ] [ELAN_CPUFREQ] [SC520_CPUFREQ] [X86_POWERNOW_K6] [X86_POWERNOW_K7] [X86_POWERNOW_K8] [X86_GX_SUSPMOD] [X86_SPEEDSTEP_CENTRINO] [X86_SPEEDSTEP_ICH] [X86_SPEEDSTEP_SMI] [X86_P4_CLOCKMOD] [X86_CPUFREQ_NFORCE2] [X86_LONGRUN] [X86_LONGHAUL] [X86_E_POWERSAVER] [X86_SPEEDSTEP_LIB] [X86_SPEEDSTEP_RELAXED_CAP_CHECK];
PCI_access_mode: [1, 1] { PCI_GOBIOS PCI_GOMMCONFIG PCI_GODIRECT PCI_GOOLPC PCI_GOANY};
PCIEAER:  [PCIE_ECRC] [PCIEAER_INJECT];
PCIEASPM:  [PCIEASPM_DEBUG];
EISA:  [EISA_VLB_PRIMING] [EISA_PCI_EISA] [EISA_VIRTUAL_ROOT] [EISA_NAMES];
MCA_LEGACY:  [MCA_PROC_FS];
PCMCIA:  [PCMCIA_LOAD_CIS] [PCMCIA_IOCTL];
YENTA:  [YENTA_O2] [YENTA_RICOH] [YENTA_TI] [YENTA_TOSHIBA];
M32R_CFC:  [M32R_CFC_NUM];
HOTPLUG_PCI_COMPAQ:  [HOTPLUG_PCI_COMPAQ_NVRAM];
HOTPLUG_PCI_ACPI:  [HOTPLUG_PCI_ACPI_IBM];
HOTPLUG_PCI_CPCI:  [HOTPLUG_PCI_CPCI_ZT5550] [HOTPLUG_PCI_CPCI_GENERIC];
HOTPLUG_PCI_RPA:  [HOTPLUG_PCI_RPA_DLPAR];
PACKET:  [PACKET_MMAP];
NET_KEY:  [NET_KEY_MIGRATE];
IUCV:  [AFIUCV];
INET:  [IP_MULTICAST] [IP_ADVANCED_ROUTER] [IP_FIB_HASH] [IP_FIB_TRIE_STATS] [IP_MULTIPLE_TABLES] [IP_ROUTE_MULTIPATH] [IP_ROUTE_VERBOSE] [IP_PNP] [NET_IPIP] [NET_IPGRE] [IP_MROUTE] [ARPD] [SYN_COOKIES] [INET_AH] [INET_ESP] [INET_IPCOMP] [INET_XFRM_TUNNEL] [INET_TUNNEL] [INET_XFRM_MODE_TRANSPORT] [INET_XFRM_MODE_TUNNEL] [INET_XFRM_MODE_BEET] [INET_LRO] [INET_DIAG] [TCP_CONG_ADVANCED] [DEFAULT_TCP_CONG] [TCP_MD5SIG] [IPV6] [NETLABEL];
NETFILTER:  [NETFILTER_DEBUG] [NETFILTER_ADVANCED] Core_Netfilter_Configuration [IP_VS] IP__Netfilter_Configuration IPv6__Netfilter_Configuration DECnet__Netfilter_Configuration [BRIDGE_NF_EBTABLES];
IP_DCCP:  [INET_DCCP_DIAG] DCCP_CCIDs_Configuration__EXPERIMENTAL_ DCCP_Kernel_Hacking;
IP_SCTP:  [SCTP_DBG_MSG] [SCTP_DBG_OBJCNT] SCTP__Cookie_HMAC_Algorithm;
RDS:  [RDS_RDMA] [RDS_TCP] [RDS_DEBUG];
TIPC:  [TIPC_ADVANCED] [TIPC_DEBUG];
ATM:  [ATM_CLIP] [ATM_LANE] [ATM_BR2684];
NET_DSA:  [NET_DSA_TAG_DSA] [NET_DSA_TAG_EDSA] [NET_DSA_TAG_TRAILER] [NET_DSA_MV88E6XXX] [NET_DSA_MV88E6060] [NET_DSA_MV88E6XXX_NEED_PPU] [NET_DSA_MV88E6131] [NET_DSA_MV88E6123_61_65];
VLAN_8021Q:  [VLAN_8021Q_GVRP];
DECNET:  [DECNET_ROUTER];
IPX:  [IPX_INTERN];
ATALK:  [DEV_APPLETALK];
ECONET:  [ECONET_AUNUDP] [ECONET_NATIVE];
NET_SCHED:  [NET_SCH_CBQ] [NET_SCH_HTB] [NET_SCH_HFSC] [NET_SCH_ATM] [NET_SCH_PRIO] [NET_SCH_MULTIQ] [NET_SCH_RED] [NET_SCH_SFQ] [NET_SCH_TEQL] [NET_SCH_TBF] [NET_SCH_GRED] [NET_SCH_DSMARK] [NET_SCH_NETEM] [NET_SCH_DRR] [NET_SCH_INGRESS] [NET_CLS] [NET_CLS_BASIC] [NET_CLS_TCINDEX] [NET_CLS_ROUTE4] [NET_CLS_ROUTE] [NET_CLS_FW] [NET_CLS_U32] [NET_CLS_RSVP] [NET_CLS_RSVP6] [NET_CLS_FLOW] [NET_CLS_CGROUP] [NET_EMATCH] [NET_CLS_ACT] [NET_CLS_IND];
Network_testing:  [NET_PKTGEN] [NET_TCPPROBE] [NET_DROP_MONITOR];
AX25:  [AX25_DAMA_SLAVE] [NETROM] [ROSE] AX_25_network_device_drivers;
CAN_Device_Drivers:  [CAN_VCAN] [CAN_DEV] [CAN_DEBUG_DEVICES];
Infrared_port_device_drivers:  [IRTTY_SIR] [BFIN_SIR] [DONGLE] [KINGSUN_DONGLE] [EP7211_DONGLE] [KSDAZZLE_DONGLE] [KS959_DONGLE] [USB_IRDA] [SIGMATEL_FIR] [NSC_FIR] [WINBOND_FIR] [TOSHIBA_FIR] [AU1000_FIR] [SMC_IRCC_FIR] [ALI_FIR] [VLSI_FIR] [SA1100_FIR] [VIA_FIR] [PXA_FICP] [MCS_FIR];
BT_RFCOMM:  [BT_RFCOMM_TTY];
BT_BNEP:  [BT_BNEP_MC_FILTER] [BT_BNEP_PROTO_FILTER];
Bluetooth_device_drivers:  [BT_HCIBTUSB] [BT_HCIBTSDIO] [BT_HCIUART] [BT_HCIBCM203X] [BT_HCIBPA10X] [BT_HCIBFUSB] [BT_HCIDTL1] [BT_HCIBT3C] [BT_HCIBLUECARD] [BT_HCIBTUART] [BT_HCIVHCI] [BT_MRVL];
CFG80211:  [NL80211_TESTMODE] [CFG80211_DEVELOPER_WARNINGS] [CFG80211_REG_DEBUG] [CFG80211_DEFAULT_PS];
WIRELESS_EXT:  [WIRELESS_EXT_SYSFS];
Default_rate_control_algorithm: [1, 1] { MAC80211_RC_DEFAULT_PID MAC80211_RC_DEFAULT_MINSTREL};
MAC80211_DEBUG_MENU:  [MAC80211_DEBUG_PACKET_ALIGNMENT] [MAC80211_NOINLINE] [MAC80211_VERBOSE_DEBUG] [MAC80211_HT_DEBUG] [MAC80211_TKIP_DEBUG] [MAC80211_IBSS_DEBUG] [MAC80211_VERBOSE_PS_DEBUG] [MAC80211_VERBOSE_MPL_DEBUG] [MAC80211_DEBUG_COUNTERS] [MAC80211_DRIVER_API_TRACER];
DEVTMPFS:  [DEVTMPFS_MOUNT];
FW_LOADER:  [FIRMWARE_IN_KERNEL] [EXTRA_FIRMWARE];
MTD_DEBUG:  [MTD_DEBUG_VERBOSE];
MTD_PARTITIONS:  [MTD_REDBOOT_PARTS] [MTD_CMDLINE_PARTS] [MTD_AFS_PARTS] [MTD_OF_PARTS] [MTD_AR7_PARTS];
MTD_BLOCK:  [MTD_BLOCK_RO];
NFTL:  [NFTL_RW];
RAM_ROM_Flash_chip_drivers:  [MTD_CFI] [MTD_JEDECPROBE] [MTD_GEN_PROBE] [MTD_CFI_ADV_OPTIONS] [MTD_CFI_INTELEXT] [MTD_CFI_AMDSTD] [MTD_CFI_STAA] [MTD_CFI_UTIL] [MTD_RAM] [MTD_ROM] [MTD_ABSENT] [MTD_XIP];
Mapping_drivers_for_chip_access:  [MTD_COMPLEX_MAPPINGS] [MTD_PHYSMAP] [MTD_PHYSMAP_OF] [MTD_PMC_MSP_EVM] [MSP_FLASH_MAP_LIMIT] [MTD_SUN_UFLASH] [MTD_SC520CDP] [MTD_NETSC520] [MTD_TS5500] [MTD_SBC_GXX] [MTD_PXA2XX] [MTD_OCTAGON] [MTD_VMAX] [MTD_SCx200_DOCFLASH] [MTD_AMD76XROM] [MTD_ICHXROM] [MTD_ESB2ROM] [MTD_CK804XROM] [MTD_SCB2_FLASH] [MTD_TSUNAMI] [MTD_NETtel] [MTD_ALCHEMY] [MTD_DILNETPC] [MTD_L440GX] [MTD_TQM8XXL] [MTD_RPXLITE] [MTD_MBX860] [MTD_DBOX2] [MTD_CFI_FLAGADM] [MTD_REDWOOD] [MTD_SOLUTIONENGINE] [MTD_ARM_INTEGRATOR] [MTD_CDB89712] [MTD_SA1100] [MTD_IPAQ] [MTD_DC21285] [MTD_IXP4XX] [MTD_IXP2000] [MTD_FORTUNET] [MTD_AUTCPU12] [MTD_EDB7312] [MTD_IMPA7] [MTD_CEIVA] [MTD_H720X] [MTD_OMAP_NOR] [MTD_PCI] [MTD_PCMCIA] [MTD_BFIN_ASYNC] [MTD_GPIO_ADDR] [MTD_UCLINUX] [MTD_WRSBC8260] [MTD_DMV182] [MTD_INTEL_VR_NOR] [MTD_RBTX4939] [MTD_PLATRAM] [MTD_VMU];
Self_contained_MTD_device_drivers:  [MTD_PMC551] [MTD_MS02NV] [MTD_DATAFLASH] [MTD_M25P80] [MTD_SST25L] [MTD_SLRAM] [MTD_PHRAM] [MTD_LART] [MTD_MTDRAM] [MTD_BLOCK2MTD] [MTD_DOC2000] [MTD_DOC2001] [MTD_DOC2001PLUS] [MTD_DOCPROBE] [MTD_DOCECC] [MTD_DOCPROBE_ADVANCED];
MTD_NAND:  [MTD_NAND_VERIFY_WRITE] [MTD_NAND_ECC_SMC] [MTD_NAND_MUSEUM_IDS] [MTD_NAND_AUTCPU12] [MTD_NAND_EDB7312] [MTD_NAND_H1900] [MTD_NAND_GPIO] [MTD_NAND_SPIA] [MTD_NAND_AMS_DELTA] [MTD_NAND_OMAP2] [MTD_NAND_TS7250] [MTD_NAND_IDS] [MTD_NAND_AU1550] [MTD_NAND_BF5XX] [MTD_NAND_RTC_FROM4] [MTD_NAND_PPCHAMELEONEVB] [MTD_NAND_S3C2410] [MTD_NAND_NDFC] [MTD_NAND_S3C2410_CLKSTOP] [MTD_NAND_DISKONCHIP] [MTD_NAND_SHARPSL] [MTD_NAND_BASLER_EXCITE] [MTD_NAND_CAFE] [MTD_NAND_CS553X] [MTD_NAND_ATMEL] [MTD_NAND_PXA3xx] [MTD_NAND_CM_X270] [MTD_NAND_PASEMI] [MTD_NAND_TMIO] [MTD_NAND_NANDSIM] [MTD_NAND_PLATFORM] [MTD_ALAUDA] [MTD_NAND_ORION] [MTD_NAND_FSL_ELBC] [MTD_NAND_FSL_UPM] [MTD_NAND_MXC] [MTD_NAND_NOMADIK] [MTD_NAND_SH_FLCTL] [MTD_NAND_DAVINCI] [MTD_NAND_TXX9NDFMC] [MTD_NAND_SOCRATES] [MTD_NAND_W90P910];
MTD_ONENAND:  [MTD_ONENAND_VERIFY_WRITE] [MTD_ONENAND_GENERIC] [MTD_ONENAND_OMAP2] [MTD_ONENAND_OTP] [MTD_ONENAND_2X_PROGRAM] [MTD_ONENAND_SIM];
LPDDR_flash_memory_drivers:  [MTD_LPDDR];
UBI___Unsorted_block_images:  [MTD_UBI];
PARPORT_PC:  [PARPORT_SERIAL] [PARPORT_PC_FIFO] [PARPORT_PC_SUPERIO] [PARPORT_PC_PCMCIA];
PNPBIOS:  [PNPBIOS_PROC_FS];
PARIDE_EPAT:  [PARIDE_EPATC8];
BLK_CPQ_CISS_DA:  [CISS_SCSI_TAPE];
BLK_DEV_UBD:  [BLK_DEV_UBD_SYNC];
BLK_DEV_LOOP:  [BLK_DEV_CRYPTOLOOP];
BLK_DEV_RAM:  [BLK_DEV_RAM_COUNT] [BLK_DEV_RAM_SIZE] [BLK_DEV_XIP];
CDROM_PKTCDVD:  [CDROM_PKTCDVD_BUFFERS] [CDROM_PKTCDVD_WCACHE];
MG_DISK:  [MG_DISK_RES];
DASD:  [DASD_PROFILE] [DASD_ECKD] [DASD_FBA] [DASD_DIAG] [DASD_EER];
ATMEL_TCLIB:  [ATMEL_TCB_CLKSRC];
TIFM_CORE:  [TIFM_7XX1];
SGI_GRU:  [SGI_GRU_DEBUG];
C2PORT:  [C2PORT_DURAMAR_2150];
EEPROM_support:  [EEPROM_AT24] [EEPROM_AT25] [EEPROM_LEGACY] [EEPROM_MAX6875] [EEPROM_93CX6];
CB710_CORE:  [CB710_DEBUG] [CB710_DEBUG_ASSUMPTIONS];
IDE_GD:  [IDE_GD_ATA] [IDE_GD_ATAPI];
BLK_DEV_IDECD:  [BLK_DEV_IDECD_VERBOSE_ERRORS];
BLK_DEV_CMD640:  [BLK_DEV_CMD640_ENHANCED];
BLK_DEV_IDE_PMAC:  [BLK_DEV_IDE_PMAC_ATA100FIRST];
BLK_DEV_IDE_AU1XXX:  IDE_Mode_for_AMD_Alchemy_Au1200;
BLK_DEV_IDE_ICSIDE:  [BLK_DEV_IDEDMA_ICS];
BLK_DEV_SR:  [BLK_DEV_SR_VENDOR];
SCSI_Transports:  [SCSI_SPI_ATTRS] [SCSI_FC_ATTRS] [SCSI_ISCSI_ATTRS] [SCSI_SAS_ATTRS] [SCSI_SAS_LIBSAS] [SCSI_SRP_ATTRS];
SCSI_LOWLEVEL:  [ISCSI_TCP] [SCSI_CXGB3_ISCSI] [SCSI_BNX2_ISCSI] [BE2ISCSI] [SGIWD93_SCSI] [BLK_DEV_3W_XXXX_RAID] [SCSI_3W_9XXX] [SCSI_7000FASST] [SCSI_ACARD] [SCSI_AHA152X] [SCSI_AHA1542] [SCSI_AHA1740] [SCSI_AACRAID] [SCSI_AIC7XXX] [SCSI_AIC7XXX_OLD] [SCSI_AIC79XX] [SCSI_AIC94XX] [SCSI_MVSAS] [SCSI_DPT_I2O] [SCSI_ADVANSYS] [SCSI_IN2000] [SCSI_ARCMSR] [MEGARAID_NEWGEN] [MEGARAID_LEGACY] [MEGARAID_SAS] [SCSI_MPT2SAS] [SCSI_HPTIOP] [SCSI_BUSLOGIC] [LIBFC] [LIBFCOE] [FCOE] [FCOE_FNIC] [SCSI_DMX3191D] [SCSI_DTC3280] [SCSI_EATA] [SCSI_EATA_PIO] [SCSI_FUTURE_DOMAIN] [SCSI_FD_MCS] [SCSI_GDTH] [SCSI_GENERIC_NCR5380] [SCSI_GENERIC_NCR5380_MMIO] [SCSI_GENERIC_NCR53C400] [SCSI_IBMMCA] [SCSI_IPS] [SCSI_IBMVSCSI] [SCSI_IBMVSCSIS] [SCSI_IBMVFC] [SCSI_INITIO] [SCSI_INIA100] [SCSI_PPA] [SCSI_IMM] [SCSI_IZIP_EPP16] [SCSI_IZIP_SLOW_CTR] [SCSI_NCR53C406A] [SCSI_NCR_D700] [SCSI_LASI700] [SCSI_SNI_53C710] [c53C700_LE_ON_BE] [SCSI_STEX] [c53C700_BE_BUS] [SCSI_SYM53C8XX_2] [SCSI_IPR] [SCSI_ZALON] [SCSI_NCR_Q720] [SCSI_NCR53C8XX_DEFAULT_TAGS] [SCSI_NCR53C8XX_MAX_TAGS] [SCSI_NCR53C8XX_SYNC] [SCSI_NCR53C8XX_NO_DISCONNECT] [SCSI_PAS16] [SCSI_QLOGIC_FAS] [SCSI_QLOGIC_1280] [SCSI_QLOGICPTI] [SCSI_QLA_FC] [SCSI_QLA_ISCSI] [SCSI_LPFC] [SCSI_SIM710] [SCSI_SYM53C416] [SCSI_DC395x] [SCSI_DC390T] [SCSI_T128] [SCSI_U14_34F] [SCSI_ULTRASTOR] [SCSI_NSP32] [SCSI_DEBUG] [SCSI_MESH] [SCSI_MAC53C94] [SCSI_ACORNSCSI_3] [SCSI_ARXESCSI] [SCSI_CUMANA_2] [SCSI_EESOXSCSI] [SCSI_POWERTECSCSI] [SCSI_CUMANA_1] [SCSI_OAK1] [JAZZ_ESP] [A3000_SCSI] [A2091_SCSI] [GVP11_SCSI] [SCSI_A4000T] [SCSI_ZORRO7XX] [ATARI_SCSI] [MAC_SCSI] [SCSI_MAC_ESP] [MVME147_SCSI] [MVME16x_SCSI] [BVME6000_SCSI] [SUN3_SCSI] [SUN3X_ESP] [SCSI_SUNESP] [ZFCP] [SCSI_PMCRAID] [SCSI_SRP] [SCSI_BFA_FC];
SCSI_LOWLEVEL_PCMCIA:  [PCMCIA_AHA152X] [PCMCIA_FDOMAIN] [PCMCIA_NINJA_SCSI] [PCMCIA_QLOGIC] [PCMCIA_SYM53C500];
SCSI_DH:  [SCSI_DH_RDAC] [SCSI_DH_HP_SW] [SCSI_DH_EMC] [SCSI_DH_ALUA];
SCSI_OSD_INITIATOR:  [SCSI_OSD_ULD] [SCSI_OSD_DPRINT_SENSE] [SCSI_OSD_DEBUG];
ATA_SFF:  [SATA_SVW] [ATA_PIIX] [SATA_MV] [SATA_NV] [PDC_ADMA] [SATA_QSTOR] [SATA_PROMISE] [SATA_SX4] [SATA_SIL] [SATA_SIS] [SATA_ULI] [SATA_VIA] [SATA_VITESSE] [SATA_INIC162X] [PATA_ACPI] [PATA_ALI] [PATA_AMD] [PATA_ARTOP] [PATA_ATP867X] [PATA_AT32] [PATA_ATIIXP] [PATA_CMD640_PCI] [PATA_CMD64X] [PATA_CS5520] [PATA_CS5530] [PATA_CS5535] [PATA_CS5536] [PATA_CYPRESS] [PATA_EFAR] [ATA_GENERIC] [PATA_HPT366] [PATA_HPT37X] [PATA_HPT3X2N] [PATA_HPT3X3] [PATA_ISAPNP] [PATA_IT821X] [PATA_IT8213] [PATA_JMICRON] [PATA_LEGACY] [PATA_TRIFLEX] [PATA_MARVELL] [PATA_MPC52xx] [PATA_MPIIX] [PATA_OLDPIIX] [PATA_NETCELL] [PATA_NINJA32] [PATA_NS87410] [PATA_NS87415] [PATA_OPTI] [PATA_OPTIDMA] [PATA_PALMLD] [PATA_PCMCIA] [PATA_PDC_OLD] [PATA_QDI] [PATA_RADISYS] [PATA_RB532] [PATA_RDC] [PATA_RZ1000] [PATA_SC1200] [PATA_SERVERWORKS] [PATA_PDC2027X] [PATA_SIL680] [PATA_SIS] [PATA_VIA] [PATA_WINBOND] [PATA_WINBOND_VLB] [HAVE_PATA_PLATFORM] [PATA_PLATFORM] [PATA_AT91] [PATA_OF_PLATFORM] [PATA_ICSIDE] [PATA_IXP4XX_CF] [PATA_OCTEON_CF] [PATA_SCC] [PATA_SCH] [PATA_BF54X];
BLK_DEV_MD:  [MD_AUTODETECT] [MD_LINEAR] [MD_RAID0] [MD_RAID1] [MD_RAID10] [MD_RAID456];
BLK_DEV_DM:  [DM_DEBUG] [DM_CRYPT] [DM_SNAPSHOT] [DM_MIRROR] [DM_ZERO] [DM_MULTIPATH] [DM_DELAY] [DM_UEVENT];
FIREWIRE:  [FIREWIRE_OHCI] [FIREWIRE_SBP2] [FIREWIRE_NET];
IEEE1394:  [IEEE1394_OHCI1394] [IEEE1394_PCILYNX] [IEEE1394_SBP2] [IEEE1394_ETH1394_ROM_ENTRY] [IEEE1394_ETH1394] [IEEE1394_RAWIO] [IEEE1394_VIDEO1394] [IEEE1394_DV1394] [IEEE1394_VERBOSEDEBUG];
I2O_EXT_ADAPTEC:  [I2O_EXT_ADAPTEC_DMA64];
I2O_CONFIG:  [I2O_CONFIG_OLD_IOCTL];
ADB:  [ADB_MACII] [ADB_MACIISI] [ADB_IOP] [ADB_PMU68K];
ADB_PMU:  [ADB_PMU_LED];
PMAC_BACKLIGHT:  [PMAC_BACKLIGHT_LEGACY];
WINDFARM:  [WINDFARM_PM81] [WINDFARM_PM91] [WINDFARM_PM112] [WINDFARM_PM121];
ARCNET:  [ARCNET_1201] [ARCNET_1051] [ARCNET_RAW] [ARCNET_CAP] [ARCNET_COM90xx] [ARCNET_COM90xxIO] [ARCNET_RIM_I] [ARCNET_COM20020];
PHYLIB:  [MARVELL_PHY] [DAVICOM_PHY] [QSEMI_PHY] [LXT_PHY] [CICADA_PHY] [VITESSE_PHY] [SMSC_PHY] [BROADCOM_PHY] [BCM63XX_PHY] [ICPLUS_PHY] [REALTEK_PHY] [NATIONAL_PHY] [STE10XP] [LSI_ET1011C_PHY] [FIXED_PHY] [MDIO_BITBANG];
NET_ETHERNET:  [MII] [MACB] [ARM_AM79C961A] [ARM_ETHER1] [ARM_ETHER3] [ARM_ETHERH] [ARM_AT91_ETHER] [ARM_KS8695_ETHER] [EP93XX_ETH] [IXP4XX_ETH] [W90P910_ETH] [AX88796] [MACE] [BMAC] [ARIADNE] [A2065] [HYDRA] [ZORRO8390] [APNE] [MAC8390] [MAC89x0] [MACSONIC] [MACMACE] [MVME147_NET] [MVME16x_NET] [BVME6000_NET] [ATARILANCE] [SUN3LANCE] [SUN3_82586] [HPLANCE] [LASI_82596] [SNI_82596] [KORINA] [MIPS_JAZZ_SONIC] [XTENSA_XT2000_SONIC] [MIPS_AU1X00_ENET] [SGI_IOC3_ETH] [MIPS_SIM_NET] [SGI_O2MACE_ETH] [STNIC] [SH_ETH] [SUNLANCE] [HAPPYMEAL] [SUNBMAC] [SUNQE] [SUNGEM] [CASSINI] [SUNVNET] [NET_VENDOR_3COM] [LANCE] [NET_VENDOR_SMC] [BFIN_MAC] [SMC9194] [SMC91X] [NET_NETX] [TI_DAVINCI_EMAC] [DM9000] [ENC28J60] [ETHOC] [SMC911X] [SMSC911X] [NET_VENDOR_RACAL] [DNET] [NET_TULIP] [AT1700] [DEPCA] [HP100] [NET_ISA] [NE2000] [ZNET] [SEEQ8005] [NE2_MCA] [IBMLANA] [IBMVETH] [IBM_NEW_EMAC] [IBM_NEW_EMAC_ZMII] [IBM_NEW_EMAC_RGMII] [IBM_NEW_EMAC_TAH] [IBM_NEW_EMAC_EMAC4] [IBM_NEW_EMAC_NO_FLOW_CTRL] [IBM_NEW_EMAC_MAL_CLR_ICINTSTAT] [IBM_NEW_EMAC_MAL_COMMON_ERR] [NET_PCI] [B44] [FORCEDETH] [CS89x0] [TC35815] [E100] [LNE390] [FEALNX] [NATSEMI] [NE2K_PCI] [NE3210] [ES3210] [c8139CP] [c8139TOO] [R6040] [SIS900] [EPIC100] [SMSC9420] [SUNDANCE] [TLAN] [KS8842] [KS8851] [KS8851_MLL] [VIA_RHINE] [SC92031] [CPMAC] [NET_POCKET] [SGISEEQ] [DECLANCE] [c68360_ENET] [FEC] [FEC_MPC52xx] [NE_H8300] [ATL2] [XILINX_EMACLITE] [BCM63XX_ENET] [FS_ENET];
NETDEV_1000:  [ACENIC] [DL2K] [E1000] [E1000E] [IP1000] [IGB] [IGBVF] [ENP2611_MSF_NET] [MYRI_SBUS] [NS83820] [HAMACHI] [YELLOWFIN] [R8169] [SB1250_MAC] [SIS190] [SKGE] [SKY2] [VIA_VELOCITY] [TIGON3] [BNX2] [CNIC] [SPIDER_NET] [TSI108_ETH] [GELIC_NET] [FSL_PQ_MDIO] [GIANFAR] [UCC_GETH] [MV643XX_ETH] [XILINX_LL_TEMAC] [QLA3XXX] [ATL1] [ATL1E] [ATL1C] [JME] [S6GMAC] [STMMAC_ETH];
NETDEV_10000:  [MDIO] [CHELSIO_T1] [CHELSIO_T3_DEPENDS] [CHELSIO_T3] [EHEA] [ENIC] [IXGBE] [IXGB] [S2IO] [VXGE] [MYRI10GE] [NETXEN_NIC] [NIU] [PASEMI_MAC] [MLX4_EN] [MLX4_CORE] [MLX4_DEBUG] [TEHUTI] [BNX2X] [QLGE] [SFC] [BE2NET];
TR:  [IBMTR] [IBMOL] [IBMLS] [c3C359] [TMS380TR] [SMCTR];
WLAN:  [WLAN_PRE80211] [WLAN_80211];
WiMAX_Wireless_Broadband_devices:  [WIMAX_I2400M] [WIMAX_I2400M_USB] [WIMAX_I2400M_SDIO] [WIMAX_I2400M_DEBUG_LEVEL];
USB_Network_Adapters:  [USB_CATC] [USB_KAWETH] [USB_PEGASUS] [USB_RTL8150] [USB_USBNET] [USB_HSO] [USB_NET_INT51X1] [USB_CDC_PHONET];
NET_PCMCIA:  [PCMCIA_3C589] [PCMCIA_3C574] [PCMCIA_FMVJ18X] [PCMCIA_PCNET] [PCMCIA_NMCLAN] [PCMCIA_SMC91C92] [PCMCIA_XIRC2PS] [PCMCIA_AXNET] [ARCNET_COM20020_CS] [PCMCIA_IBMTR];
WAN:  [HOSTESS_SV11] [COSA] [LANMEDIA] [SEALEVEL_4021] [HDLC] [DLCI] [WAN_ROUTER_DRIVERS] [LAPBETHER] [X25_ASY] [SBNI];
ATM_DRIVERS:  [ATM_DUMMY] [ATM_TCP] [ATM_LANAI] [ATM_ENI] [ATM_FIRESTREAM] [ATM_ZATM] [ATM_NICSTAR] [ATM_IDT77252] [ATM_AMBASSADOR] [ATM_HORIZON] [ATM_IA] [ATM_FORE200E] [ATM_HE] [ATM_SOLOS];
IEEE802154_DRIVERS:  [IEEE802154_FAKEHARD];
S_390_network_device_drivers:  [LCS] [CTCM] [NETIUCV] [SMSGIUCV] [CLAW] [QETH] [QETH_IPV6] [CCWGROUP];
RIONET:  [RIONET_TX_SIZE] [RIONET_RX_SIZE];
FDDI:  [DEFXX] [SKFP];
HIPPI:  [ROADRUNNER];
PPP:  [PPP_MULTILINK] [PPP_FILTER] [PPP_ASYNC] [PPP_SYNC_TTY] [PPP_DEFLATE] [PPP_BSDCOMP] [PPP_MPPE] [PPPOE] [PPPOATM] [PPPOL2TP];
SLIP:  [SLIP_COMPRESSED];
NETCONSOLE:  [NETCONSOLE_DYNAMIC];
MISDN:  [MISDN_DSP] [MISDN_L1OIP] [MISDN_HFCPCI] [MISDN_HFCMULTI] [MISDN_HFCUSB] [MISDN_AVMFRITZ] [MISDN_SPEEDFAX] [MISDN_INFINEON] [MISDN_W6692] [MISDN_NETJET] [MISDN_IPAC] [MISDN_ISAR];
ISDN_PPP:  [ISDN_PPP_VJ] [ISDN_MPP] [IPPP_FILTER] [ISDN_PPP_BSDCOMP];
ISDN_AUDIO:  [ISDN_TTY_FAX];
ISDN_feature_submodules:  [ISDN_DRV_LOOP] [ISDN_DIVERSION];
Passive_cards:  [ISDN_DRV_HISAX];
Active_cards:  [ISDN_DRV_ICN] [ISDN_DRV_PCBIT] [ISDN_DRV_SC] [ISDN_DRV_ACT2000] [HYSDN];
ISDN_CAPI:  [ISDN_DRV_AVMB1_VERBOSE_REASON] [CAPI_TRACE] [ISDN_CAPI_MIDDLEWARE] [ISDN_CAPI_CAPI20] [ISDN_CAPI_CAPIDRV] [CAPI_AVM] [CAPI_EICON];
ISDN_DRV_GIGASET:  [GIGASET_BASE] [GIGASET_M105] [GIGASET_M101] [GIGASET_DEBUG];
PHONE_IXJ:  [PHONE_IXJ_PCMCIA];
INPUT:  [INPUT_FF_MEMLESS] [INPUT_POLLDEV] [INPUT_MOUSEDEV] [INPUT_JOYDEV] [INPUT_EVDEV] [INPUT_EVBUG] [INPUT_APMPOWER] [XEN_KBDDEV_FRONTEND] [INPUT_KEYBOARD] [INPUT_MOUSE] [INPUT_JOYSTICK] [INPUT_TABLET] [INPUT_TOUCHSCREEN] [INPUT_MISC];
Hardware_I_O_ports:  [SERIO] [GAMEPORT];
VT:  [CONSOLE_TRANSLATIONS] [VT_CONSOLE] [HW_CONSOLE] [VT_HW_CONSOLE_BINDING];
BFIN_JTAG_COMM:  [BFIN_JTAG_COMM_CONSOLE];
SERIAL_NONSTANDARD:  [COMPUTONE] [ROCKETPORT] [CYCLADES] [DIGIEPCA] [ESPSERIAL] [MOXA_INTELLIO] [MOXA_SMARTIO] [ISI] [SYNCLINK] [SYNCLINKMP] [SYNCLINK_GT] [N_HDLC] [RISCOM8] [SPECIALIX] [SX] [RIO] [STALDRV];
SGI_TIOCX:  [SGI_MBCS];
Serial_drivers:  [SERIAL_8250] [FIX_EARLYCON_MEM] [SERIAL_8250_GSC] [SERIAL_8250_PCI] [SERIAL_8250_PNP] [SERIAL_8250_HP300] [SERIAL_8250_CS] [SERIAL_8250_NR_UARTS] [SERIAL_8250_RUNTIME_UARTS] [SERIAL_8250_EXTENDED] [SERIAL_8250_MCA] [SERIAL_8250_ACORN] [SERIAL_8250_AU1X00] [SERIAL_8250_RM9K] [SERIAL_AMBA_PL010] [SERIAL_AMBA_PL011] [SERIAL_SB1250_DUART] [SERIAL_ATMEL] [SERIAL_KS8695] [SERIAL_CLPS711X] [SERIAL_SAMSUNG] [SERIAL_SAMSUNG_UARTS] [SERIAL_SAMSUNG_DEBUG] [SERIAL_SAMSUNG_CONSOLE] [SERIAL_S3C2400] [SERIAL_S3C2410] [SERIAL_S3C2412] [SERIAL_S3C2440] [SERIAL_S3C24A0] [SERIAL_S3C6400] [SERIAL_S5PC100] [SERIAL_MAX3100] [SERIAL_DZ] [SERIAL_ZS] [SERIAL_21285] [SERIAL_MPSC] [SERIAL_PXA] [SERIAL_SA1100] [SERIAL_BFIN] [SERIAL_IMX] [SERIAL_UARTLITE] [SERIAL_SUNCORE] [SERIAL_SUNZILOG] [SERIAL_SUNSU] [SERIAL_MUX] [PDC_CONSOLE] [SERIAL_SUNSAB] [SERIAL_SUNHV] [SERIAL_IP22_ZILOG] [SERIAL_SH_SCI] [SERIAL_PNX8XXX] [SERIAL_CORE] [SERIAL_CORE_CONSOLE] [CONSOLE_POLL] [SERIAL_68328] [SERIAL_MCF] [SERIAL_68360_SMC] [SERIAL_68360_SCC] [SERIAL_68360] [SERIAL_PMACZILOG] [SERIAL_LH7A40X] [SERIAL_CPM] [SERIAL_SGI_L1_CONSOLE] [SERIAL_MPC52xx] [SERIAL_ICOM] [SERIAL_M32R_SIO] [SERIAL_TXX9] [HAS_TXX9_SERIAL] [SERIAL_TXX9_NR_UARTS] [SERIAL_TXX9_CONSOLE] [SERIAL_TXX9_STDSERIAL] [SERIAL_VR41XX] [SERIAL_JSM] [SERIAL_SGI_IOC4] [SERIAL_SGI_IOC3] [SERIAL_MSM] [SERIAL_NETX] [SERIAL_OF_PLATFORM] [SERIAL_OF_PLATFORM_NWPSERIAL] [SERIAL_QE] [SERIAL_SC26XX] [SERIAL_BFIN_SPORT] [SERIAL_TIMBERDALE] [SERIAL_BCM63XX];
UNIX98_PTYS:  [DEVPTS_MULTIPLE_INSTANCES];
LEGACY_PTYS:  [LEGACY_PTY_COUNT];
BFIN_OTP:  [BFIN_OTP_WRITE_ENABLE];
PRINTER:  [LP_CONSOLE];
IPMI_HANDLER:  [IPMI_PANIC_EVENT] [IPMI_DEVICE_INTERFACE] [IPMI_SI] [IPMI_WATCHDOG] [IPMI_POWEROFF];
NWBUTTON:  [NWBUTTON_REBOOT];
HW_RANDOM:  [HW_RANDOM_TIMERIOMEM] [HW_RANDOM_INTEL] [HW_RANDOM_AMD] [HW_RANDOM_GEODE] [HW_RANDOM_N2RNG] [HW_RANDOM_VIA] [HW_RANDOM_IXP4XX] [HW_RANDOM_OMAP] [HW_RANDOM_OCTEON] [HW_RANDOM_PASEMI] [HW_RANDOM_VIRTIO] [HW_RANDOM_TX4939] [HW_RANDOM_MXC_RNGA];
GEN_RTC:  [GEN_RTC_X];
PCMCIA_character_devices:  [SYNCLINK_CS] [CARDMAN_4000] [CARDMAN_4040] [IPWIRELESS];
RAW_DRIVER:  [MAX_RAW_DEVS];
HPET:  [HPET_MMAP];
TCG_TPM:  [TCG_TIS] [TCG_NSC] [TCG_ATMEL] [TCG_INFINEON];
TN3270:  [TN3270_TTY] [TN3270_FS] [TN3270_CONSOLE];
TN3215:  [TN3215_CONSOLE];
SCLP_TTY:  [SCLP_CONSOLE];
SCLP_VT220_TTY:  [SCLP_VT220_CONSOLE];
S390_TAPE:  [S390_TAPE_BLOCK] [S390_TAPE_34XX] [S390_TAPE_3590];
I2C_HELPER_AUTO:  I2C_Algorithms;
I2C_Hardware_Bus_support:  [I2C_ALI1535] [I2C_ALI1563] [I2C_ALI15X3] [I2C_AMD756] [I2C_AMD8111] [I2C_I801] [I2C_ISCH] [I2C_PIIX4] [I2C_NFORCE2] [I2C_SIS5595] [I2C_SIS630] [I2C_SIS96X] [I2C_VIA] [I2C_VIAPRO] [I2C_SCMI] [I2C_HYDRA] [I2C_POWERMAC] [I2C_AT91] [I2C_AU1550] [I2C_BLACKFIN_TWI] [I2C_CPM] [I2C_DAVINCI] [I2C_DESIGNWARE] [I2C_GPIO] [I2C_HIGHLANDER] [I2C_IBM_IIC] [I2C_IMX] [I2C_IOP3XX] [I2C_IXP2000] [I2C_MPC] [I2C_MV64XXX] [I2C_OCORES] [I2C_OMAP] [I2C_PASEMI] [I2C_PNX] [I2C_PXA] [I2C_S3C2410] [I2C_S6000] [I2C_SH7760] [I2C_SH_MOBILE] [I2C_SIMTEC] [I2C_STU300] [I2C_VERSATILE] [I2C_PARPORT] [I2C_PARPORT_LIGHT] [I2C_TAOS_EVM] [I2C_TINY_USB] [I2C_VOODOO3] [I2C_ACORN] [I2C_ELEKTOR] [I2C_PCA_ISA] [I2C_PCA_PLATFORM] [I2C_PMCMSP] [I2C_SIBYTE] [I2C_STUB] [SCx200_I2C] [SCx200_ACB];
Miscellaneous_I2C_Chip_support:  [DS1682] [SENSORS_TSL2550];
PPS:  [PPS_DEBUG];
c1_wire_Bus_Masters:  [W1_MASTER_MATROX] [W1_MASTER_DS2490] [W1_MASTER_DS2482] [W1_MASTER_MXC] [W1_MASTER_DS1WM] [W1_MASTER_GPIO] [HDQ_MASTER_OMAP];
c1_wire_Slaves:  [W1_SLAVE_THERM] [W1_SLAVE_SMEM] [W1_SLAVE_DS2431] [W1_SLAVE_DS2433] [W1_SLAVE_DS2760] [W1_SLAVE_BQ27000];
SENSORS_AMS:  [SENSORS_AMS_PMU] [SENSORS_AMS_I2C];
SENSORS_S3C:  [SENSORS_S3C_RAW];
ITCO_WDT:  [ITCO_VENDOR_SUPPORT];
SH_WDT:  [SH_WDT_MMAP];
SSB_PCIHOST:  [SSB_B43_PCI_BRIDGE];
SSB_DRIVER_PCICORE:  [SSB_PCICORE_HOSTMODE];
SSB_DRIVER_MIPS:  [SSB_EMBEDDED] [SSB_DRIVER_EXTIF];
MFD_SM501:  [MFD_SM501_GPIO];
TWL4030_CORE:  [TWL4030_POWER];
AB3100_CORE:  [AB3100_OTP];
MCP_UCB1200:  [MCP_UCB1200_TS];
VIDEO_DEV:  [VIDEO_V4L2_COMMON] [VIDEO_ALLOW_V4L1] [VIDEO_V4L1_COMPAT];
MEDIA_TUNER_CUSTOMISE:  [MEDIA_TUNER_SIMPLE] [MEDIA_TUNER_TDA8290] [MEDIA_TUNER_TDA827X] [MEDIA_TUNER_TDA18271] [MEDIA_TUNER_TDA9887] [MEDIA_TUNER_TEA5761] [MEDIA_TUNER_TEA5767] [MEDIA_TUNER_MT20XX] [MEDIA_TUNER_MT2060] [MEDIA_TUNER_MT2266] [MEDIA_TUNER_MT2131] [MEDIA_TUNER_QT1010] [MEDIA_TUNER_XC2028] [MEDIA_TUNER_XC5000] [MEDIA_TUNER_MXL5005S] [MEDIA_TUNER_MXL5007T] [MEDIA_TUNER_MC44S803];
VIDEO_CAPTURE_DRIVERS:  [VIDEO_ADV_DEBUG] [VIDEO_FIXED_MINOR_RANGES] [VIDEO_HELPER_CHIPS_AUTO] [DISPLAY_DAVINCI_DM646X_EVM] [CAPTURE_DAVINCI_DM646X_EVM] [VIDEO_DAVINCI_VPIF] [VIDEO_VIVI] [VIDEO_VPSS_SYSTEM] [VIDEO_VPFE_CAPTURE] [VIDEO_BT848] [VIDEO_PMS] [VIDEO_BWQCAM] [VIDEO_CQCAM] [VIDEO_W9966] [VIDEO_CPIA] [VIDEO_CPIA2] [VIDEO_SAA5246A] [VIDEO_SAA5249] [VIDEO_VINO] [VIDEO_STRADIS] [VIDEO_ZORAN] [VIDEO_MEYE] [VIDEO_SAA7134] [VIDEO_MXB] [VIDEO_HEXIUM_ORION] [VIDEO_HEXIUM_GEMINI] [VIDEO_CX88] [VIDEO_CX88_MPEG] [VIDEO_CX88_VP3054] [VIDEO_CX23885] [VIDEO_AU0828] [VIDEO_IVTV] [VIDEO_CX18] [VIDEO_SAA7164] [VIDEO_M32R_AR] [VIDEO_M32R_AR_M64278] [VIDEO_CAFE_CCIC] [SOC_CAMERA] [MX1_VIDEO] [VIDEO_MX1] [MX3_VIDEO] [VIDEO_MX3] [VIDEO_PXA27x] [VIDEO_SH_MOBILE_CEU] [VIDEO_OMAP2] [V4L_USB_DRIVERS];
RADIO_ADAPTERS:  [RADIO_CADET] [RADIO_RTRACK] [RADIO_RTRACK2] [RADIO_AZTECH] [RADIO_GEMTEK] [RADIO_GEMTEK_PCI] [RADIO_MAXIRADIO] [RADIO_MAESTRO] [RADIO_SF16FMI] [RADIO_SF16FMR2] [RADIO_TERRATEC] [RADIO_TRUST] [RADIO_TYPHOON] [RADIO_ZOLTRIX] [I2C_SI4713] [RADIO_SI4713] [USB_DSBR] [RADIO_SI470X] [USB_MR800] [RADIO_TEA5764];
DVB_CAPTURE_DRIVERS:  [TTPCI_EEPROM] [DVB_AV7110] [DVB_BUDGET_CORE] [DVB_USB] [DVB_TTUSB_BUDGET] [DVB_TTUSB_DEC] [SMS_SIANO_MDTV] [DVB_B2C2_FLEXCOP] [DVB_BT8XX] [DVB_PLUTO2] [DVB_DM1105] [DVB_FIREDTV] [DVB_PT1] [DVB_FE_CUSTOMISE];
DAB:  [USB_DABUSB];
AGP:  [AGP_ALI] [AGP_ATI] [AGP_AMD] [AGP_AMD64] [AGP_INTEL] [AGP_NVIDIA] [AGP_SIS] [AGP_SWORKS] [AGP_VIA] [AGP_I460] [AGP_HP_ZX1] [AGP_PARISC] [AGP_ALPHA_CORE] [AGP_UNINORTH] [AGP_EFFICEON] [AGP_SGI_TIOCA];
DRM:  [DRM_KMS_HELPER] [DRM_TTM] [DRM_TDFX] [DRM_R128] [DRM_RADEON] [DRM_I810] opt Intel_830M__845G__852GM__855GM__865G [DRM_MGA] [DRM_SIS] [DRM_VIA] [DRM_SAVAGE];
FB:  [FIRMWARE_EDID] [FB_DDC] [FB_BOOT_VESA_SUPPORT] [FB_CFB_FILLRECT] [FB_CFB_COPYAREA] [FB_CFB_IMAGEBLIT] [FB_CFB_REV_PIXELS_IN_BYTE] [FB_SYS_FILLRECT] [FB_SYS_COPYAREA] [FB_SYS_IMAGEBLIT] [FB_FOREIGN_ENDIAN] [FB_SYS_FOPS] [FB_DEFERRED_IO] [FB_HECUBA] [FB_SVGALIB] [FB_MACMODES] [FB_BACKLIGHT] [FB_MODE_HELPERS] [FB_TILEBLITTING] [FB_CIRRUS] [FB_PM2] [FB_ARMCLCD] [FB_ACORN] [FB_CLPS711X] [FB_SA1100] [FB_IMX] [FB_CYBER2000] [FB_APOLLO] [FB_Q40] [FB_AMIGA] [FB_FM2] [FB_ARC] [FB_ATARI] [FB_OF] [FB_CONTROL] [FB_PLATINUM] [FB_VALKYRIE] [FB_CT65550] [FB_ASILIANT] [FB_IMSTT] [FB_VGA16] [FB_BF54X_LQ043] [FB_BFIN_T350MCQB] [FB_STI] [FB_MAC] [FB_HP300] [FB_TGA] [FB_UVESA] [FB_VESA] [FB_EFI] [FB_N411] [FB_HGA] [FB_SGIVW] [FB_GBE] [FB_SBUS] [FB_IGA] [FB_XVR500] [FB_XVR2500] [FB_PVR2] [FB_EPSON1355] [FB_S1D13XXX] [FB_ATMEL] [FB_NVIDIA] [FB_RIVA] [FB_I810] [FB_LE80578] [FB_INTEL] [FB_MATROX] [FB_RADEON] [FB_ATY128] [FB_ATY] [FB_S3] [FB_SAVAGE] [FB_SIS] [FB_VIA] [FB_NEOMAGIC] [FB_KYRO] [FB_3DFX] [FB_VOODOO1] [FB_VT8623] [FB_TRIDENT] [FB_ARK] [FB_PM3] [FB_CARMINE] [FB_AU1100] [FB_AU1200] [FB_GEODE] [FB_HIT] [FB_PMAG_AA] [FB_PMAG_BA] [FB_PMAGB_B] [FB_MAXINE] [FB_G364] [FB_68328] [FB_PXA168] [FB_PXA] [FB_MBX] [FB_FSL_DIU] [FB_W100] [FB_SH_MOBILE_LCDC] [FB_TMIO] [FB_S3C] [FB_S3C2410] [FB_SM501] [FB_PNX4008_DUM] [FB_IBM_GXT4500] [FB_PS3] [FB_XILINX] [FB_COBALT] [FB_SH7760] [FB_DA8XX] [FB_VIRTUAL] [XEN_FBDEV_FRONTEND] [FB_METRONOME] [FB_MB862XX] [FB_EP93XX] [FB_PRE_INIT_FB] [FB_MSM] [FB_MX3] [FB_BROADSHEET] [FB_OMAP];
Screen_resolution: [1, 1] { FB_OMAP_031M3R FB_OMAP_048M3R FB_OMAP_079M3R FB_OMAP_092M9R};
FB_OMAP_LCDC_EXTERNAL:  [FB_OMAP_LCDC_HWA742] [FB_OMAP_LCDC_BLIZZARD] [FB_OMAP_MANUAL_UPDATE];
BACKLIGHT_LCD_SUPPORT:  [LCD_CLASS_DEVICE] [BACKLIGHT_CLASS_DEVICE];
Display_device_support:  [DISPLAY_SUPPORT];
Console_display_driver_support:  [VGA_CONSOLE] [MDA_CONSOLE] [SGI_NEWPORT_CONSOLE] [DUMMY_CONSOLE] [DUMMY_CONSOLE_COLUMNS] [DUMMY_CONSOLE_ROWS] [FRAMEBUFFER_CONSOLE] [STI_CONSOLE] [FONTS] [FONT_SUN8x16] [FONT_SUN12x22] [FONT_10x18];
LOGO:  [FB_LOGO_EXTRA] [LOGO_LINUX_MONO] [LOGO_LINUX_VGA16] [LOGO_LINUX_CLUT224] [LOGO_BLACKFIN_VGA16] [LOGO_BLACKFIN_CLUT224] [LOGO_DEC_CLUT224] [LOGO_MAC_CLUT224] [LOGO_PARISC_CLUT224] [LOGO_SGI_CLUT224] [LOGO_SUN_CLUT224] [LOGO_SUPERH_MONO] [LOGO_SUPERH_VGA16] [LOGO_SUPERH_CLUT224] [LOGO_M32R_CLUT224];
SND:  [SND_TIMER] [SND_PCM] [SND_HWDEP] [SND_RAWMIDI] [SND_JACK] [SND_SEQUENCER] [SND_OSSEMUL] [SND_MIXER_OSS] [SND_PCM_OSS] [SND_SEQUENCER_OSS] [SND_HRTIMER] [SND_RTCTIMER] [SND_DYNAMIC_MINORS] [SND_SUPPORT_OLD_API] [SND_VERBOSE_PROCFS] [SND_VERBOSE_PRINTK] [SND_DEBUG] [SND_VMASTER] [SND_DMA_SGBUF] [SND_RAWMIDI_SEQ] [SND_OPL3_LIB_SEQ] [SND_OPL4_LIB_SEQ] [SND_SBAWE_SEQ] [SND_EMU10K1_SEQ] [SND_MPU401_UART] [SND_OPL3_LIB] [SND_OPL4_LIB] [SND_VX_LIB] [SND_AC97_CODEC] [SND_DRIVERS] [SND_WSS_LIB] [SND_SB_COMMON] [SND_SB8_DSP] [SND_SB16_DSP] [SND_ISA] [SND_PCI] [SND_PPC] [SND_AOA] [SND_ARM] Atmel_devices__AVR32_and_AT91_ [SND_SPI] [SND_MIPS] [SND_SUPERH] [SND_USB] [SND_PCMCIA] [SND_SPARC] [SND_GSC] [SND_SOC];
SOUND_PRIME:  [SOUND_BCM_CS4297A] [SOUND_VWSND] [SOUND_AU1550_AC97] [SOUND_MSNDCLAS] [SOUND_MSNDPIN] [MSND_FIFOSIZE] [SOUND_OSS] [SOUND_SH_DAC_AUDIO];
HID:  [HIDRAW];
USB_HID_Boot_Protocol_drivers:  [USB_KBD] [USB_MOUSE];
Special_HID_drivers:  [HID_A4TECH] [HID_APPLE] [HID_BELKIN] [HID_CHERRY] [HID_CHICONY] [HID_CYPRESS] [HID_DRAGONRISE] [HID_EZKEY] [HID_KYE] [HID_GYRATION] [HID_TWINHAN] [HID_KENSINGTON] [HID_LOGITECH] [HID_MICROSOFT] [HID_MONTEREY] [HID_NTRIG] [HID_PANTHERLORD] [HID_PETALYNX] [HID_SAMSUNG] [HID_SONY] [HID_SUNPLUS] [HID_GREENASIA] [HID_SMARTJOYPLUS] [HID_TOPSEED] [HID_THRUSTMASTER] [HID_WACOM] [HID_ZEROPLUS];
USB:  [USB_DEBUG] [USB_ANNOUNCE_NEW_DEVICES] [USB_DEVICEFS] [USB_DEVICE_CLASS] [USB_DYNAMIC_MINORS] [USB_SUSPEND] [USB_OTG] [USB_OTG_WHITELIST] [USB_OTG_BLACKLIST_HUB] [USB_MON] [USB_WUSB] [USB_WUSB_CBAF] [USB_C67X00_HCD] [USB_XHCI_HCD] [USB_EHCI_HCD] [USB_OXU210HP_HCD] [USB_ISP116X_HCD] [USB_ISP1760_HCD] [USB_ISP1362_HCD] [USB_OHCI_HCD] [USB_UHCI_HCD] [USB_FHCI_HCD] [USB_U132_HCD] [USB_SL811_HCD] [USB_R8A66597_HCD] [USB_WHCI_HCD] [USB_HWA_HCD];
USB_MUSB_HDRC:  [USB_MUSB_SOC] [USB_TUSB6010] Driver_Mode [USB_GADGET_MUSB_HDRC] [USB_MUSB_HDRC_HCD] [MUSB_PIO_ONLY] [USB_MUSB_DEBUG];
USB_STORAGE:  [USB_STORAGE_DEBUG] [USB_STORAGE_DATAFAB] [USB_STORAGE_FREECOM] [USB_STORAGE_ISD200] [USB_STORAGE_USBAT] [USB_STORAGE_SDDR09] [USB_STORAGE_SDDR55] [USB_STORAGE_JUMPSHOT] [USB_STORAGE_ALAUDA] [USB_STORAGE_ONETOUCH] [USB_STORAGE_KARMA] [USB_STORAGE_CYPRESS_ATACB];
USB_SERIAL:  [USB_SERIAL_CONSOLE] [USB_EZUSB] [USB_SERIAL_GENERIC] [USB_SERIAL_AIRCABLE] [USB_SERIAL_ARK3116] [USB_SERIAL_BELKIN] [USB_SERIAL_CH341] [USB_SERIAL_WHITEHEAT] [USB_SERIAL_DIGI_ACCELEPORT] [USB_SERIAL_CP210X] [USB_SERIAL_CYPRESS_M8] [USB_SERIAL_EMPEG] [USB_SERIAL_FTDI_SIO] [USB_SERIAL_FUNSOFT] [USB_SERIAL_VISOR] [USB_SERIAL_IPAQ] [USB_SERIAL_IR] [USB_SERIAL_EDGEPORT] [USB_SERIAL_EDGEPORT_TI] [USB_SERIAL_GARMIN] [USB_SERIAL_IPW] [USB_SERIAL_IUU] [USB_SERIAL_KEYSPAN_PDA] [USB_SERIAL_KEYSPAN] [USB_SERIAL_KLSI] [USB_SERIAL_KOBIL_SCT] [USB_SERIAL_MCT_U232] [USB_SERIAL_MOS7720] [USB_SERIAL_MOS7840] [USB_SERIAL_MOTOROLA] [USB_SERIAL_NAVMAN] [USB_SERIAL_PL2303] [USB_SERIAL_OTI6858] [USB_SERIAL_QUALCOMM] [USB_SERIAL_SPCP8X5] [USB_SERIAL_HP4X] [USB_SERIAL_SAFE] [USB_SERIAL_SIEMENS_MPI] [USB_SERIAL_SIERRAWIRELESS] [USB_SERIAL_SYMBOL] [USB_SERIAL_TI] [USB_SERIAL_CYBERJACK] [USB_SERIAL_XIRCOM] [USB_SERIAL_OPTION] [USB_SERIAL_OMNINET] [USB_SERIAL_OPTICON] [USB_SERIAL_DEBUG];
USB_SISUSBVGA:  [USB_SISUSBVGA_CON];
USB_ATM:  [USB_SPEEDTOUCH] [USB_CXACRU] [USB_UEAGLEATM] [USB_XUSBATM];
USB_GADGET:  [USB_GADGET_DEBUG] [USB_GADGET_DEBUG_FILES] [USB_GADGET_DEBUG_FS] [USB_GADGET_VBUS_DRAW] [USB_GADGET_SELECTED] USB_Peripheral_Controller [USB_GADGET_DUALSPEED] USB_Gadget_Drivers;
UWB_I1480U:  [UWB_I1480U_WLP];
MMC_BLOCK:  [MMC_BLOCK_BOUNCE];
MMC_SDHCI:  [MMC_SDHCI_IO_ACCESSORS] [MMC_SDHCI_PCI] [MMC_SDHCI_OF] [MMC_SDHCI_PLTFM] [MMC_SDHCI_S3C];
Atmel_SD_MMC_Driver: [1, 2] { MMC_AT91 MMC_ATMELMCI};
MMC_S3C:  [MMC_S3C_HW_SDIO_IRQ] Samsung_S3C_SD_MMC_transfer_code;
LEDS_GPIO:  [LEDS_GPIO_PLATFORM] [LEDS_GPIO_OF];
LEDS_TRIGGERS:  [LEDS_TRIGGER_TIMER] [LEDS_TRIGGER_IDE_DISK] [LEDS_TRIGGER_HEARTBEAT] [LEDS_TRIGGER_BACKLIGHT] [LEDS_TRIGGER_GPIO] [LEDS_TRIGGER_DEFAULT_ON];
INFINIBAND_USER_ACCESS:  [INFINIBAND_USER_MEM];
INFINIBAND_MTHCA:  [INFINIBAND_MTHCA_DEBUG];
INFINIBAND_AMSO1100:  [INFINIBAND_AMSO1100_DEBUG];
INFINIBAND_CXGB3:  [INFINIBAND_CXGB3_DEBUG];
INFINIBAND_NES:  [INFINIBAND_NES_DEBUG];
INFINIBAND_IPOIB:  [INFINIBAND_IPOIB_CM] [INFINIBAND_IPOIB_DEBUG];
EDAC_DEBUG:  [EDAC_DEBUG_VERBOSE];
EDAC_MM_EDAC:  [EDAC_AMD64] [EDAC_AMD76X] [EDAC_E7XXX] [EDAC_E752X] [EDAC_I82443BXGX] [EDAC_I82875P] [EDAC_I82975X] [EDAC_I3000] [EDAC_I3200] [EDAC_X38] [EDAC_I5400] [EDAC_I82860] [EDAC_R82600] [EDAC_I5000] [EDAC_I5100] [EDAC_MPC85XX] [EDAC_MV64X60] [EDAC_PASEMI] [EDAC_CELL] [EDAC_PPC4XX] [EDAC_AMD8131] [EDAC_AMD8111] [EDAC_CPC925];
RTC_HCTOSYS:  [RTC_HCTOSYS_DEVICE];
RTC_INTF_DEV:  [RTC_INTF_DEV_UIE_EMUL];
RTC_DRV_M41T80:  [RTC_DRV_M41T80_WDT];
RTC_DRV_AT91SAM9:  [RTC_DRV_AT91SAM9_RTT] [RTC_DRV_AT91SAM9_GPBR];
MX3_IPU:  [MX3_IPU_IRQS];
KS0108:  [KS0108_PORT] [KS0108_DELAY] [CFAG12864B];
VLYNQ:  [VLYNQ_DEBUG];
STAGING_EXCLUDE_BUILD:  [ET131X] [SLICOSS] [VIDEO_GO7007] [VIDEO_CX25821] [USB_IP_COMMON] [W35UND] [PRISM2_USB] [ECHO] [POCH] [OTUS] [RT2860] [RT2870] [RT3090] [COMEDI] [ASUS_OLED] [PANEL] [ALTERA_PCIE_CHDMA] [RTL8187SE] [RTL8192SU] [RTL8192E] [INPUT_MIMIO] [TRANZPORT] Android [MSM_SMD] [MSM_CAMERA] [MT9T013] [MT9D112] [MT9P012] [S5K3E2FX] [INPUT_GPIO] [DST] [POHMELFS] [B3DFG] [IDE_PHISON] [PLAN9AUTH] [LINE6_USB] [DRM_RADEON_KMS] [OCTEON_ETHERNET] [USB_SERIAL_QUATECH2] [USB_SERIAL_QUATECH_USB2] [VT6655] [VT6656] [FB_UDL] [HYPERV] [VME_BUS] RAR_Register_Driver [DX_SEP] [IIO];
FUJITSU_LAPTOP:  [FUJITSU_LAPTOP_DEBUG];
SONY_LAPTOP:  [SONYPI_COMPAT];
THINKPAD_ACPI:  [THINKPAD_ACPI_DEBUGFACILITIES] [THINKPAD_ACPI_DEBUG] [THINKPAD_ACPI_UNSAFE_LEDS] [THINKPAD_ACPI_VIDEO] [THINKPAD_ACPI_HOTKEY_POLL];
EXT2_FS_XATTR:  [EXT2_FS_POSIX_ACL] [EXT2_FS_SECURITY];
EXT3_FS_XATTR:  [EXT3_FS_POSIX_ACL] [EXT3_FS_SECURITY];
EXT4_FS_XATTR:  [EXT4_FS_POSIX_ACL] [EXT4_FS_SECURITY];
REISERFS_FS_XATTR:  [REISERFS_FS_POSIX_ACL] [REISERFS_FS_SECURITY];
FSCACHE:  [FSCACHE_STATS] [FSCACHE_HISTOGRAM] [FSCACHE_DEBUG] [FSCACHE_OBJECT_LIST] [CACHEFILES];
ISO9660_FS:  [JOLIET] [ZISOFS];
UDF_FS:  [UDF_NLS];
VFAT_FS:  [FAT_DEFAULT_CODEPAGE] [FAT_DEFAULT_IOCHARSET];
NTFS_FS:  [NTFS_DEBUG] [NTFS_RW];
PROC_FS:  [PROC_KCORE] [PROC_VMCORE] [PROC_SYSCTL] [PROC_PAGE_MONITOR];
TMPFS:  [TMPFS_POSIX_ACL];
ADFS_FS:  [ADFS_FS_RW];
BEFS_FS:  [BEFS_DEBUG];
JFFS2_FS:  [JFFS2_FS_DEBUG] [JFFS2_FS_WRITEBUFFER] [JFFS2_SUMMARY] [JFFS2_FS_XATTR] [JFFS2_COMPRESSION_OPTIONS];
UBIFS_FS:  [UBIFS_FS_XATTR] [UBIFS_FS_ADVANCED_COMPR] [UBIFS_FS_DEBUG];
SQUASHFS:  [SQUASHFS_EMBEDDED];
ROMFS_FS:  RomFS_backing_stores;
UFS_FS:  [UFS_FS_WRITE] [UFS_DEBUG];
EXOFS_FS:  [EXOFS_DEBUG];
NFS_FS:  [NFS_V3] [NFS_V4] [ROOT_NFS];
NFSD:  [NFSD_V2_ACL] [NFSD_V3] [NFSD_V4];
SMB_FS:  [SMB_NLS_DEFAULT];
CIFS:  [CIFS_STATS] [CIFS_WEAK_PW_HASH] [CIFS_UPCALL] [CIFS_XATTR] [CIFS_DEBUG2] [CIFS_DFS_UPCALL] [CIFS_EXPERIMENTAL];
NCP_FS:  [NCPFS_PACKET_SIGNING] [NCPFS_IOCTL_LOCKING] [NCPFS_STRONG] [NCPFS_NFS_NS] [NCPFS_OS2_NS] [NCPFS_SMALLDOS] [NCPFS_NLS] [NCPFS_EXTRAS];
AFS_FS:  [AFS_DEBUG];
PARTITION_ADVANCED:  [ACORN_PARTITION] [OSF_PARTITION] [AMIGA_PARTITION] [ATARI_PARTITION] [IBM_PARTITION] [MAC_PARTITION] [MSDOS_PARTITION] [LDM_PARTITION] [SGI_PARTITION] [ULTRIX_PARTITION] [SUN_PARTITION] [KARMA_PARTITION] [EFI_PARTITION] [SYSV68_PARTITION];
DETECT_SOFTLOCKUP:  [BOOTPARAM_SOFTLOCKUP_PANIC] [BOOTPARAM_SOFTLOCKUP_PANIC_VALUE];
DETECT_HUNG_TASK:  [BOOTPARAM_HUNG_TASK_PANIC] [BOOTPARAM_HUNG_TASK_PANIC_VALUE];
DEBUG_OBJECTS:  [DEBUG_OBJECTS_SELFTEST] [DEBUG_OBJECTS_FREE] [DEBUG_OBJECTS_TIMERS] [DEBUG_OBJECTS_ENABLE_DEFAULT];
DEBUG_SLAB:  [DEBUG_SLAB_LEAK];
FAULT_INJECTION_DEBUG_FS:  [FAULT_INJECTION_STACKTRACE_FILTER];
FUNCTION_TRACER:  [FUNCTION_GRAPH_TRACER];
Branch_Profiling: [1, 1] { BRANCH_PROFILE_NONE PROFILE_ANNOTATED_BRANCHES PROFILE_ALL_BRANCHES};
FTRACE_STARTUP_TEST:  [EVENT_TRACE_TEST_SYSCALLS];
MMIOTRACE:  [MMIOTRACE_TEST];
SAMPLE_KPROBES:  [SAMPLE_KRETPROBES];
KGDB_TESTS:  [KGDB_TESTS_ON_BOOT];
kmemcheck__default_mode_at_boot: [1, 1] { KMEMCHECK_DISABLED_BY_DEFAULT KMEMCHECK_ENABLED_BY_DEFAULT KMEMCHECK_ONESHOT_BY_DEFAULT};
SECURITY_SELINUX_BOOTPARAM:  [SECURITY_SELINUX_BOOTPARAM_VALUE];
SECURITY_SELINUX_POLICYDB_VERSION_MAX:  [SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE];
CRYPTO_DEV_PADLOCK:  [CRYPTO_DEV_PADLOCK_AES] [CRYPTO_DEV_PADLOCK_SHA];
ZCRYPT:  [ZCRYPT_MONOLITHIC];
CRYPTO_DEV_HIFN_795X:  [CRYPTO_DEV_HIFN_795X_RNG];
CGROUP_MEM_RES_CTLR:  [CGROUP_MEM_RES_CTLR_SWAP];
CPU_FREQ_STAT:  [CPU_FREQ_STAT_DETAILS];
Default_CPUFreq_governor: [1, 1] { CPU_FREQ_DEFAULT_GOV_PERFORMANCE CPU_FREQ_DEFAULT_GOV_POWERSAVE CPU_FREQ_DEFAULT_GOV_USERSPACE CPU_FREQ_DEFAULT_GOV_ONDEMAND CPU_FREQ_DEFAULT_GOV_CONSERVATIVE};
X86_POWERNOW_K7:  [X86_POWERNOW_K7_ACPI];
X86_SPEEDSTEP_CENTRINO:  [X86_SPEEDSTEP_CENTRINO_TABLE];
YENTA_TI:  [YENTA_ENE_TUNE];
IP_ADVANCED_ROUTER:  Choose_IP__FIB_lookup_algorithm__choose_FIB_HASH_if_unsure_;
IP_PNP:  [IP_PNP_DHCP] [IP_PNP_BOOTP] [IP_PNP_RARP];
NET_IPGRE:  [NET_IPGRE_BROADCAST];
IP_MROUTE:  [IP_PIMSM_V1] [IP_PIMSM_V2];
INET_DIAG:  [INET_TCP_DIAG];
TCP_CONG_ADVANCED:  [TCP_CONG_BIC] [TCP_CONG_CUBIC] [TCP_CONG_WESTWOOD] [TCP_CONG_HTCP] [TCP_CONG_HSTCP] [TCP_CONG_HYBLA] [TCP_CONG_VEGAS] [TCP_CONG_SCALABLE] [TCP_CONG_LP] [TCP_CONG_VENO] [TCP_CONG_YEAH] [TCP_CONG_ILLINOIS] Default_TCP_congestion_control    ;
IPV6:  [IPV6_PRIVACY] [IPV6_ROUTER_PREF] [IPV6_OPTIMISTIC_DAD] [INET6_AH] [INET6_ESP] [INET6_IPCOMP] [IPV6_MIP6] [INET6_XFRM_TUNNEL] [INET6_TUNNEL] [INET6_XFRM_MODE_TRANSPORT] [INET6_XFRM_MODE_TUNNEL] [INET6_XFRM_MODE_BEET] [INET6_XFRM_MODE_ROUTEOPTIMIZATION] [IPV6_SIT] [IPV6_NDISC_NODETYPE] [IPV6_TUNNEL] [IPV6_MULTIPLE_TABLES] [IPV6_MROUTE];
NETFILTER_ADVANCED:  [BRIDGE_NETFILTER];
Core_Netfilter_Configuration:  [NETFILTER_NETLINK] [NETFILTER_NETLINK_QUEUE] [NETFILTER_NETLINK_LOG] [NF_CONNTRACK] [NETFILTER_TPROXY] [NETFILTER_XTABLES];
IP_VS:  [IP_VS_IPV6] [IP_VS_DEBUG] [IP_VS_TAB_BITS] [IP_VS_PROTO_TCP] [IP_VS_PROTO_UDP] [IP_VS_PROTO_AH_ESP] [IP_VS_PROTO_ESP] [IP_VS_PROTO_AH] [IP_VS_RR] [IP_VS_WRR] [IP_VS_LC] [IP_VS_WLC] [IP_VS_LBLC] [IP_VS_LBLCR] [IP_VS_DH] [IP_VS_SH] [IP_VS_SED] [IP_VS_NQ] [IP_VS_FTP];
IP__Netfilter_Configuration:  [NF_DEFRAG_IPV4] [NF_CONNTRACK_IPV4] [IP_NF_QUEUE] [IP_NF_IPTABLES] [IP_NF_ARPTABLES];
IPv6__Netfilter_Configuration:  [NF_CONNTRACK_IPV6] [IP6_NF_QUEUE] [IP6_NF_IPTABLES];
DECnet__Netfilter_Configuration:  [DECNET_NF_GRABULATOR];
BRIDGE_NF_EBTABLES:  [BRIDGE_EBT_BROUTE] [BRIDGE_EBT_T_FILTER] [BRIDGE_EBT_T_NAT] [BRIDGE_EBT_802_3] [BRIDGE_EBT_AMONG] [BRIDGE_EBT_ARP] [BRIDGE_EBT_IP] [BRIDGE_EBT_IP6] [BRIDGE_EBT_LIMIT] [BRIDGE_EBT_MARK] [BRIDGE_EBT_PKTTYPE] [BRIDGE_EBT_STP] [BRIDGE_EBT_VLAN] [BRIDGE_EBT_ARPREPLY] [BRIDGE_EBT_DNAT] [BRIDGE_EBT_MARK_T] [BRIDGE_EBT_REDIRECT] [BRIDGE_EBT_SNAT] [BRIDGE_EBT_LOG] [BRIDGE_EBT_ULOG] [BRIDGE_EBT_NFLOG];
DCCP_CCIDs_Configuration__EXPERIMENTAL_:  [IP_DCCP_CCID2_DEBUG] [IP_DCCP_CCID3] [IP_DCCP_TFRC_LIB] [IP_DCCP_TFRC_DEBUG];
DCCP_Kernel_Hacking:  [IP_DCCP_DEBUG] [NET_DCCPPROBE];
SCTP__Cookie_HMAC_Algorithm: [1, 1] { SCTP_HMAC_NONE SCTP_HMAC_SHA1 SCTP_HMAC_MD5};
TIPC_ADVANCED:  [TIPC_ZONES] [TIPC_CLUSTERS] [TIPC_NODES] [TIPC_SLAVE_NODES] [TIPC_PORTS] [TIPC_LOG];
ATM_CLIP:  [ATM_CLIP_NO_ICMP];
ATM_LANE:  [ATM_MPOA];
ATM_BR2684:  [ATM_BR2684_IPFILTER];
DEV_APPLETALK:  [LTPC] [COPS] [IPDDP];
NET_CLS_U32:  [CLS_U32_PERF] [CLS_U32_MARK];
NET_EMATCH:  [NET_EMATCH_STACK] [NET_EMATCH_CMP] [NET_EMATCH_NBYTE] [NET_EMATCH_U32] [NET_EMATCH_META] [NET_EMATCH_TEXT];
NET_CLS_ACT:  [NET_ACT_POLICE] [NET_ACT_GACT] [NET_ACT_MIRRED] [NET_ACT_IPT] [NET_ACT_NAT] [NET_ACT_PEDIT] [NET_ACT_SIMP] [NET_ACT_SKBEDIT];
AX25_DAMA_SLAVE:  [AX25_DAMA_MASTER];
AX_25_network_device_drivers:  [MKISS] [c6PACK] [BPQETHER] [DMASCC] [SCC] [BAYCOM_SER_FDX] [BAYCOM_SER_HDX] [BAYCOM_PAR] [BAYCOM_EPP] [YAM];
CAN_DEV:  [CAN_CALC_BITTIMING] [CAN_AT91] [CAN_SJA1000] CAN_USB_interfaces;
BFIN_SIR:  [BFIN_SIR0] [BFIN_SIR1] [BFIN_SIR2] [BFIN_SIR3] SIR_Mode;
DONGLE:  [ESI_DONGLE] [ACTISYS_DONGLE] [TEKRAM_DONGLE] [TOIM3232_DONGLE] [LITELINK_DONGLE] [MA600_DONGLE] [GIRBIL_DONGLE] [MCP2120_DONGLE] [OLD_BELKIN_DONGLE] [ACT200L_DONGLE];
BT_HCIUART:  [BT_HCIUART_H4] [BT_HCIUART_BCSP] [BT_HCIUART_LL];
BT_MRVL:  [BT_MRVL_SDIO];
MTD_REDBOOT_PARTS:  [MTD_REDBOOT_DIRECTORY_BLOCK] [MTD_REDBOOT_PARTS_UNALLOCATED] [MTD_REDBOOT_PARTS_READONLY];
MTD_CFI_ADV_OPTIONS:  Flash_cmd_query_data_swapping [MTD_CFI_GEOMETRY] [MTD_OTP];
MTD_PHYSMAP:  [MTD_PHYSMAP_COMPAT];
MTD_PMC_MSP_EVM:  Maximum_mappable_memory_available_for_flash_IO;
MTD_DILNETPC:  [MTD_DILNETPC_BOOTSIZE];
MTD_PCMCIA:  [MTD_PCMCIA_ANONYMOUS];
MTD_PMC551:  [MTD_PMC551_BUGFIX] [MTD_PMC551_DEBUG];
MTD_DATAFLASH:  [MTD_DATAFLASH_WRITE_VERIFY] [MTD_DATAFLASH_OTP];
MTD_M25P80:  [M25PXX_USE_FAST_READ];
MTD_MTDRAM:  [MTDRAM_TOTAL_SIZE] [MTDRAM_ERASE_SIZE] [MTDRAM_ABS_POS];
MTD_DOCPROBE_ADVANCED:  [MTD_DOCPROBE_ADDRESS] [MTD_DOCPROBE_HIGH] [MTD_DOCPROBE_55AA];
MTD_NAND_OMAP2:  [MTD_NAND_OMAP_PREFETCH];
MTD_NAND_BF5XX:  [MTD_NAND_BF5XX_HWECC];
MTD_NAND_S3C2410:  [MTD_NAND_S3C2410_DEBUG] [MTD_NAND_S3C2410_HWECC];
MTD_NAND_DISKONCHIP:  [MTD_NAND_DISKONCHIP_PROBE_ADVANCED] [MTD_NAND_DISKONCHIP_BBTWRITE];
MTD_NAND_ATMEL:  ECC_management_for_NAND_Flash___SmartMedia_on_AT91___AVR32;
MTD_NAND_PXA3xx:  [MTD_NAND_PXA3xx_BUILTIN];
MTD_LPDDR:  [MTD_QINFO_PROBE];
MTD_UBI:  [MTD_UBI_WL_THRESHOLD] [MTD_UBI_BEB_RESERVE] [MTD_UBI_GLUEBI] [MTD_UBI_DEBUG];
ATMEL_TCB_CLKSRC:  [ATMEL_TCB_CLKSRC_BLOCK];
IDE_Mode_for_AMD_Alchemy_Au1200: [1, 1] { BLK_DEV_IDE_AU1XXX_PIO_DBDMA BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA};
SCSI_FC_ATTRS:  [SCSI_FC_TGT_ATTRS];
SCSI_SAS_LIBSAS:  [SCSI_SAS_ATA] [SCSI_SAS_HOST_SMP] [SCSI_SAS_LIBSAS_DEBUG];
SCSI_SRP_ATTRS:  [SCSI_SRP_TGT_ATTRS];
SCSI_AIC7XXX:  [AIC7XXX_CMDS_PER_DEVICE] [AIC7XXX_RESET_DELAY_MS] [AIC7XXX_BUILD_FIRMWARE] [AIC7XXX_DEBUG_ENABLE] [AIC7XXX_DEBUG_MASK] [AIC7XXX_REG_PRETTY_PRINT];
SCSI_AIC79XX:  [AIC79XX_CMDS_PER_DEVICE] [AIC79XX_RESET_DELAY_MS] [AIC79XX_BUILD_FIRMWARE] [AIC79XX_DEBUG_ENABLE] [AIC79XX_DEBUG_MASK] [AIC79XX_REG_PRETTY_PRINT];
SCSI_AIC94XX:  [AIC94XX_DEBUG];
SCSI_MVSAS:  [SCSI_MVSAS_DEBUG];
SCSI_ARCMSR:  [SCSI_ARCMSR_AER];
MEGARAID_NEWGEN:  [MEGARAID_MM];
SCSI_MPT2SAS:  [SCSI_MPT2SAS_MAX_SGE] [SCSI_MPT2SAS_LOGGING];
SCSI_BUSLOGIC:  [SCSI_FLASHPOINT];
SCSI_EATA:  [SCSI_EATA_TAGGED_QUEUE] [SCSI_EATA_LINKED_COMMANDS] [SCSI_EATA_MAX_TAGS];
SCSI_IBMMCA:  [IBMMCA_SCSI_ORDER_STANDARD] [IBMMCA_SCSI_DEV_RESET];
SCSI_IBMVFC:  [SCSI_IBMVFC_TRACE];
SCSI_SYM53C8XX_2:  [SCSI_SYM53C8XX_DMA_ADDRESSING_MODE] [SCSI_SYM53C8XX_DEFAULT_TAGS] [SCSI_SYM53C8XX_MAX_TAGS] [SCSI_SYM53C8XX_MMIO];
SCSI_IPR:  [SCSI_IPR_TRACE] [SCSI_IPR_DUMP];
SCSI_LPFC:  [SCSI_LPFC_DEBUG_FS];
SCSI_U14_34F:  [SCSI_U14_34F_TAGGED_QUEUE] [SCSI_U14_34F_LINKED_COMMANDS] [SCSI_U14_34F_MAX_TAGS];
SCSI_MESH:  [SCSI_MESH_SYNC_RATE] [SCSI_MESH_RESET_DELAY_MS];
SCSI_ACORNSCSI_3:  [SCSI_ACORNSCSI_TAGGED_QUEUE] [SCSI_ACORNSCSI_SYNC];
ATARI_SCSI:  [ATARI_SCSI_TOSHIBA_DELAY] [ATARI_SCSI_RESET_BOOT];
PATA_HPT3X3:  [PATA_HPT3X3_DMA];
MD_RAID456:  [MULTICORE_RAID456];
DM_MIRROR:  [DM_LOG_USERSPACE];
DM_MULTIPATH:  [DM_MULTIPATH_QL] [DM_MULTIPATH_ST];
FIREWIRE_OHCI:  [FIREWIRE_OHCI_DEBUG];
IEEE1394_SBP2:  [IEEE1394_SBP2_PHYS_DMA];
ADB_PMU_LED:  [ADB_PMU_LED_IDE];
ARCNET_COM20020:  [ARCNET_COM20020_ISA] [ARCNET_COM20020_PCI];
MDIO_BITBANG:  [MDIO_GPIO];
AX88796:  [AX88796_93CX6];
MACE:  [MACE_AAUI_PORT];
NET_VENDOR_3COM:  [EL1] [EL2] [ELPLUS] [EL16] [EL3] [c3C515] [ELMC] [ELMC_II] [VORTEX] [TYPHOON];
NET_VENDOR_SMC:  [WD80x3] [ULTRAMCA] [ULTRA] [ULTRA32];
BFIN_MAC:  [BFIN_MAC_USE_L1] [BFIN_TX_DESC_NUM] [BFIN_RX_DESC_NUM] [BFIN_MAC_RMII];
DM9000:  [DM9000_DEBUGLEVEL] [DM9000_FORCE_SIMPLE_PHY_POLL];
ENC28J60:  [ENC28J60_WRITEVERIFY];
NET_VENDOR_RACAL:  [NI5010] [NI52] [NI65];
NET_TULIP:  [DE2104X] [TULIP] [DE4X5] [WINBOND_840] [DM9102] [ULI526X] [PCMCIA_XIRCOM];
NET_ISA:  [E2100] [EWRK3] [EEXPRESS] [EEXPRESS_PRO] [HPLAN_PLUS] [HPLAN] [LP486E] [ETH16I];
IBM_NEW_EMAC:  [IBM_NEW_EMAC_RXB] [IBM_NEW_EMAC_TXB] [IBM_NEW_EMAC_POLL_WEIGHT] [IBM_NEW_EMAC_RX_COPY_THRESHOLD] [IBM_NEW_EMAC_RX_SKB_HEADROOM] [IBM_NEW_EMAC_DEBUG];
NET_PCI:  [PCNET32] [AMD8111_ETH] [ADAPTEC_STARFIRE] [AC3200] [APRICOT];
B44:  [B44_PCI_AUTOSELECT] [B44_PCICORE_AUTOSELECT] [B44_PCI];
FORCEDETH:  [FORCEDETH_NAPI];
CS89x0:  [CS89x0_NONISA_IRQ];
c8139TOO:  [c8139TOO_PIO] [c8139TOO_TUNE_TWISTER] [c8139TOO_8129] [c8139_OLD_RX_RESET];
SUNDANCE:  [SUNDANCE_MMIO];
VIA_RHINE:  [VIA_RHINE_MMIO];
NET_POCKET:  [ATP] [DE600] [DE620];
FEC:  [FEC2];
FEC_MPC52xx:  [FEC_MPC52xx_MDIO];
FS_ENET:  [FS_ENET_HAS_SCC] [FS_ENET_HAS_FCC] [FS_ENET_HAS_FEC] [FS_ENET_MDIO_FEC] [FS_ENET_MDIO_FCC];
ACENIC:  [ACENIC_OMIT_TIGON_I];
IGB:  [IGB_DCA];
R8169:  [R8169_VLAN];
SKGE:  [SKGE_DEBUG];
SKY2:  [SKY2_DEBUG];
GELIC_NET:  [GELIC_WIRELESS];
UCC_GETH:  [UGETH_TX_ON_DEMAND];
STMMAC_ETH:  [STMMAC_DA] [STMMAC_DUAL_MAC] [STMMAC_TIMER];
CHELSIO_T1:  [CHELSIO_T1_1G];
IXGBE:  [IXGBE_DCA] [IXGBE_DCB];
VXGE:  [VXGE_DEBUG_TRACE_ALL];
MYRI10GE:  [MYRI10GE_DCA];
SFC:  [SFC_MTD];
TMS380TR:  [TMSPCI] [SKISA] [PROTEON] [ABYSS] [MADGEMC];
WLAN_PRE80211:  [STRIP] [ARLAN] [WAVELAN] [PCMCIA_WAVELAN] [PCMCIA_NETWAVE];
WLAN_80211:  [PCMCIA_RAYCS] [LIBERTAS] [LIBERTAS_THINFIRM] [AIRO] [ATMEL] [AT76C50X_USB] [AIRO_CS] [PCMCIA_WL3501] [PRISM54] [USB_ZD1201] [USB_NET_RNDIS_WLAN] [RTL8180] [RTL8187] [ADM8211] [MAC80211_HWSIM] [MWL8K] [P54_COMMON] [ATH_COMMON] [IPW2100] [IPW2200] [LIBIPW] [LIBIPW_DEBUG] [IWLWIFI] [HOSTAP] [B43] [B43LEGACY] [ZD1211RW] [RT2X00] [HERMES] [WL12XX] [IWM];
USB_USBNET:  [USB_NET_AX8817X] [USB_NET_CDCETHER] [USB_NET_CDC_EEM] [USB_NET_DM9601] [USB_NET_SMSC95XX] [USB_NET_GL620A] [USB_NET_NET1080] [USB_NET_PLUSB] [USB_NET_MCS7830] [USB_NET_RNDIS_HOST] [USB_NET_CDC_SUBSET] [USB_NET_ZAURUS];
HDLC:  [HDLC_RAW] [HDLC_RAW_ETH] [HDLC_CISCO] [HDLC_FR] [HDLC_PPP] [HDLC_X25] [PCI200SYN] [WANXL] [PC300] [PC300TOO] [N2] [C101] [FARSYNC] [DSCC4] [IXP4XX_HSS];
DLCI:  [DLCI_MAX] [SDLA];
WAN_ROUTER_DRIVERS:  [CYCLADES_SYNC];
SBNI:  [SBNI_MULTILINE];
ATM_ENI:  [ATM_ENI_DEBUG] [ATM_ENI_TUNE_BURST];
ATM_ZATM:  [ATM_ZATM_DEBUG];
ATM_NICSTAR:  [ATM_NICSTAR_USE_SUNI] [ATM_NICSTAR_USE_IDT77105];
ATM_IDT77252:  [ATM_IDT77252_DEBUG] [ATM_IDT77252_RCV_ALL] [ATM_IDT77252_USE_SUNI];
ATM_AMBASSADOR:  [ATM_AMBASSADOR_DEBUG];
ATM_HORIZON:  [ATM_HORIZON_DEBUG];
ATM_IA:  [ATM_IA_DEBUG];
ATM_FORE200E:  [ATM_FORE200E_USE_TASKLET] [ATM_FORE200E_TX_RETRY] [ATM_FORE200E_DEBUG];
ATM_HE:  [ATM_HE_USE_SUNI];
QETH:  [QETH_L2] [QETH_L3];
DEFXX:  [DEFXX_MMIO];
ROADRUNNER:  [ROADRUNNER_LARGE_RINGS];
MISDN_HFCMULTI:  [MISDN_HFCMULTI_8xx];
ISDN_DRV_HISAX:  [HISAX_EURO] [HISAX_1TR6] [HISAX_NI1] [HISAX_MAX_CARDS] [HISAX_16_0] [HISAX_16_3] [HISAX_TELESPCI] [HISAX_S0BOX] [HISAX_AVM_A1] [HISAX_FRITZPCI] [HISAX_AVM_A1_PCMCIA] [HISAX_ELSA] [HISAX_IX1MICROR2] [HISAX_DIEHLDIVA] [HISAX_ASUSCOM] [HISAX_TELEINT] [HISAX_HFCS] [HISAX_SEDLBAUER] [HISAX_SPORTSTER] [HISAX_MIC] [HISAX_NETJET] [HISAX_NETJET_U] [HISAX_NICCY] [HISAX_ISURF] [HISAX_HSTSAPHIR] [HISAX_BKM_A4T] [HISAX_SCT_QUADRO] [HISAX_GAZEL] [HISAX_HFC_PCI] [HISAX_W6692] [HISAX_HFC_SX] [HISAX_ENTERNOW_PCI] [HISAX_DEBUG] [HISAX_SEDLBAUER_CS] [HISAX_ELSA_CS] [HISAX_AVM_A1_CS] [HISAX_TELES_CS] [HISAX_ST5481] [HISAX_HFCUSB] [HISAX_HFC4S8S] [HISAX_FRITZ_PCIPNP];
HYSDN:  [HYSDN_CAPI];
ISDN_CAPI_CAPI20:  [ISDN_CAPI_CAPIFS_BOOL];
CAPI_AVM:  [ISDN_DRV_AVMB1_B1ISA] [ISDN_DRV_AVMB1_B1PCI] [ISDN_DRV_AVMB1_T1ISA] [ISDN_DRV_AVMB1_B1PCMCIA] [ISDN_DRV_AVMB1_T1PCI] [ISDN_DRV_AVMB1_C4];
CAPI_EICON:  [ISDN_DIVAS];
INPUT_MOUSEDEV:  [INPUT_MOUSEDEV_PSAUX] [INPUT_MOUSEDEV_SCREEN_X] [INPUT_MOUSEDEV_SCREEN_Y];
INPUT_KEYBOARD:  [KEYBOARD_AAED2000] [KEYBOARD_ADP5588] [KEYBOARD_AMIGA] [ATARI_KBD_CORE] [KEYBOARD_ATARI] [KEYBOARD_ATKBD] [QT2160] [KEYBOARD_BFIN] [KEYBOARD_CORGI] [KEYBOARD_LKKBD] [KEYBOARD_EP93XX] [KEYBOARD_GPIO] [KEYBOARD_MATRIX] [KEYBOARD_HIL_OLD] [KEYBOARD_HIL] [KEYBOARD_HP6XX] [KEYBOARD_HP7XX] [KEYBOARD_LM8323] [KEYBOARD_LOCOMO] [KEYBOARD_MAPLE] [KEYBOARD_MAX7359] [KEYBOARD_NEWTON] [KEYBOARD_OPENCORES] [KEYBOARD_PXA27x] [KEYBOARD_PXA930_ROTARY] [KEYBOARD_SPITZ] [KEYBOARD_STOWAWAY] [KEYBOARD_SUNKBD] [KEYBOARD_SH_KEYSC] [KEYBOARD_OMAP] [KEYBOARD_TWL4030] [KEYBOARD_TOSA] [KEYBOARD_XTKBD] [KEYBOARD_W90P910];
INPUT_MOUSE:  [MOUSE_PS2] [MOUSE_SERIAL] [MOUSE_APPLETOUCH] [MOUSE_BCM5974] [MOUSE_INPORT] [MOUSE_LOGIBM] [MOUSE_PC110PAD] [MOUSE_AMIGA] [MOUSE_ATARI] [MOUSE_RISCPC] [MOUSE_VSXXXAA] [MOUSE_GPIO] [MOUSE_PXA930_TRKBALL] [MOUSE_MAPLE] [MOUSE_SYNAPTICS_I2C];
INPUT_JOYSTICK:  [JOYSTICK_ANALOG] [JOYSTICK_A3D] [JOYSTICK_ADI] [JOYSTICK_COBRA] [JOYSTICK_GF2K] [JOYSTICK_GRIP] [JOYSTICK_GRIP_MP] [JOYSTICK_GUILLEMOT] [JOYSTICK_INTERACT] [JOYSTICK_SIDEWINDER] [JOYSTICK_TMDC] [JOYSTICK_IFORCE] [JOYSTICK_WARRIOR] [JOYSTICK_MAGELLAN] [JOYSTICK_SPACEORB] [JOYSTICK_SPACEBALL] [JOYSTICK_STINGER] [JOYSTICK_TWIDJOY] [JOYSTICK_ZHENHUA] [JOYSTICK_DB9] [JOYSTICK_GAMECON] [JOYSTICK_TURBOGRAFX] [JOYSTICK_AMIGA] [JOYSTICK_JOYDUMP] [JOYSTICK_XPAD] [JOYSTICK_WALKERA0701] [JOYSTICK_MAPLE];
INPUT_TABLET:  [TABLET_USB_ACECAD] [TABLET_USB_AIPTEK] [TABLET_USB_GTCO] [TABLET_USB_KBTAB] [TABLET_USB_WACOM];
INPUT_TOUCHSCREEN:  [TOUCHSCREEN_ADS7846] [TOUCHSCREEN_AD7877] [TOUCHSCREEN_AD7879_I2C] [TOUCHSCREEN_AD7879_SPI] [TOUCHSCREEN_AD7879] [TOUCHSCREEN_BITSY] [TOUCHSCREEN_CORGI] [TOUCHSCREEN_DA9034] [TOUCHSCREEN_EETI] [TOUCHSCREEN_FUJITSU] [TOUCHSCREEN_GUNZE] [TOUCHSCREEN_ELO] [TOUCHSCREEN_WACOM_W8001] [TOUCHSCREEN_MCS5000] [TOUCHSCREEN_MTOUCH] [TOUCHSCREEN_INEXIO] [TOUCHSCREEN_MK712] [TOUCHSCREEN_HP600] [TOUCHSCREEN_HP7XX] [TOUCHSCREEN_HTCPEN] [TOUCHSCREEN_PENMOUNT] [TOUCHSCREEN_MIGOR] [TOUCHSCREEN_TOUCHRIGHT] [TOUCHSCREEN_TOUCHWIN] [TOUCHSCREEN_ATMEL_TSADCC] [TOUCHSCREEN_UCB1400] [TOUCHSCREEN_WM97XX] [TOUCHSCREEN_USB_COMPOSITE] [TOUCHSCREEN_TOUCHIT213] [TOUCHSCREEN_TSC2007] [TOUCHSCREEN_W90X900] [TOUCHSCREEN_PCAP];
INPUT_MISC:  [INPUT_PCSPKR] [INPUT_SPARCSPKR] [INPUT_M68K_BEEP] [INPUT_APANEL] [INPUT_IXP4XX_BEEPER] [INPUT_COBALT_BTNS] [INPUT_WISTRON_BTNS] [INPUT_ATLAS_BTNS] [INPUT_ATI_REMOTE] [INPUT_ATI_REMOTE2] [INPUT_KEYSPAN_REMOTE] [INPUT_POWERMATE] [INPUT_YEALINK] [INPUT_CM109] [INPUT_TWL4030_PWRBUTTON] [INPUT_UINPUT] [INPUT_SGI_BTNS] [INPUT_WINBOND_CIR] [HP_SDC_RTC] [INPUT_PCF50633_PMU] [INPUT_GPIO_ROTARY_ENCODER] [INPUT_RB532_BUTTON] [INPUT_DM355EVM] [INPUT_BFIN_ROTARY] [INPUT_WM831X_ON] [INPUT_PCAP];
SERIO:  [SERIO_I8042] [SERIO_SERPORT] [SERIO_CT82C710] [SERIO_Q40KBD] [SERIO_PARKBD] [SERIO_RPCKBD] [SERIO_AT32PSIF] [SERIO_AMBAKMI] [SERIO_SA1111] [SERIO_GSCPS2] [HP_SDC] [SERIO_PCIPS2] [SERIO_MACEPS2] [SERIO_LIBPS2] [SERIO_RAW] [SERIO_XILINX_XPS_PS2];
GAMEPORT:  [GAMEPORT_NS558] [GAMEPORT_L4] [GAMEPORT_EMU10K1] [GAMEPORT_FM801];
CYCLADES:  [CYZ_INTR];
RIO:  [RIO_OLDPCI];
STALDRV:  [STALLION] [ISTALLION];
SERIAL_8250:  [SERIAL_8250_CONSOLE];
SERIAL_8250_EXTENDED:  [SERIAL_8250_MANY_PORTS] [SERIAL_8250_SHARE_IRQ] [SERIAL_8250_DETECT_IRQ] [SERIAL_8250_RSA];
SERIAL_AMBA_PL010:  [SERIAL_AMBA_PL010_CONSOLE];
SERIAL_AMBA_PL011:  [SERIAL_AMBA_PL011_CONSOLE];
SERIAL_SB1250_DUART:  [SERIAL_SB1250_DUART_CONSOLE];
SERIAL_ATMEL:  [SERIAL_ATMEL_CONSOLE] [SERIAL_ATMEL_PDC] [SERIAL_ATMEL_TTYAT];
SERIAL_KS8695:  [SERIAL_KS8695_CONSOLE];
SERIAL_CLPS711X:  [SERIAL_CLPS711X_CONSOLE];
SERIAL_DZ:  [SERIAL_DZ_CONSOLE];
SERIAL_ZS:  [SERIAL_ZS_CONSOLE];
SERIAL_21285:  [SERIAL_21285_CONSOLE];
SERIAL_MPSC:  [SERIAL_MPSC_CONSOLE];
SERIAL_PXA:  [SERIAL_PXA_CONSOLE];
SERIAL_SA1100:  [SERIAL_SA1100_CONSOLE];
SERIAL_BFIN:  [SERIAL_BFIN_CONSOLE] UART_Mode [SERIAL_BFIN_UART0] [SERIAL_BFIN_UART1] [SERIAL_BFIN_UART2] [SERIAL_BFIN_UART3];
SERIAL_IMX:  [SERIAL_IMX_CONSOLE];
SERIAL_UARTLITE:  [SERIAL_UARTLITE_CONSOLE];
SERIAL_SUNZILOG:  [SERIAL_SUNZILOG_CONSOLE];
SERIAL_SUNSU:  [SERIAL_SUNSU_CONSOLE];
SERIAL_MUX:  [SERIAL_MUX_CONSOLE];
SERIAL_SUNSAB:  [SERIAL_SUNSAB_CONSOLE];
SERIAL_IP22_ZILOG:  [SERIAL_IP22_ZILOG_CONSOLE];
SERIAL_SH_SCI:  [SERIAL_SH_SCI_NR_UARTS] [SERIAL_SH_SCI_CONSOLE];
SERIAL_PNX8XXX:  [SERIAL_PNX8XXX_CONSOLE];
SERIAL_68328:  [SERIAL_68328_RTS_CTS];
SERIAL_MCF:  [SERIAL_MCF_BAUDRATE] [SERIAL_MCF_CONSOLE];
SERIAL_PMACZILOG:  [SERIAL_PMACZILOG_TTYS] [SERIAL_PMACZILOG_CONSOLE];
SERIAL_LH7A40X:  [SERIAL_LH7A40X_CONSOLE];
SERIAL_CPM:  [SERIAL_CPM_CONSOLE];
SERIAL_MPC52xx:  [SERIAL_MPC52xx_CONSOLE];
SERIAL_M32R_SIO:  [SERIAL_M32R_SIO_CONSOLE] [SERIAL_M32R_PLDSIO];
SERIAL_VR41XX:  [SERIAL_VR41XX_CONSOLE];
SERIAL_MSM:  [SERIAL_MSM_CONSOLE];
SERIAL_NETX:  [SERIAL_NETX_CONSOLE];
SERIAL_OF_PLATFORM_NWPSERIAL:  [SERIAL_OF_PLATFORM_NWPSERIAL_CONSOLE];
SERIAL_SC26XX:  [SERIAL_SC26XX_CONSOLE];
SERIAL_BFIN_SPORT:  Baud_rate_for_Blackfin_SPORT_UART [SPORT_BAUD_RATE];
SERIAL_BCM63XX:  [SERIAL_BCM63XX_CONSOLE];
IPMI_PANIC_EVENT:  [IPMI_PANIC_STRING];
I2C_Algorithms:  [I2C_ALGOBIT] [I2C_ALGOPCF] [I2C_ALGOPCA];
I2C_AMD756:  [I2C_AMD756_S4882];
I2C_NFORCE2:  [I2C_NFORCE2_S4985];
I2C_BLACKFIN_TWI:  [I2C_BLACKFIN_TWI_CLK_KHZ];
I2C_PXA:  [I2C_PXA_SLAVE];
SCx200_I2C:  [SCx200_I2C_SCL] [SCx200_I2C_SDA];
W1_SLAVE_DS2433:  [W1_SLAVE_DS2433_CRC];
VIDEO_HELPER_CHIPS_AUTO:  [VIDEO_IR_I2C] Encoders_decoders_and_other_helper_chips;
VIDEO_VPFE_CAPTURE:  [VIDEO_DM6446_CCDC] [VIDEO_DM355_CCDC];
VIDEO_BT848:  [VIDEO_BT848_DVB];
VIDEO_CPIA:  [VIDEO_CPIA_PP] [VIDEO_CPIA_USB];
VIDEO_ZORAN:  [VIDEO_ZORAN_DC30] [VIDEO_ZORAN_ZR36060];
VIDEO_SAA7134:  [VIDEO_SAA7134_ALSA] [VIDEO_SAA7134_DVB];
VIDEO_CX88:  [VIDEO_CX88_ALSA] [VIDEO_CX88_BLACKBIRD] [VIDEO_CX88_DVB];
VIDEO_IVTV:  [VIDEO_FB_IVTV];
SOC_CAMERA:  [SOC_CAMERA_MT9M001] [SOC_CAMERA_MT9M111] [SOC_CAMERA_MT9T031] [SOC_CAMERA_MT9V022] [SOC_CAMERA_TW9910] [SOC_CAMERA_PLATFORM] [SOC_CAMERA_OV772X];
V4L_USB_DRIVERS:  [USB_VIDEO_CLASS] [USB_GSPCA] [VIDEO_PVRUSB2] [VIDEO_PVRUSB2_DEBUGIFC] [VIDEO_HDPVR] [VIDEO_EM28XX] [VIDEO_CX231XX] [VIDEO_USBVISION] [VIDEO_USBVIDEO] [USB_VICAM] [USB_IBMCAM] [USB_KONICAWC] [USB_QUICKCAM_MESSENGER] [USB_ET61X251] [VIDEO_OVCAMCHIP] [USB_OV511] [USB_SE401] [USB_SN9C102] [USB_STV680] [USB_ZC0301] [USB_PWC] [USB_PWC_INPUT_EVDEV] [USB_ZR364XX] [USB_STKWEBCAM] [USB_S2255];
RADIO_RTRACK:  [RADIO_RTRACK_PORT];
RADIO_RTRACK2:  [RADIO_RTRACK2_PORT];
RADIO_AZTECH:  [RADIO_AZTECH_PORT];
RADIO_GEMTEK:  [RADIO_GEMTEK_PORT] [RADIO_GEMTEK_PROBE];
RADIO_TERRATEC:  [RADIO_TERRATEC_PORT];
RADIO_TRUST:  [RADIO_TRUST_PORT];
RADIO_TYPHOON:  [RADIO_TYPHOON_PORT] [RADIO_TYPHOON_MUTEFREQ];
RADIO_ZOLTRIX:  [RADIO_ZOLTRIX_PORT];
RADIO_SI470X:  [USB_SI470X] [I2C_SI470X];
RADIO_TEA5764:  [RADIO_TEA5764_XTAL];
DVB_AV7110:  [DVB_AV7110_OSD];
DVB_BUDGET_CORE:  [DVB_BUDGET] [DVB_BUDGET_CI] [DVB_BUDGET_AV] [DVB_BUDGET_PATCH];
DVB_USB:  [DVB_USB_DEBUG] [DVB_USB_A800] [DVB_USB_DIBUSB_MB] [DVB_USB_DIBUSB_MC] [DVB_USB_DIB0700] [DVB_USB_UMT_010] [DVB_USB_CXUSB] [DVB_USB_M920X] [DVB_USB_GL861] [DVB_USB_AU6610] [DVB_USB_DIGITV] [DVB_USB_VP7045] [DVB_USB_VP702X] [DVB_USB_GP8PSK] [DVB_USB_NOVA_T_USB2] [DVB_USB_TTUSB2] [DVB_USB_DTT200U] [DVB_USB_OPERA1] [DVB_USB_AF9005] [DVB_USB_DW2102] [DVB_USB_CINERGY_T2] [DVB_USB_ANYSEE] [DVB_USB_DTV5100] [DVB_USB_AF9015] [DVB_USB_CE6230] [DVB_USB_FRIIO];
SMS_SIANO_MDTV:  Siano_module_components;
DVB_B2C2_FLEXCOP:  [DVB_B2C2_FLEXCOP_PCI] [DVB_B2C2_FLEXCOP_USB] [DVB_B2C2_FLEXCOP_DEBUG];
DVB_FIREDTV:  [DVB_FIREDTV_IEEE1394] [DVB_FIREDTV_INPUT];
DVB_FE_CUSTOMISE:  Customise_DVB_Frontends;
opt Intel_830M__845G__852GM__855GM__865G:  [DRM_I830] [DRM_I915];
FB_FOREIGN_ENDIAN:  Choice_endianness_support;
FB_PM2:  [FB_PM2_FIFO_DISCONNECT];
FB_ARMCLCD:  LCD_Panel;
FB_AMIGA:  [FB_AMIGA_OCS] [FB_AMIGA_ECS] [FB_AMIGA_AGA];
FB_HGA:  [FB_HGA_ACCEL];
FB_GBE:  [FB_GBE_MEM];
FB_SBUS:  [FB_BW2] [FB_CG3] [FB_CG6] [FB_FFB] [FB_TCX] [FB_CG14] [FB_P9100] [FB_LEO];
FB_ATMEL:  [FB_INTSRAM] [FB_ATMEL_STN];
FB_NVIDIA:  [FB_NVIDIA_I2C] [FB_NVIDIA_DEBUG] [FB_NVIDIA_BACKLIGHT];
FB_RIVA:  [FB_RIVA_I2C] [FB_RIVA_DEBUG] [FB_RIVA_BACKLIGHT];
FB_I810:  [FB_I810_GTF];
FB_LE80578:  [FB_CARILLO_RANCH];
FB_INTEL:  [FB_INTEL_DEBUG] [FB_INTEL_I2C];
FB_MATROX:  [FB_MATROX_MILLENIUM] [FB_MATROX_MYSTIQUE] [FB_MATROX_G] [FB_MATROX_I2C];
FB_RADEON:  [FB_RADEON_I2C] [FB_RADEON_BACKLIGHT] [FB_RADEON_DEBUG];
FB_ATY128:  [FB_ATY128_BACKLIGHT];
FB_ATY:  [FB_ATY_CT] [FB_ATY_GX] [FB_ATY_BACKLIGHT];
FB_SAVAGE:  [FB_SAVAGE_I2C] [FB_SAVAGE_ACCEL];
FB_SIS:  [FB_SIS_300] [FB_SIS_315];
FB_3DFX:  [FB_3DFX_ACCEL] [FB_3DFX_I2C];
FB_CARMINE:  DRAM_timing;
FB_GEODE:  [FB_GEODE_LX] [FB_GEODE_GX] [FB_GEODE_GX1];
FB_PXA:  [FB_PXA_OVERLAY] [FB_PXA_SMARTPANEL] [FB_PXA_PARAMETERS];
FB_MBX:  [FB_MBX_DEBUG];
FB_TMIO:  [FB_TMIO_ACCELL];
FB_S3C:  [FB_S3C_DEBUG_REGWRITE];
FB_S3C2410:  [FB_S3C2410_DEBUG];
FB_PNX4008_DUM:  [FB_PNX4008_DUM_RGB];
FB_PS3:  [FB_PS3_DEFAULT_SIZE_M];
FB_MB862XX:  [FB_MB862XX_PCI_GDC] [FB_MB862XX_LIME];
LCD_CLASS_DEVICE:  [LCD_CORGI] [LCD_LMS283GF05] [LCD_LTV350QV] [LCD_ILI9320] [LCD_TDO24M] [LCD_VGG2432A4] [LCD_PLATFORM] [LCD_TOSA] [LCD_HP700];
BACKLIGHT_CLASS_DEVICE:  [BACKLIGHT_ATMEL_LCDC] [BACKLIGHT_ATMEL_PWM] [BACKLIGHT_GENERIC] [BACKLIGHT_LOCOMO] [BACKLIGHT_OMAP1] [BACKLIGHT_HP680] [BACKLIGHT_HP700] [BACKLIGHT_PROGEAR] [BACKLIGHT_CARILLO_RANCH] [BACKLIGHT_PWM] [BACKLIGHT_DA903X] [BACKLIGHT_MBP_NVIDIA] [BACKLIGHT_TOSA] [BACKLIGHT_SAHARA] [BACKLIGHT_WM831X] [BACKLIGHT_ADX] [BACKLIGHT_ADP5520];
VGA_CONSOLE:  [VGACON_SOFT_SCROLLBACK];
FRAMEBUFFER_CONSOLE:  [FRAMEBUFFER_CONSOLE_DETECT_PRIMARY] [FRAMEBUFFER_CONSOLE_ROTATION];
FONTS:  [FONT_8x8] [FONT_8x16] [FONT_6x11] [FONT_7x14] [FONT_PEARL_8x8] [FONT_ACORN_8x8] [FONT_MINI_4x6];
SND_SEQUENCER:  [SND_SEQ_DUMMY];
SND_PCM_OSS:  [SND_PCM_OSS_PLUGINS];
SND_HRTIMER:  [SND_SEQ_HRTIMER_DEFAULT];
SND_RTCTIMER:  [SND_SEQ_RTCTIMER_DEFAULT];
SND_DEBUG:  [SND_DEBUG_VERBOSE] [SND_PCM_XRUN_DEBUG];
SND_DRIVERS:  [SND_PCSP] [SND_DUMMY] [SND_VIRMIDI] [SND_MTPAV] [SND_MTS64] [SND_SERIAL_U16550] [SND_MPU401] [SND_PORTMAN2X4] [SND_ML403_AC97CR] [SND_AC97_POWER_SAVE];
SND_ISA:  [SND_ADLIB] [SND_AD1816A] [SND_AD1848] [SND_ALS100] [SND_AZT2320] [SND_CMI8330] [SND_CS4231] [SND_CS4236] [SND_DT019X] [SND_ES968] [SND_ES1688] [SND_ES18XX] [SND_SC6000] [SND_GUSCLASSIC] [SND_GUSEXTREME] [SND_GUSMAX] [SND_INTERWAVE] [SND_INTERWAVE_STB] [SND_OPL3SA2] [SND_OPTI92X_AD1848] [SND_OPTI92X_CS4231] [SND_OPTI93X] [SND_MIRO] [SND_SB8] [SND_SB16] [SND_SBAWE] [SND_SGALAXY] [SND_SSCAPE] [SND_WAVEFRONT] [SND_MSND_PINNACLE] [SND_MSND_CLASSIC];
SND_PCI:  [SND_AD1889] [SND_ALS300] [SND_ALS4000] [SND_ALI5451] [SND_ATIIXP] [SND_ATIIXP_MODEM] [SND_AU8810] [SND_AU8820] [SND_AU8830] [SND_AW2] [SND_AZT3328] [SND_BT87X] [SND_CA0106] [SND_CMIPCI] [SND_OXYGEN_LIB] [SND_OXYGEN] [SND_CS4281] [SND_CS46XX] [SND_CS5530] [SND_CS5535AUDIO] [SND_CTXFI] [SND_DARLA20] [SND_GINA20] [SND_LAYLA20] [SND_DARLA24] [SND_GINA24] [SND_LAYLA24] [SND_MONA] [SND_MIA] [SND_ECHO3G] [SND_INDIGO] [SND_INDIGOIO] [SND_INDIGODJ] [SND_INDIGOIOX] [SND_INDIGODJX] [SND_EMU10K1] [SND_EMU10K1X] [SND_ENS1370] [SND_ENS1371] [SND_ES1938] [SND_ES1968] [SND_FM801] [SND_HDA_INTEL] [SND_HDSP] [SND_HDSPM] [SND_HIFIER] [SND_ICE1712] [SND_ICE1724] [SND_INTEL8X0] [SND_INTEL8X0M] [SND_KORG1212] [SND_LX6464ES] [SND_MAESTRO3] [SND_MIXART] [SND_NM256] [SND_PCXHR] [SND_RIPTIDE] [SND_RME32] [SND_RME96] [SND_RME9652] [SND_SIS7019] [SND_SONICVIBES] [SND_TRIDENT] [SND_VIA82XX] [SND_VIA82XX_MODEM] [SND_VIRTUOSO] [SND_VX222] [SND_YMFPCI];
SND_PPC:  [SND_POWERMAC] [SND_PS3];
SND_AOA:  [SND_AOA_FABRIC_LAYOUT] [SND_AOA_ONYX] [SND_AOA_TAS] [SND_AOA_TOONIE] [SND_AOA_SOUNDBUS];
SND_ARM:  [SND_ARMAACI] [SND_PXA2XX_PCM] [SND_PXA2XX_LIB] [SND_PXA2XX_LIB_AC97] [SND_PXA2XX_AC97];
Atmel_devices__AVR32_and_AT91_:  [SND_ATMEL_ABDAC] [SND_ATMEL_AC97C];
SND_SPI:  [SND_AT73C213];
SND_MIPS:  [SND_SGI_O2] [SND_SGI_HAL2] [SND_AU1X00];
SND_SUPERH:  [SND_AICA];
SND_USB:  [SND_USB_AUDIO] [SND_USB_USX2Y] [SND_USB_CAIAQ] [SND_USB_US122L];
SND_PCMCIA:  [SND_VXPOCKET] [SND_PDAUDIOCF];
SND_SPARC:  [SND_SUN_AMD7930] [SND_SUN_CS4231] [SND_SUN_DBRI];
SND_GSC:  [SND_HARMONY];
SND_SOC:  [SND_SOC_AC97_BUS] [SND_ATMEL_SOC] [SND_SOC_AU1XPSC] [SND_SOC_AU1XPSC_I2S] [SND_SOC_AU1XPSC_AC97] [SND_SOC_SAMPLE_PSC_AC97] [SND_BF5XX_I2S] [SND_BF5XX_TDM] [SND_BF5XX_AC97] [SND_BF5XX_SOC_SPORT] [SND_BF5XX_SOC_I2S] [SND_BF5XX_SOC_TDM] [SND_BF5XX_SOC_AC97] [SND_BF5XX_SPORT_NUM] [SND_DAVINCI_SOC] [SND_DAVINCI_SOC_I2S] [SND_DAVINCI_SOC_MCASP] [SND_DAVINCI_SOC_EVM] [SND_DM6467_SOC_EVM] [SND_DAVINCI_SOC_SFFSDR] [SND_DA830_SOC_EVM] [SND_DA850_SOC_EVM] [SND_SOC_OF_SIMPLE] [SND_MPC52xx_DMA] [SND_SOC_MPC8610] [SND_SOC_MPC8610_HPCD] [SND_SOC_MPC5200_I2S] [SND_SOC_MPC5200_AC97] [SND_MPC52xx_SOC_PCM030] [SND_MPC52xx_SOC_EFIKA] [SND_MX1_MX2_SOC] [SND_MXC_SOC_SSI] [SND_SOC_MX27VIS_WM8974] [SND_OMAP_SOC] [SND_OMAP_SOC_MCBSP] [SND_OMAP_SOC_N810] [SND_OMAP_SOC_AMS_DELTA] [SND_OMAP_SOC_OSK5912] [SND_OMAP_SOC_OVERO] [SND_OMAP_SOC_OMAP2EVM] [SND_OMAP_SOC_OMAP3EVM] [SND_OMAP_SOC_SDP3430] [SND_OMAP_SOC_OMAP3_PANDORA] [SND_OMAP_SOC_OMAP3_BEAGLE] [SND_OMAP_SOC_ZOOM2] [SND_PXA2XX_SOC] [SND_PXA2XX_SOC_AC97] [SND_PXA2XX_SOC_I2S] [SND_PXA_SOC_SSP] [SND_PXA2XX_SOC_CORGI] [SND_PXA2XX_SOC_SPITZ] [SND_PXA2XX_SOC_POODLE] [SND_PXA2XX_SOC_TOSA] [SND_PXA2XX_SOC_E740] [SND_PXA2XX_SOC_E750] [SND_PXA2XX_SOC_E800] [SND_PXA2XX_SOC_EM_X270] [SND_PXA2XX_SOC_PALM27X] [SND_SOC_ZYLONITE] [SND_PXA2XX_SOC_MAGICIAN] [SND_PXA2XX_SOC_MIOA701] [SND_PXA2XX_SOC_IMOTE2] [SND_S3C24XX_SOC] [SND_S3C24XX_SOC_I2S] [SND_S3C_I2SV2_SOC] [SND_S3C2412_SOC_I2S] [SND_S3C64XX_SOC_I2S] [SND_S3C2443_SOC_AC97] [SND_S3C24XX_SOC_NEO1973_WM8753] [SND_S3C24XX_SOC_NEO1973_GTA02_WM8753] [SND_S3C24XX_SOC_JIVE_WM8750] [SND_S3C24XX_SOC_SMDK2443_WM9710] [SND_S3C24XX_SOC_LN2440SBC_ALC650] [SND_S3C24XX_SOC_S3C24XX_UDA134X] [SND_S3C24XX_SOC_SIMTEC] [SND_S3C24XX_SOC_SIMTEC_TLV320AIC23] [SND_S3C24XX_SOC_SIMTEC_HERMES] [SND_S6000_SOC] [SND_S6000_SOC_I2S] [SND_S6000_SOC_S6IPCAM] SoC_Audio_support_for_SuperH [SND_SOC_TXX9ACLC] [HAS_TXX9_ACLC] [SND_SOC_TXX9ACLC_AC97] [SND_SOC_TXX9ACLC_GENERIC] [SND_SOC_I2C_AND_SPI] [SND_SOC_ALL_CODECS] [SND_SOC_WM_HUBS] [SND_SOC_AC97_CODEC] [SND_SOC_AD1836] [SND_SOC_AD1938] [SND_SOC_AD1980] [SND_SOC_AD73311] [SND_SOC_AK4104] [SND_SOC_AK4535] [SND_SOC_AK4642] [SND_SOC_CS4270] [SND_SOC_CS4270_VD33_ERRATA] [SND_SOC_CX20442] [SND_SOC_L3] [SND_SOC_PCM3008] [SND_SOC_SPDIF] [SND_SOC_SSM2602] [SND_SOC_STAC9766] [SND_SOC_TLV320AIC23] [SND_SOC_TLV320AIC26] [SND_SOC_TLV320AIC3X] [SND_SOC_TWL4030] [SND_SOC_UDA134X] [SND_SOC_UDA1380] [SND_SOC_WM8350] [SND_SOC_WM8400] [SND_SOC_WM8510] [SND_SOC_WM8523] [SND_SOC_WM8580] [SND_SOC_WM8728] [SND_SOC_WM8731] [SND_SOC_WM8750] [SND_SOC_WM8753] [SND_SOC_WM8776] [SND_SOC_WM8900] [SND_SOC_WM8903] [SND_SOC_WM8940] [SND_SOC_WM8960] [SND_SOC_WM8961] [SND_SOC_WM8971] [SND_SOC_WM8974] [SND_SOC_WM8988] [SND_SOC_WM8990] [SND_SOC_WM8993] [SND_SOC_WM9081] [SND_SOC_WM9705] [SND_SOC_WM9712] [SND_SOC_WM9713] [SND_SOC_MAX9877];
SOUND_MSNDCLAS:  [MSNDCLAS_HAVE_BOOT] [MSNDCLAS_INIT_FILE] [MSNDCLAS_PERM_FILE] [MSNDCLAS_IRQ] [MSNDCLAS_MEM] [MSNDCLAS_IO];
SOUND_MSNDPIN:  [MSNDPIN_HAVE_BOOT] [MSNDPIN_INIT_FILE] [MSNDPIN_PERM_FILE] [MSNDPIN_IRQ] [MSNDPIN_MEM] [MSNDPIN_IO] [MSNDPIN_DIGITAL] [MSNDPIN_NONPNP];
SOUND_OSS:  [SOUND_TRACEINIT] [SOUND_DMAP] [SOUND_SSCAPE] [SOUND_VMIDI] [SOUND_TRIX] [SOUND_MSS] [SOUND_MPU401] [SOUND_PAS] [SOUND_PSS] [SOUND_SB] [SOUND_YM3812] [SOUND_UART6850] [SOUND_AEDSP16] [SOUND_VIDC] [SOUND_WAVEARTIST] [SOUND_KAHLUA];
SOUND_SH_DAC_AUDIO:  [SOUND_SH_DAC_AUDIO_CHANNEL];
HID_DRAGONRISE:  [DRAGONRISE_FF];
HID_LOGITECH:  [LOGITECH_FF] [LOGIRUMBLEPAD2_FF];
HID_PANTHERLORD:  [PANTHERLORD_FF];
HID_GREENASIA:  [GREENASIA_FF];
HID_SMARTJOYPLUS:  [SMARTJOYPLUS_FF];
HID_THRUSTMASTER:  [THRUSTMASTER_FF];
HID_ZEROPLUS:  [ZEROPLUS_FF];
USB_WUSB_CBAF:  [USB_WUSB_CBAF_DEBUG];
USB_XHCI_HCD:  [USB_XHCI_HCD_DEBUGGING];
USB_EHCI_HCD:  [USB_EHCI_ROOT_HUB_TT] [USB_EHCI_TT_NEWSCHED] [USB_EHCI_BIG_ENDIAN_MMIO] [USB_EHCI_BIG_ENDIAN_DESC] [USB_EHCI_FSL] [USB_EHCI_HCD_PPC_OF] [USB_W90X900_EHCI];
USB_OHCI_HCD:  [USB_OHCI_HCD_PPC_SOC] [USB_OHCI_HCD_PPC_OF_BE] [USB_OHCI_HCD_PPC_OF_LE] [USB_OHCI_HCD_PPC_OF] [USB_OHCI_HCD_PCI] [USB_OHCI_HCD_SSB] [USB_OHCI_BIG_ENDIAN_DESC] [USB_OHCI_BIG_ENDIAN_MMIO] [USB_OHCI_LITTLE_ENDIAN];
USB_FHCI_HCD:  [FHCI_DEBUG];
USB_SL811_HCD:  [USB_SL811_CS];
Driver_Mode: [1, 1] { USB_MUSB_HOST USB_MUSB_PERIPHERAL USB_MUSB_OTG};
MUSB_PIO_ONLY:  [USB_INVENTRA_DMA] [USB_TI_CPPI_DMA] [USB_TUSB_OMAP_DMA];
USB_SERIAL_KEYSPAN:  [USB_SERIAL_KEYSPAN_MPR] [USB_SERIAL_KEYSPAN_USA28] [USB_SERIAL_KEYSPAN_USA28X] [USB_SERIAL_KEYSPAN_USA28XA] [USB_SERIAL_KEYSPAN_USA28XB] [USB_SERIAL_KEYSPAN_USA19] [USB_SERIAL_KEYSPAN_USA18X] [USB_SERIAL_KEYSPAN_USA19W] [USB_SERIAL_KEYSPAN_USA19QW] [USB_SERIAL_KEYSPAN_USA19QI] [USB_SERIAL_KEYSPAN_USA49W] [USB_SERIAL_KEYSPAN_USA49WLC];
USB_SERIAL_SAFE:  [USB_SERIAL_SAFE_PADDED];
USB_Peripheral_Controller: [1, 1] { USB_GADGET_AT91 USB_GADGET_ATMEL_USBA USB_GADGET_FSL_USB2 USB_GADGET_LH7A40X USB_GADGET_OMAP USB_GADGET_PXA25X USB_GADGET_R8A66597 USB_GADGET_PXA27X USB_GADGET_S3C_HSOTG USB_GADGET_IMX USB_GADGET_S3C2410 USB_GADGET_M66592 USB_GADGET_AMD5536UDC USB_GADGET_FSL_QE USB_GADGET_CI13XXX USB_GADGET_NET2280 USB_GADGET_GOKU USB_GADGET_LANGWELL USB_GADGET_DUMMY_HCD};
USB_Gadget_Drivers: [1, 9] { USB_ZERO USB_AUDIO USB_ETH USB_GADGETFS USB_FILE_STORAGE USB_G_SERIAL USB_MIDI_GADGET USB_G_PRINTER USB_CDC_COMPOSITE};
MMC_SDHCI_PCI:  [MMC_RICOH_MMC];
MMC_SDHCI_S3C:  [MMC_SDHCI_S3C_DMA];
Samsung_S3C_SD_MMC_transfer_code: [1, 1] { MMC_S3C_PIO MMC_S3C_DMA MMC_S3C_PIODMA};
INFINIBAND_IPOIB_DEBUG:  [INFINIBAND_IPOIB_DEBUG_DATA];
EDAC_AMD64:  [EDAC_AMD64_ERROR_INJECTION];
CFAG12864B:  [CFAG12864B_RATE];
ET131X:  [ET131X_DEBUG];
VIDEO_GO7007:  [VIDEO_GO7007_USB] [VIDEO_GO7007_OV7640] [VIDEO_GO7007_SAA7113] [VIDEO_GO7007_SAA7115] [VIDEO_GO7007_TW9903] [VIDEO_GO7007_UDA1342] [VIDEO_GO7007_SONY_TUNER] [VIDEO_GO7007_TW2804];
VIDEO_CX25821:  [VIDEO_CX25821_ALSA];
USB_IP_COMMON:  [USB_IP_VHCI_HCD] [USB_IP_HOST];
COMEDI:  [COMEDI_DEBUG] [COMEDI_PCI_DRIVERS] [COMEDI_PCMCIA_DRIVERS] [COMEDI_USB_DRIVERS];
PANEL:  [PANEL_PARPORT] [PANEL_PROFILE] [PANEL_CHANGE_MESSAGE];
Android:  [ANDROID];
MSM_SMD:  [MSM_ONCRPCROUTER];
MSM_CAMERA:  [MSM_CAMERA_DEBUG] [MSM_CAMERA_FLASH];
DST:  [DST_DEBUG];
POHMELFS:  [POHMELFS_DEBUG] [POHMELFS_CRYPTO];
HYPERV:  [HYPERV_STORAGE] [HYPERV_BLOCK] [HYPERV_NET];
VME_BUS:  [VME_CA91CX42] [VME_TSI148] [VME_USER];
RAR_Register_Driver:  [RAR_REGISTER];
IIO:  [IIO_RING_BUFFER] [IIO_TRIGGER] [KXSD9] [LIS3L02DQ] [SCA3000] [MAX1363] [TSL2561] [IIO_PERIODIC_RTC_TRIGGER] [IIO_GPIO_TRIGGER];
CACHEFILES:  [CACHEFILES_DEBUG] [CACHEFILES_HISTOGRAM];
JFFS2_FS_WRITEBUFFER:  [JFFS2_FS_WBUF_VERIFY];
JFFS2_FS_XATTR:  [JFFS2_FS_POSIX_ACL] [JFFS2_FS_SECURITY];
JFFS2_COMPRESSION_OPTIONS:  [JFFS2_ZLIB] [JFFS2_LZO] [JFFS2_RTIME] [JFFS2_RUBIN] JFFS2_default_compression_mode;
UBIFS_FS_ADVANCED_COMPR:  [UBIFS_FS_LZO] [UBIFS_FS_ZLIB];
UBIFS_FS_DEBUG:  [UBIFS_FS_DEBUG_MSG_LVL] [UBIFS_FS_DEBUG_CHKS];
SQUASHFS_EMBEDDED:  [SQUASHFS_FRAGMENT_CACHE_SIZE];
RomFS_backing_stores: [1, 1] { ROMFS_BACKED_BY_BLOCK ROMFS_BACKED_BY_MTD ROMFS_BACKED_BY_BOTH};
NFS_V3:  [NFS_V3_ACL];
NFS_V4:  [NFS_V4_1];
NFSD_V3:  [NFSD_V3_ACL];
SMB_NLS_DEFAULT:  [SMB_NLS_REMOTE];
CIFS_STATS:  [CIFS_STATS2];
CIFS_XATTR:  [CIFS_POSIX];
ACORN_PARTITION:  [ACORN_PARTITION_CUMANA] [ACORN_PARTITION_EESOX] [ACORN_PARTITION_ICS] [ACORN_PARTITION_ADFS] [ACORN_PARTITION_POWERTEC] [ACORN_PARTITION_RISCIX];
MSDOS_PARTITION:  [BSD_DISKLABEL] [MINIX_SUBPARTITION] [SOLARIS_X86_PARTITION] [UNIXWARE_DISKLABEL];
LDM_PARTITION:  [LDM_DEBUG];
KGDB_TESTS_ON_BOOT:  [KGDB_TESTS_BOOT_STRING];
Choose_IP__FIB_lookup_algorithm__choose_FIB_HASH_if_unsure_: [1, 1] { ASK_IP_FIB_HASH IP_FIB_TRIE};
Default_TCP_congestion_control: [1, 1] { DEFAULT_BIC DEFAULT_CUBIC DEFAULT_HTCP DEFAULT_VEGAS DEFAULT_WESTWOOD DEFAULT_RENO};
IPV6_ROUTER_PREF:  [IPV6_ROUTE_INFO];
IPV6_MULTIPLE_TABLES:  [IPV6_SUBTREES];
IPV6_MROUTE:  [IPV6_PIMSM_V2];
NF_CONNTRACK:  [NF_CT_ACCT] [NF_CONNTRACK_MARK] [NF_CONNTRACK_SECMARK] [NF_CONNTRACK_EVENTS] [NF_CT_PROTO_DCCP] [NF_CT_PROTO_GRE] [NF_CT_PROTO_SCTP] [NF_CT_PROTO_UDPLITE] [NF_CONNTRACK_AMANDA] [NF_CONNTRACK_FTP] [NF_CONNTRACK_H323] [NF_CONNTRACK_IRC] [NF_CONNTRACK_NETBIOS_NS] [NF_CONNTRACK_PPTP] [NF_CONNTRACK_SANE] [NF_CONNTRACK_SIP] [NF_CONNTRACK_TFTP] [NF_CT_NETLINK];
NETFILTER_XTABLES:  [NETFILTER_XT_TARGET_CLASSIFY] [NETFILTER_XT_TARGET_CONNMARK] [NETFILTER_XT_TARGET_CONNSECMARK] [NETFILTER_XT_TARGET_DSCP] [NETFILTER_XT_TARGET_HL] [NETFILTER_XT_TARGET_LED] [NETFILTER_XT_TARGET_MARK] [NETFILTER_XT_TARGET_NFLOG] [NETFILTER_XT_TARGET_NFQUEUE] [NETFILTER_XT_TARGET_NOTRACK] [NETFILTER_XT_TARGET_RATEEST] [NETFILTER_XT_TARGET_TPROXY] [NETFILTER_XT_TARGET_TRACE] [NETFILTER_XT_TARGET_SECMARK] [NETFILTER_XT_TARGET_TCPMSS] [NETFILTER_XT_TARGET_TCPOPTSTRIP] [NETFILTER_XT_MATCH_CLUSTER] [NETFILTER_XT_MATCH_COMMENT] [NETFILTER_XT_MATCH_CONNBYTES] [NETFILTER_XT_MATCH_CONNLIMIT] [NETFILTER_XT_MATCH_CONNMARK] [NETFILTER_XT_MATCH_CONNTRACK] [NETFILTER_XT_MATCH_DCCP] [NETFILTER_XT_MATCH_DSCP] [NETFILTER_XT_MATCH_ESP] [NETFILTER_XT_MATCH_HASHLIMIT] [NETFILTER_XT_MATCH_HELPER] [NETFILTER_XT_MATCH_HL] [NETFILTER_XT_MATCH_IPRANGE] [NETFILTER_XT_MATCH_LENGTH] [NETFILTER_XT_MATCH_LIMIT] [NETFILTER_XT_MATCH_MAC] [NETFILTER_XT_MATCH_MARK] [NETFILTER_XT_MATCH_MULTIPORT] [NETFILTER_XT_MATCH_OWNER] [NETFILTER_XT_MATCH_POLICY] [NETFILTER_XT_MATCH_PHYSDEV] [NETFILTER_XT_MATCH_PKTTYPE] [NETFILTER_XT_MATCH_QUOTA] [NETFILTER_XT_MATCH_RATEEST] [NETFILTER_XT_MATCH_REALM] [NETFILTER_XT_MATCH_RECENT] [NETFILTER_XT_MATCH_SCTP] [NETFILTER_XT_MATCH_SOCKET] [NETFILTER_XT_MATCH_STATE] [NETFILTER_XT_MATCH_STATISTIC] [NETFILTER_XT_MATCH_STRING] [NETFILTER_XT_MATCH_TCPMSS] [NETFILTER_XT_MATCH_TIME] [NETFILTER_XT_MATCH_U32] [NETFILTER_XT_MATCH_OSF];
NF_CONNTRACK_IPV4:  [NF_CONNTRACK_PROC_COMPAT];
IP_NF_IPTABLES:  [IP_NF_MATCH_ADDRTYPE] [IP_NF_MATCH_AH] [IP_NF_MATCH_ECN] [IP_NF_MATCH_TTL] [IP_NF_FILTER] [IP_NF_TARGET_LOG] [IP_NF_TARGET_ULOG] [NF_NAT] [IP_NF_MANGLE] [IP_NF_TARGET_TTL] [IP_NF_RAW] [IP_NF_SECURITY];
IP_NF_ARPTABLES:  [IP_NF_ARPFILTER] [IP_NF_ARP_MANGLE];
IP6_NF_IPTABLES:  [IP6_NF_MATCH_AH] [IP6_NF_MATCH_EUI64] [IP6_NF_MATCH_FRAG] [IP6_NF_MATCH_OPTS] [IP6_NF_MATCH_HL] [IP6_NF_MATCH_IPV6HEADER] [IP6_NF_MATCH_MH] [IP6_NF_MATCH_RT] [IP6_NF_TARGET_HL] [IP6_NF_TARGET_LOG] [IP6_NF_FILTER] [IP6_NF_MANGLE] [IP6_NF_RAW] [IP6_NF_SECURITY];
IP_DCCP_CCID3:  [IP_DCCP_CCID3_DEBUG] [IP_DCCP_CCID3_RTO];
COPS:  [COPS_DAYNA] [COPS_TANGENT];
IPDDP:  [IPDDP_ENCAP] [IPDDP_DECAP];
NET_ACT_GACT:  [GACT_PROB];
SCC:  [SCC_DELAY] [SCC_TRXECHO];
CAN_SJA1000:  [CAN_SJA1000_ISA] [CAN_SJA1000_PLATFORM] [CAN_SJA1000_OF_PLATFORM] [CAN_EMS_PCI] [CAN_KVASER_PCI];
CAN_USB_interfaces:  [CAN_EMS_USB];
SIR_Mode: [1, 1] { SIR_BFIN_DMA SIR_BFIN_PIO};
Flash_cmd_query_data_swapping: [1, 1] { MTD_CFI_NOSWAP MTD_CFI_BE_BYTE_SWAP MTD_CFI_LE_BYTE_SWAP};
MTD_CFI_GEOMETRY:  [MTD_MAP_BANK_WIDTH_1] [MTD_MAP_BANK_WIDTH_2] [MTD_MAP_BANK_WIDTH_4] [MTD_MAP_BANK_WIDTH_8] [MTD_MAP_BANK_WIDTH_16] [MTD_MAP_BANK_WIDTH_32] [MTD_CFI_I1] [MTD_CFI_I2] [MTD_CFI_I4] [MTD_CFI_I8];
MTD_PHYSMAP_COMPAT:  [MTD_PHYSMAP_START] [MTD_PHYSMAP_LEN] [MTD_PHYSMAP_BANKWIDTH];
Maximum_mappable_memory_available_for_flash_IO: [1, 1] { MSP_FLASH_MAP_LIMIT_32M};
MTD_NAND_OMAP_PREFETCH:  [MTD_NAND_OMAP_PREFETCH_DMA];
MTD_NAND_BF5XX_HWECC:  [MTD_NAND_BF5XX_BOOTROM_ECC];
MTD_NAND_DISKONCHIP_PROBE_ADVANCED:  [MTD_NAND_DISKONCHIP_PROBE_ADDRESS] [MTD_NAND_DISKONCHIP_PROBE_HIGH];
ECC_management_for_NAND_Flash___SmartMedia_on_AT91___AVR32: [1, 1] { MTD_NAND_ATMEL_ECC_HW MTD_NAND_ATMEL_ECC_SOFT MTD_NAND_ATMEL_ECC_NONE};
MTD_UBI_DEBUG:  [MTD_UBI_DEBUG_MSG] [MTD_UBI_DEBUG_PARANOID] [MTD_UBI_DEBUG_DISABLE_BGT] [MTD_UBI_DEBUG_EMULATE_BITFLIPS] [MTD_UBI_DEBUG_EMULATE_WRITE_FAILURES] [MTD_UBI_DEBUG_EMULATE_ERASE_FAILURES] Additional_UBI_debugging_messages;
MEGARAID_MM:  [MEGARAID_MAILBOX];
DE2104X:  [DE2104X_DSL];
TULIP:  [TULIP_MWI] [TULIP_MMIO] [TULIP_NAPI];
GELIC_WIRELESS:  [GELIC_WIRELESS_OLD_PSK_INTERFACE];
STMMAC_TIMER:  Select_Timer_device;
LIBERTAS:  [LIBERTAS_USB] [LIBERTAS_CS] [LIBERTAS_SDIO] [LIBERTAS_SPI] [LIBERTAS_DEBUG];
LIBERTAS_THINFIRM:  [LIBERTAS_THINFIRM_USB];
ATMEL:  [PCI_ATMEL] [PCMCIA_ATMEL];
RTL8187:  [RTL8187_LEDS];
P54_COMMON:  [P54_USB] [P54_PCI] [P54_SPI] [P54_LEDS];
ATH_COMMON:  [ATH5K] [ATH9K] [AR9170_USB];
IPW2100:  [IPW2100_MONITOR] [IPW2100_DEBUG];
IPW2200:  [IPW2200_MONITOR] [IPW2200_QOS] [IPW2200_DEBUG];
IWLWIFI:  [IWLWIFI_LEDS] [IWLWIFI_SPECTRUM_MEASUREMENT] [IWLWIFI_DEBUG] [IWLAGN] [IWL3945];
HOSTAP:  [HOSTAP_FIRMWARE] [HOSTAP_PLX] [HOSTAP_PCI] [HOSTAP_CS];
B43:  [B43_PCI_AUTOSELECT] [B43_PCICORE_AUTOSELECT] [B43_PCMCIA] [B43_SDIO] [B43_PIO] [B43_NPHY] [B43_PHY_LP] [B43_LEDS] [B43_HWRNG] [B43_DEBUG];
B43LEGACY:  [B43LEGACY_PCI_AUTOSELECT] [B43LEGACY_PCICORE_AUTOSELECT] [B43LEGACY_LEDS] [B43LEGACY_HWRNG] [B43LEGACY_DEBUG] [B43LEGACY_DMA] [B43LEGACY_PIO] Broadcom_43xx_legacy_data_transfer_mode;
ZD1211RW:  [ZD1211RW_DEBUG];
RT2X00:  [RT2400PCI] [RT2500PCI] [RT61PCI] [RT2500USB] [RT73USB] [RT2800USB] [RT2X00_LIB_PCI] [RT2X00_LIB_USB] [RT2X00_LIB] [RT2X00_LIB_HT] [RT2X00_LIB_FIRMWARE] [RT2X00_LIB_CRYPTO] [RT2X00_LIB_LEDS] [RT2X00_LIB_DEBUGFS] [RT2X00_DEBUG];
HERMES:  [HERMES_CACHE_FW_ON_INIT] [APPLE_AIRPORT] [PLX_HERMES] [TMD_HERMES] [NORTEL_HERMES] [PCI_HERMES] [PCMCIA_HERMES] [PCMCIA_SPECTRUM];
WL12XX:  [WL1251] [WL1271];
IWM:  [IWM_DEBUG];
USB_NET_CDC_SUBSET:  [USB_ALI_M5632] [USB_AN2720] [USB_BELKIN] [USB_ARMLINUX] [USB_EPSON2888] [USB_KC2190];
WANXL:  [WANXL_BUILD_FIRMWARE];
PC300:  [PC300_MLPPP];
DSCC4:  [DSCC4_PCISYNC] [DSCC4_PCI_RST];
CYCLADES_SYNC:  [CYCLOMX_X25];
ATM_ENI_TUNE_BURST:  [ATM_ENI_BURST_TX_16W] [ATM_ENI_BURST_TX_8W] [ATM_ENI_BURST_TX_4W] [ATM_ENI_BURST_TX_2W] [ATM_ENI_BURST_RX_16W] [ATM_ENI_BURST_RX_8W] [ATM_ENI_BURST_RX_4W] [ATM_ENI_BURST_RX_2W];
HISAX_EURO:  [DE_AOC] [HISAX_NO_SENDCOMPLETE] [HISAX_NO_LLC] [HISAX_NO_KEYPAD];
ISDN_CAPI_CAPIFS_BOOL:  [ISDN_CAPI_CAPIFS];
ISDN_DRV_AVMB1_B1PCI:  [ISDN_DRV_AVMB1_B1PCIV4];
ISDN_DRV_AVMB1_B1PCMCIA:  [ISDN_DRV_AVMB1_AVM_CS];
ISDN_DIVAS:  [ISDN_DIVAS_BRIPCI] [ISDN_DIVAS_PRIPCI] [ISDN_DIVAS_DIVACAPI] [ISDN_DIVAS_USERIDI] [ISDN_DIVAS_MAINT];
KEYBOARD_ATKBD:  [KEYBOARD_ATKBD_HP_KEYCODES];
KEYBOARD_TOSA:  [KEYBOARD_TOSA_USE_EXT_KEYCODES];
MOUSE_PS2:  [MOUSE_PS2_ALPS] [MOUSE_PS2_LOGIPS2PP] [MOUSE_PS2_SYNAPTICS] [MOUSE_PS2_LIFEBOOK] [MOUSE_PS2_TRACKPOINT] [MOUSE_PS2_ELANTECH] [MOUSE_PS2_SENTELIC] [MOUSE_PS2_TOUCHKIT] [MOUSE_PS2_OLPC];
MOUSE_INPORT:  [MOUSE_ATIXL];
JOYSTICK_IFORCE:  [JOYSTICK_IFORCE_USB] [JOYSTICK_IFORCE_232];
JOYSTICK_XPAD:  [JOYSTICK_XPAD_FF] [JOYSTICK_XPAD_LEDS];
TOUCHSCREEN_WM97XX:  [TOUCHSCREEN_WM9705] [TOUCHSCREEN_WM9712] [TOUCHSCREEN_WM9713] [TOUCHSCREEN_WM97XX_ATMEL] [TOUCHSCREEN_WM97XX_MAINSTONE] [TOUCHSCREEN_WM97XX_ZYLONITE];
TOUCHSCREEN_USB_COMPOSITE:  [TOUCHSCREEN_USB_EGALAX] [TOUCHSCREEN_USB_PANJIT] [TOUCHSCREEN_USB_3M] [TOUCHSCREEN_USB_ITM] [TOUCHSCREEN_USB_ETURBO] [TOUCHSCREEN_USB_GUNZE] [TOUCHSCREEN_USB_DMC_TSC10] [TOUCHSCREEN_USB_IRTOUCH] [TOUCHSCREEN_USB_IDEALTEK] [TOUCHSCREEN_USB_GENERAL_TOUCH] [TOUCHSCREEN_USB_GOTOP] [TOUCHSCREEN_USB_JASTEC] [TOUCHSCREEN_USB_E2I];
HP_SDC:  [HIL_MLC];
SERIAL_8250_MANY_PORTS:  [SERIAL_8250_FOURPORT] [SERIAL_8250_ACCENT] [SERIAL_8250_BOCA] [SERIAL_8250_EXAR_ST16C554] [SERIAL_8250_HUB6];
UART_Mode: [1, 1] { SERIAL_BFIN_DMA SERIAL_BFIN_PIO};
SERIAL_BFIN_UART0:  [BFIN_UART0_CTSRTS];
SERIAL_BFIN_UART1:  [BFIN_UART1_CTSRTS];
SERIAL_BFIN_UART2:  [BFIN_UART2_CTSRTS];
SERIAL_BFIN_UART3:  [BFIN_UART3_CTSRTS];
SERIAL_MPC52xx_CONSOLE:  [SERIAL_MPC52xx_CONSOLE_BAUD];
Baud_rate_for_Blackfin_SPORT_UART: [1, 1] { SERIAL_SPORT_BAUD_RATE_115200 SERIAL_SPORT_BAUD_RATE_57600 SERIAL_SPORT_BAUD_RATE_38400 SERIAL_SPORT_BAUD_RATE_19200 SERIAL_SPORT_BAUD_RATE_9600};
Encoders_decoders_and_other_helper_chips
VIDEO_ZORAN_ZR36060:  [VIDEO_ZORAN_BUZ] [VIDEO_ZORAN_DC10] [VIDEO_ZORAN_LML33] [VIDEO_ZORAN_LML33R10] [VIDEO_ZORAN_AVS6EYES];
USB_VIDEO_CLASS:  [USB_VIDEO_CLASS_INPUT_EVDEV];
USB_GSPCA:  [USB_M5602] [USB_STV06XX] [USB_GL860] [USB_GSPCA_CONEX] [USB_GSPCA_ETOMS] [USB_GSPCA_FINEPIX] [USB_GSPCA_JEILINJ] [USB_GSPCA_MARS] [USB_GSPCA_MR97310A] [USB_GSPCA_OV519] [USB_GSPCA_OV534] [USB_GSPCA_PAC207] [USB_GSPCA_PAC7311] [USB_GSPCA_SN9C20X] [USB_GSPCA_SONIXB] [USB_GSPCA_SONIXJ] [USB_GSPCA_SPCA500] [USB_GSPCA_SPCA501] [USB_GSPCA_SPCA505] [USB_GSPCA_SPCA506] [USB_GSPCA_SPCA508] [USB_GSPCA_SPCA561] [USB_GSPCA_SQ905] [USB_GSPCA_SQ905C] [USB_GSPCA_STK014] [USB_GSPCA_SUNPLUS] [USB_GSPCA_T613] [USB_GSPCA_TV8532] [USB_GSPCA_VC032X] [USB_GSPCA_ZC3XX];
VIDEO_PVRUSB2:  [VIDEO_PVRUSB2_SYSFS] [VIDEO_PVRUSB2_DVB];
VIDEO_EM28XX:  [VIDEO_EM28XX_ALSA] [VIDEO_EM28XX_DVB];
VIDEO_CX231XX:  [VIDEO_CX231XX_ALSA] [VIDEO_CX231XX_DVB];
VIDEO_OVCAMCHIP:  [USB_W9968CF];
USB_PWC:  [USB_PWC_DEBUG];
DVB_USB_DIBUSB_MB:  [DVB_USB_DIBUSB_MB_FAULTY];
DVB_USB_AF9005:  [DVB_USB_AF9005_REMOTE];
Siano_module_components:  [SMS_USB_DRV] [SMS_SDIO_DRV];
Customise_DVB_Frontends:  [DVB_STB0899] [DVB_STB6100] [DVB_STV090x] [DVB_STV6110x] [DVB_CX24110] [DVB_CX24123] [DVB_MT312] [DVB_ZL10036] [DVB_ZL10039] [DVB_S5H1420] [DVB_STV0288] [DVB_STB6000] [DVB_STV0299] [DVB_STV6110] [DVB_STV0900] [DVB_TDA8083] [DVB_TDA10086] [DVB_TDA8261] [DVB_VES1X93] [DVB_TUNER_ITD1000] [DVB_TUNER_CX24113] [DVB_TDA826X] [DVB_TUA6100] [DVB_CX24116] [DVB_SI21XX] [DVB_SP8870] [DVB_SP887X] [DVB_CX22700] [DVB_CX22702] [DVB_DRX397XD] [DVB_L64781] [DVB_TDA1004X] [DVB_NXT6000] [DVB_MT352] [DVB_ZL10353] [DVB_DIB3000MB] [DVB_DIB3000MC] [DVB_DIB7000M] [DVB_DIB7000P] [DVB_TDA10048] [DVB_AF9013] [DVB_VES1820] [DVB_TDA10021] [DVB_TDA10023] [DVB_STV0297] [DVB_NXT200X] [DVB_OR51211] [DVB_OR51132] [DVB_BCM3510] [DVB_LGDT330X] [DVB_LGDT3304] [DVB_LGDT3305] [DVB_S5H1409] [DVB_AU8522] [DVB_S5H1411] [DVB_S921] [DVB_DIB8000] [DVB_PLL] [DVB_TUNER_DIB0070] [DVB_LNBP21] [DVB_ISL6405] [DVB_ISL6421] [DVB_ISL6423] [DVB_LGS8GL5] [DVB_LGS8GXX] [DVB_DUMMY_FE];
DRM_I915:  [DRM_I915_KMS];
Choice_endianness_support: [1, 1] { FB_BOTH_ENDIAN FB_BIG_ENDIAN FB_LITTLE_ENDIAN};
LCD_Panel: [1, 1] { FB_ARMCLCD_SHARP_LQ035Q7DB02_HRTFT FB_ARMCLCD_SHARP_LQ057Q3DC02 FB_ARMCLCD_SHARP_LQ64D343 FB_ARMCLCD_SHARP_LQ10D368 FB_ARMCLCD_SHARP_LQ121S1DG41 FB_ARMCLCD_AUO_A070VW01_WIDE FB_ARMCLCD_HITACHI};
FB_I810_GTF:  [FB_I810_I2C];
FB_MATROX_I2C:  [FB_MATROX_MAVEN];
FB_ATY_CT:  [FB_ATY_GENERIC_LCD];
DRAM_timing: [1, 1] { FB_CARMINE_DRAM_EVAL CARMINE_DRAM_CUSTOM};
VGACON_SOFT_SCROLLBACK:  [VGACON_SOFT_SCROLLBACK_SIZE];
SND_AC97_POWER_SAVE:  [SND_AC97_POWER_SAVE_DEFAULT];
SND_SBAWE:  [SND_SB16_CSP];
SND_BT87X:  [SND_BT87X_OVERCLOCK];
SND_CS46XX:  [SND_CS46XX_NEW_DSP];
SND_FM801:  [SND_FM801_TEA575X_BOOL];
SND_HDA_INTEL:  [SND_HDA_HWDEP] [SND_HDA_INPUT_BEEP] [SND_HDA_INPUT_JACK] [SND_HDA_PATCH_LOADER] [SND_HDA_CODEC_REALTEK] [SND_HDA_CODEC_ANALOG] [SND_HDA_CODEC_SIGMATEL] [SND_HDA_CODEC_VIA] [SND_HDA_CODEC_ATIHDMI] [SND_HDA_CODEC_NVHDMI] [SND_HDA_CODEC_INTELHDMI] [SND_HDA_CODEC_CIRRUS] [SND_HDA_CODEC_CONEXANT] [SND_HDA_CODEC_CA0110] [SND_HDA_CODEC_CMEDIA] [SND_HDA_CODEC_SI3054] [SND_HDA_GENERIC] [SND_HDA_POWER_SAVE];
SND_POWERMAC:  [SND_POWERMAC_AUTO_DRC];
SND_PS3:  [SND_PS3_DEFAULT_START_DELAY];
SND_AOA_SOUNDBUS:  [SND_AOA_SOUNDBUS_I2S];
SND_AT73C213:  [SND_AT73C213_TARGET_BITRATE];
SND_USB_CAIAQ:  [SND_USB_CAIAQ_INPUT];
SND_ATMEL_SOC:  [SND_ATMEL_SOC_SSC] [SND_AT91_SOC_SAM9G20_WM8731] [SND_AT32_SOC_PLAYPAQ] [SND_AT91_SOC_AFEB9260];
SND_BF5XX_I2S:  [SND_BF5XX_SOC_SSM2602] [SND_BF5XX_SOC_AD73311];
SND_BF5XX_TDM:  [SND_BF5XX_SOC_AD1836] [SND_BF5XX_SOC_AD1938];
SND_BF5XX_AC97:  [SND_BF5XX_MMAP_SUPPORT] [SND_BF5XX_MULTICHAN_SUPPORT] [SND_BF5XX_HAVE_COLD_RESET] [SND_BF5XX_SOC_AD1980];
SoC_Audio_support_for_SuperH:  [SND_SOC_PCM_SH7760] [SND_SOC_SH4_HAC] [SND_SOC_SH4_SSI] [SND_SOC_SH4_FSI] [SND_SH7760_AC97] [SND_FSI_AK4642];
MSNDPIN_NONPNP:  [MSNDPIN_CFG] [MSNDPIN_MPU_IO] [MSNDPIN_MPU_IRQ] [MSNDPIN_IDE_IO0] [MSNDPIN_IDE_IO1] [MSNDPIN_IDE_IRQ] [MSNDPIN_JOYSTICK_IO];
SOUND_TRIX:  [TRIX_HAVE_BOOT];
SOUND_PAS:  [PAS_JOYSTICK];
SOUND_PSS:  [PSS_MIXER] [PSS_HAVE_BOOT];
SOUND_AEDSP16:  [SC6600];
USB_GADGET_AT91:  [USB_AT91];
USB_GADGET_ATMEL_USBA:  [USB_ATMEL_USBA];
USB_GADGET_FSL_USB2:  [USB_FSL_USB2];
USB_GADGET_LH7A40X:  [USB_LH7A40X];
USB_GADGET_OMAP:  [USB_OMAP]    ;
USB_GADGET_PXA25X:  [USB_PXA25X] [USB_PXA25X_SMALL];
USB_GADGET_R8A66597:  [USB_R8A66597];
USB_GADGET_PXA27X:  [USB_PXA27X];
USB_GADGET_S3C_HSOTG:  [USB_S3C_HSOTG];
USB_GADGET_IMX:  [USB_IMX];
USB_GADGET_S3C2410:  [USB_S3C2410] [USB_S3C2410_DEBUG];
USB_GADGET_M66592:  [USB_M66592];
USB_GADGET_AMD5536UDC:  [USB_AMD5536UDC];
USB_GADGET_FSL_QE:  [USB_FSL_QE];
USB_GADGET_CI13XXX:  [USB_CI13XXX];
USB_GADGET_NET2280:  [USB_NET2280];
USB_GADGET_GOKU:  [USB_GOKU];
USB_GADGET_LANGWELL:  [USB_LANGWELL];
USB_GADGET_DUMMY_HCD:  [USB_DUMMY_HCD];
USB_ZERO:  [USB_ZERO_HNPTEST];
USB_ETH:  [USB_ETH_RNDIS] [USB_ETH_EEM];
USB_FILE_STORAGE:  [USB_FILE_STORAGE_TEST];
VIDEO_GO7007_USB:  [VIDEO_GO7007_USB_S2250_BOARD];
PANEL_PROFILE:  [PANEL_KEYPAD] [PANEL_LCD];
PANEL_CHANGE_MESSAGE:  [PANEL_BOOT_MESSAGE];
ANDROID:  [ANDROID_BINDER_IPC] [ANDROID_LOGGER] [ANDROID_RAM_CONSOLE] [ANDROID_TIMED_OUTPUT] [ANDROID_LOW_MEMORY_KILLER];
MSM_ONCRPCROUTER:  [MSM_RPCSERVERS];
IIO_RING_BUFFER:  [IIO_SW_RING];
JFFS2_default_compression_mode: [1, 1] { JFFS2_CMODE_NONE JFFS2_CMODE_PRIORITY JFFS2_CMODE_SIZE JFFS2_CMODE_FAVOURLZO};
NETFILTER_XT_MATCH_RECENT:  [NETFILTER_XT_MATCH_RECENT_PROC_COMPAT];
IP_NF_FILTER:  [IP_NF_TARGET_REJECT];
NF_NAT:  [NF_NAT_NEEDED] [IP_NF_TARGET_MASQUERADE] [IP_NF_TARGET_NETMAP] [IP_NF_TARGET_REDIRECT] [NF_NAT_SNMP_BASIC] [NF_NAT_PROTO_DCCP] [NF_NAT_PROTO_GRE] [NF_NAT_PROTO_UDPLITE] [NF_NAT_PROTO_SCTP] [NF_NAT_FTP] [NF_NAT_IRC] [NF_NAT_TFTP] [NF_NAT_AMANDA] [NF_NAT_PPTP] [NF_NAT_H323] [NF_NAT_SIP];
IP_NF_MANGLE:  [IP_NF_TARGET_CLUSTERIP] [IP_NF_TARGET_ECN];
IP6_NF_FILTER:  [IP6_NF_TARGET_REJECT];
Additional_UBI_debugging_messages:  [MTD_UBI_DEBUG_MSG_BLD] [MTD_UBI_DEBUG_MSG_EBA] [MTD_UBI_DEBUG_MSG_WL] [MTD_UBI_DEBUG_MSG_IO];
TULIP_NAPI:  [TULIP_NAPI_HW_MITIGATION];
Select_Timer_device: [1, 1] { STMMAC_TMU_TIMER STMMAC_RTC_TIMER};
ATH5K:  [ATH5K_DEBUG];
ATH9K:  [ATH9K_DEBUG];
AR9170_USB:  [AR9170_LEDS];
IPW2200_MONITOR:  [IPW2200_RADIOTAP] [IPW2200_PROMISCUOUS];
IWLWIFI_DEBUG:  [IWLWIFI_DEBUGFS];
IWLAGN:  [IWL4965] [IWL5000];
IWL3945:  [IWL3945_SPECTRUM_MEASUREMENT];
HOSTAP_FIRMWARE:  [HOSTAP_FIRMWARE_NVRAM];
B43_DEBUG:  [B43_FORCE_PIO];
Broadcom_43xx_legacy_data_transfer_mode: [1, 1] { B43LEGACY_DMA_AND_PIO_MODE B43LEGACY_DMA_MODE B43LEGACY_PIO_MODE};
WL1251:  [WL1251_SPI] [WL1251_SDIO];
KEYBOARD_ATKBD_HP_KEYCODES:  [KEYBOARD_ATKBD_RDI_KEYCODES];
BFIN_UART0_CTSRTS:  [UART0_CTS_PIN] [UART0_RTS_PIN];
BFIN_UART1_CTSRTS:  [UART1_CTS_PIN] [UART1_RTS_PIN];
BFIN_UART2_CTSRTS:  [UART2_CTS_PIN] [UART2_RTS_PIN];
BFIN_UART3_CTSRTS:  [UART3_CTS_PIN] [UART3_RTS_PIN];
USB_GSPCA_SN9C20X:  [USB_GSPCA_SN9C20X_EVDEV];
SND_FM801_TEA575X_BOOL:  [SND_FM801_TEA575X];
SND_HDA_HWDEP:  [SND_HDA_RECONFIG];
SND_HDA_CODEC_INTELHDMI:  [SND_HDA_ELD];
SND_HDA_POWER_SAVE:  [SND_HDA_POWER_SAVE_DEFAULT];
SND_AT32_SOC_PLAYPAQ:  [SND_AT32_SOC_PLAYPAQ_SLAVE];
SND_BF5XX_SOC_AD73311:  [SND_BFIN_AD73311_SE];
SND_BF5XX_HAVE_COLD_RESET:  [SND_BF5XX_RESET_GPIO_NUM];
TRIX_HAVE_BOOT:  [TRIX_BOOT_FILE];
PSS_HAVE_BOOT:  [PSS_BOOT_FILE];
SC6600:  [SC6600_JOY] [SC6600_CDROM] [SC6600_CDROMBASE];
PANEL_LCD:  [PANEL_LCD_HEIGHT] [PANEL_LCD_WIDTH] [PANEL_LCD_BWIDTH] [PANEL_LCD_HWIDTH] [PANEL_LCD_CHARSET] [PANEL_LCD_PROTO] [PANEL_LCD_PIN_BL];
ANDROID_RAM_CONSOLE:  [ANDROID_RAM_CONSOLE_ENABLE_VERBOSE] [ANDROID_RAM_CONSOLE_ERROR_CORRECTION] [ANDROID_RAM_CONSOLE_EARLY_INIT];
ANDROID_TIMED_OUTPUT:  [ANDROID_TIMED_GPIO];
PANEL_LCD_PROTO:  [PANEL_LCD_PIN_E] [PANEL_LCD_PIN_RS] [PANEL_LCD_PIN_RW] [PANEL_LCD_PIN_SCL] [PANEL_LCD_PIN_SDA];
ANDROID_RAM_CONSOLE_ERROR_CORRECTION:  [ANDROID_RAM_CONSOLE_ERROR_CORRECTION_DATA_SIZE] [ANDROID_RAM_CONSOLE_ERROR_CORRECTION_ECC_SIZE] [ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE] [ANDROID_RAM_CONSOLE_ERROR_CORRECTION_POLYNOMIAL];
ANDROID_RAM_CONSOLE_EARLY_INIT:  [ANDROID_RAM_CONSOLE_EARLY_ADDR] [ANDROID_RAM_CONSOLE_EARLY_SIZE];

%Constraints
ARCH || (c64BIT => ARCH)
X86_32 => ~c64BIT
~c64BIT => X86_32
X86_64 => c64BIT
c64BIT => X86_64
X86
~OUTPUT_FORMAT
~ARCH_DEFCONFIG
GENERIC_TIME
GENERIC_CMOS_UPDATE
CLOCKSOURCE_WATCHDOG
GENERIC_CLOCKEVENTS
GENERIC_CLOCKEVENTS_BROADCAST => (X86_64 || (X86_32 && X86_LOCAL_APIC))
(X86_64 || (X86_32 && X86_LOCAL_APIC)) => GENERIC_CLOCKEVENTS_BROADCAST
LOCKDEP_SUPPORT
STACKTRACE_SUPPORT
HAVE_LATENCYTOP_SUPPORT
MMU
ZONE_DMA
~SBUS
GENERIC_ISA_DMA
GENERIC_IOMAP
GENERIC_BUG => BUG
BUG => GENERIC_BUG
GENERIC_BUG_RELATIVE_POINTERS => (GENERIC_BUG && (BUG && X86_64))
(GENERIC_BUG && (BUG && X86_64)) => GENERIC_BUG_RELATIVE_POINTERS
GENERIC_HWEIGHT
GENERIC_GPIO => (GPIOLIB && (ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB))
(GPIOLIB && (ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB)) => GENERIC_GPIO
ARCH_MAY_HAVE_PC_FDC
RWSEM_GENERIC_SPINLOCK => ~X86_XADD
~X86_XADD => RWSEM_GENERIC_SPINLOCK
RWSEM_XCHGADD_ALGORITHM => X86_XADD
X86_XADD => RWSEM_XCHGADD_ALGORITHM
ARCH_HAS_CPU_IDLE_WAIT
GENERIC_CALIBRATE_DELAY
GENERIC_TIME_VSYSCALL => X86_64
X86_64 => GENERIC_TIME_VSYSCALL
ARCH_HAS_CPU_RELAX
ARCH_HAS_DEFAULT_IDLE
ARCH_HAS_CACHE_LINE_SIZE
HAVE_SETUP_PER_CPU_AREA
NEED_PER_CPU_EMBED_FIRST_CHUNK
NEED_PER_CPU_PAGE_FIRST_CHUNK
HAVE_CPUMASK_OF_CPU_MAP => X86_64_SMP
X86_64_SMP => HAVE_CPUMASK_OF_CPU_MAP
ARCH_HIBERNATION_POSSIBLE
ARCH_SUSPEND_POSSIBLE
ZONE_DMA32 => X86_64
X86_64 => ZONE_DMA32
ARCH_POPULATES_NODE_MAP
AUDIT_ARCH => X86_64
X86_64 => AUDIT_ARCH
ARCH_SUPPORTS_OPTIMIZED_INLINING
ARCH_SUPPORTS_DEBUG_PAGEALLOC
HAVE_INTEL_TXT => (EXPERIMENTAL && (DMAR && ACPI))
(EXPERIMENTAL && (DMAR && ACPI)) => HAVE_INTEL_TXT
GENERIC_HARDIRQS
GENERIC_HARDIRQS_NO__DO_IRQ
GENERIC_IRQ_PROBE
GENERIC_PENDING_IRQ => (GENERIC_HARDIRQS && SMP)
(GENERIC_HARDIRQS && SMP) => GENERIC_PENDING_IRQ
USE_GENERIC_SMP_HELPERS1 => SMP
SMP => USE_GENERIC_SMP_HELPERS1
X86_32_SMP => (X86_32 && SMP)
(X86_32 && SMP) => X86_32_SMP
X86_64_SMP => (X86_64 && SMP)
(X86_64 && SMP) => X86_64_SMP
X86_HT => SMP
SMP => X86_HT
X86_TRAMPOLINE => (SMP || (c64BIT && ACPI_SLEEP))
(SMP || (c64BIT && ACPI_SLEEP)) => X86_TRAMPOLINE
X86_32_LAZY_GS => (X86_32 && ~CC_STACKPROTECTOR)
(X86_32 && ~CC_STACKPROTECTOR) => X86_32_LAZY_GS
KTIME_SCALAR => X86_32
X86_32 => KTIME_SCALAR
~ARCH
~KERNELVERSION
~DEFCONFIG_LIST
CONSTRUCTORS => ~UML
~UML => CONSTRUCTORS
~BROKEN
BROKEN_ON_SMP => (BROKEN || ~SMP)
(BROKEN || ~SMP) => BROKEN_ON_SMP
LOCK_KERNEL => (SMP || PREEMPT)
(SMP || PREEMPT) => LOCK_KERNEL
~INIT_ENV_ARG_LIMIT
HAVE_KERNEL_GZIP => X86
X86 => HAVE_KERNEL_GZIP
HAVE_KERNEL_BZIP2 => X86
X86 => HAVE_KERNEL_BZIP2
HAVE_KERNEL_LZMA => X86
X86 => HAVE_KERNEL_LZMA
HAVE_KERNEL_GZIP || ~KERNEL_GZIP
HAVE_KERNEL_BZIP2 || ~KERNEL_BZIP2
HAVE_KERNEL_LZMA || ~KERNEL_LZMA
HAVE_KERNEL_GZIP || (HAVE_KERNEL_BZIP2 || HAVE_KERNEL_LZMA)
(MMU && BLOCK) || (SWAP => (MMU && BLOCK))
(MMU && BLOCK) || ((MMU && BLOCK) => SWAP)
SYSVIPC_SYSCTL => (SYSVIPC && SYSCTL)
(SYSVIPC && SYSCTL) => SYSVIPC_SYSCTL
POSIX_MQUEUE_SYSCTL => (POSIX_MQUEUE && SYSCTL)
(POSIX_MQUEUE && SYSCTL) => POSIX_MQUEUE_SYSCTL
(NET && EXPERIMENTAL) || ~POSIX_MQUEUE
BSD_PROCESS_ACCT || ~BSD_PROCESS_ACCT_V3
TASKSTATS || ~TASK_DELAY_ACCT
TASK_XACCT || ~TASK_IO_ACCOUNTING
TASKSTATS || ~TASK_XACCT
NET || ~TASKSTATS
AUDIT_TREE => AUDITSYSCALL
AUDITSYSCALL => AUDIT_TREE
(AUDIT && (X86 || (PPC || (S390 || (IA64 || (UML || (SPARC64 || SUPERH))))))) || (AUDITSYSCALL => (AUDIT && ((X86 || (PPC || (S390 || (IA64 || (UML || (SPARC64 || SUPERH)))))) && SECURITY_SELINUX)))
(AUDIT && (X86 || (PPC || (S390 || (IA64 || (UML || (SPARC64 || SUPERH))))))) || ((AUDIT && ((X86 || (PPC || (S390 || (IA64 || (UML || (SPARC64 || SUPERH)))))) && SECURITY_SELINUX)) => AUDITSYSCALL)
NET || ~AUDIT
PREEMPT || ~TREE_PREEMPT_RCU
(TREE_RCU || TREE_PREEMPT_RCU) || ~RCU_TRACE
(TREE_RCU || TREE_PREEMPT_RCU) || ~RCU_FANOUT
(TREE_RCU || TREE_PREEMPT_RCU) || ~RCU_FANOUT_EXACT
TREE_RCU_TRACE => (RCU_TRACE && (TREE_RCU || TREE_PREEMPT_RCU))
(RCU_TRACE && (TREE_RCU || TREE_PREEMPT_RCU)) => TREE_RCU_TRACE
(IKCONFIG && PROC_FS) || ~IKCONFIG_PROC
HAVE_UNSTABLE_SCHED_CLOCK => X86
X86 => HAVE_UNSTABLE_SCHED_CLOCK
GROUP_SCHED || (FAIR_GROUP_SCHED => (GROUP_SCHED && GROUP_SCHED))
GROUP_SCHED || ((GROUP_SCHED && GROUP_SCHED) => FAIR_GROUP_SCHED)
(EXPERIMENTAL && GROUP_SCHED) || ~RT_GROUP_SCHED
CGROUPS || ~CGROUP_SCHED
GROUP_SCHED
EXPERIMENTAL || ~GROUP_SCHED
CGROUPS || ~CGROUP_DEBUG
CGROUPS || ~CGROUP_NS
CGROUPS || ~CGROUP_FREEZER
(CGROUPS && EXPERIMENTAL) || ~CGROUP_DEVICE
(CGROUPS && CPUSETS) || (PROC_PID_CPUSET => (CGROUPS && CPUSETS))
(CGROUPS && CPUSETS) || ((CGROUPS && CPUSETS) => PROC_PID_CPUSET)
CGROUPS || ~CPUSETS
CGROUPS || ~CGROUP_CPUACCT
(CGROUPS && (CGROUP_MEM_RES_CTLR && (SWAP && EXPERIMENTAL))) || ~CGROUP_MEM_RES_CTLR_SWAP
(CGROUPS && RESOURCE_COUNTERS) || ~CGROUP_MEM_RES_CTLR
CGROUPS || ~RESOURCE_COUNTERS
MM_OWNER => (CGROUP_MEM_RES_CTLR && (CGROUPS && RESOURCE_COUNTERS))
(CGROUP_MEM_RES_CTLR && (CGROUPS && RESOURCE_COUNTERS)) => MM_OWNER
SYSFS_DEPRECATED => (SYSFS_DEPRECATED_V2 && SYSFS)
(SYSFS_DEPRECATED_V2 && SYSFS) => SYSFS_DEPRECATED
SYSFS || ~SYSFS_DEPRECATED_V2
NAMESPACES || ~UTS_NS
(NAMESPACES && (SYSVIPC || POSIX_MQUEUE)) || ~IPC_NS
(NAMESPACES && EXPERIMENTAL) || ~USER_NS
(NAMESPACES && EXPERIMENTAL) || ~PID_NS
(NAMESPACES && (EXPERIMENTAL && NET)) || ~NET_NS
EMBEDDED || (NAMESPACES => ~EMBEDDED)
EMBEDDED || (~EMBEDDED => NAMESPACES)
(BLK_DEV_INITRD && INITRAMFS_SOURCE) || ~INITRAMFS_ROOT_UID
(BLK_DEV_INITRD && INITRAMFS_SOURCE) || ~INITRAMFS_ROOT_GID
BLK_DEV_INITRD || ~INITRAMFS_SOURCE
(BLK_DEV_INITRD && EMBEDDED) || (RD_GZIP => BLK_DEV_INITRD)
(BLK_DEV_INITRD && EMBEDDED) || (BLK_DEV_INITRD => RD_GZIP)
(BLK_DEV_INITRD && EMBEDDED) || (RD_BZIP2 => (BLK_DEV_INITRD && ~EMBEDDED))
(BLK_DEV_INITRD && EMBEDDED) || ((BLK_DEV_INITRD && ~EMBEDDED) => RD_BZIP2)
(BLK_DEV_INITRD && EMBEDDED) || (RD_LZMA => (BLK_DEV_INITRD && ~EMBEDDED))
(BLK_DEV_INITRD && EMBEDDED) || ((BLK_DEV_INITRD && ~EMBEDDED) => RD_LZMA)
RD_GZIP || ~INITRAMFS_COMPRESSION_GZIP
RD_BZIP2 || ~INITRAMFS_COMPRESSION_BZIP2
RD_LZMA || ~INITRAMFS_COMPRESSION_LZMA
BLK_DEV_INITRD && INITRAMFS_SOURCE
(BROKEN || ~FRV) || ~BLK_DEV_INITRD
SYSCTL => (SYSCTL_SYSCALL || (PROC_SYSCTL && PROC_FS))
SYSCTL_SYSCALL => SYSCTL
(PROC_SYSCTL && PROC_FS) => SYSCTL
ANON_INODES => (((((EPOLL || TIMERFD) || (PERF_EVENTS && HAVE_PERF_EVENTS)) || (KVM && (VIRTUALIZATION && (HAVE_KVM && PCI)))) || EVENTFD) || SIGNALFD)
EPOLL => ANON_INODES
TIMERFD => ANON_INODES
(PERF_EVENTS && HAVE_PERF_EVENTS) => ANON_INODES
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => ANON_INODES
EVENTFD => ANON_INODES
SIGNALFD => ANON_INODES
((ARM || (BLACKFIN || (CRIS || (FRV || (H8300 || (X86_32 || (M68K || ((S390 && ~c64BIT) || (SUPERH || (SPARC32 || ((SPARC64 && COMPAT) || (UML || (X86_64 && IA32_EMULATION))))))))))))) && EMBEDDED) || (UID16 => (ARM || (BLACKFIN || (CRIS || (FRV || (H8300 || (X86_32 || (M68K || ((S390 && ~c64BIT) || (SUPERH || (SPARC32 || ((SPARC64 && COMPAT) || (UML || (X86_64 && IA32_EMULATION))))))))))))))
((ARM || (BLACKFIN || (CRIS || (FRV || (H8300 || (X86_32 || (M68K || ((S390 && ~c64BIT) || (SUPERH || (SPARC32 || ((SPARC64 && COMPAT) || (UML || (X86_64 && IA32_EMULATION))))))))))))) && EMBEDDED) || ((ARM || (BLACKFIN || (CRIS || (FRV || (H8300 || (X86_32 || (M68K || ((S390 && ~c64BIT) || (SUPERH || (SPARC32 || ((SPARC64 && COMPAT) || (UML || (X86_64 && IA32_EMULATION))))))))))))) => UID16)
EMBEDDED || SYSCTL_SYSCALL
(DEBUG_KERNEL && KALLSYMS) || (KALLSYMS_ALL => ((((MTD_UBI_DEBUG && (MTD && (SYSFS && MTD_UBI))) || (UBIFS_FS_DEBUG && (MISC_FILESYSTEMS && UBIFS_FS))) || (LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))) || (LATENCYTOP && HAVE_LATENCYTOP_SUPPORT)))
(DEBUG_KERNEL && KALLSYMS) || ((MTD_UBI_DEBUG && (MTD && (SYSFS && MTD_UBI))) => KALLSYMS_ALL)
(DEBUG_KERNEL && KALLSYMS) || ((UBIFS_FS_DEBUG && (MISC_FILESYSTEMS && UBIFS_FS)) => KALLSYMS_ALL)
(DEBUG_KERNEL && KALLSYMS) || ((LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => KALLSYMS_ALL)
(DEBUG_KERNEL && KALLSYMS) || ((LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) => KALLSYMS_ALL)
KALLSYMS || ~KALLSYMS_EXTRA_PASS
EMBEDDED || ((FTRACE_SYSCALLS && (TRACING_SUPPORT && (FTRACE && HAVE_SYSCALL_TRACEPOINTS))) => KALLSYMS)
EMBEDDED || ((STACK_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => KALLSYMS)
EMBEDDED || ((DEBUG_KMEMLEAK && (DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && (X86 || (ARM || (PPC || S390))))))) => KALLSYMS)
EMBEDDED || ((FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => KALLSYMS)
EMBEDDED || ((LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => KALLSYMS)
EMBEDDED || ((LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) => KALLSYMS)
EMBEDDED || KALLSYMS
EMBEDDED || HOTPLUG
EMBEDDED || PRINTK
EMBEDDED || BUG
EMBEDDED || ELF_CORE
((ALPHA || (X86 || (MIPS || (PPC_PREP || (PPC_CHRP || PPC_PSERIES))))) && EMBEDDED) || (PCSPKR_PLATFORM => (ALPHA || (X86 || (MIPS || (PPC_PREP || (PPC_CHRP || PPC_PSERIES))))))
((ALPHA || (X86 || (MIPS || (PPC_PREP || (PPC_CHRP || PPC_PSERIES))))) && EMBEDDED) || ((ALPHA || (X86 || (MIPS || (PPC_PREP || (PPC_CHRP || PPC_PSERIES))))) => PCSPKR_PLATFORM)
EMBEDDED || BASE_FULL
EMBEDDED || FUTEX
EMBEDDED || EPOLL
EMBEDDED || SIGNALFD
EMBEDDED || TIMERFD
EMBEDDED || (HAVE_KVM_EVENTFD => EVENTFD)
EMBEDDED || EVENTFD
(MMU && EMBEDDED) || (SHMEM => ((DRM_I915 && AGP_INTEL) || MMU))
(MMU && EMBEDDED) || ((DRM_I915 && AGP_INTEL) => SHMEM)
(MMU && EMBEDDED) || (MMU => SHMEM)
EMBEDDED || AIO
HAVE_PERF_EVENTS => (X86 && (~M386 && ~M486))
(X86 && (~M386 && ~M486)) => HAVE_PERF_EVENTS
PERF_USE_VMALLOC => (DEBUG_PERF_USE_VMALLOC && (PERF_EVENTS && DEBUG_KERNEL))
(DEBUG_PERF_USE_VMALLOC && (PERF_EVENTS && DEBUG_KERNEL)) => PERF_USE_VMALLOC
(PERF_EVENTS && EVENT_TRACING) || (EVENT_PROFILE => (PERF_EVENTS && EVENT_TRACING))
(PERF_EVENTS && EVENT_TRACING) || ((PERF_EVENTS && EVENT_TRACING) => EVENT_PROFILE)
HAVE_PERF_EVENTS || (PERF_EVENTS => (HAVE_PERF_EVENTS && (PROFILING || PERF_COUNTERS)))
HAVE_PERF_EVENTS || ((HAVE_PERF_EVENTS && (PROFILING || PERF_COUNTERS)) => PERF_EVENTS)
HAVE_PERF_EVENTS || ~PERF_COUNTERS
(PERF_EVENTS && DEBUG_KERNEL) || ~DEBUG_PERF_USE_VMALLOC
EMBEDDED || VM_EVENT_COUNTERS
(PCI && EMBEDDED) || (PCI_QUIRKS => PCI)
(PCI && EMBEDDED) || (PCI => PCI_QUIRKS)
(SLUB && (SYSFS && EMBEDDED)) || (SLUB_DEBUG => (SLUB && SYSFS))
(SLUB && (SYSFS && EMBEDDED)) || ((SLUB && SYSFS) => SLUB_DEBUG)
EMBEDDED || ~SLOB
TRACEPOINTS => (TRACING || (BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))))
TRACING => TRACEPOINTS
(BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))) => TRACEPOINTS
(OPROFILE && (SMP && X86)) || ~OPROFILE_IBS
(OPROFILE && X86) || ~OPROFILE_EVENT_MULTIPLEX
(PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT)) || ~OPROFILE
HAVE_OPROFILE => X86
X86 => HAVE_OPROFILE
(KALLSYMS && (MODULES && HAVE_KPROBES)) || ~KPROBES
HAVE_EFFICIENT_UNALIGNED_ACCESS => X86
X86 => HAVE_EFFICIENT_UNALIGNED_ACCESS
~HAVE_SYSCALL_WRAPPERS
KRETPROBES => (KPROBES && HAVE_KRETPROBES)
(KPROBES && HAVE_KRETPROBES) => KRETPROBES
HAVE_IOREMAP_PROT => X86
X86 => HAVE_IOREMAP_PROT
HAVE_KPROBES => X86
X86 => HAVE_KPROBES
HAVE_KRETPROBES => X86
X86 => HAVE_KRETPROBES
HAVE_ARCH_TRACEHOOK => X86
X86 => HAVE_ARCH_TRACEHOOK
HAVE_DMA_ATTRS => X86
X86 => HAVE_DMA_ATTRS
USE_GENERIC_SMP_HELPERS2 => SMP
SMP => USE_GENERIC_SMP_HELPERS2
~HAVE_CLK
HAVE_DMA_API_DEBUG => X86
X86 => HAVE_DMA_API_DEBUG
~HAVE_DEFAULT_NO_SPIN_MUTEXES
(GCOV_KERNEL && (S390 || (X86 || ((PPC && EXPERIMENTAL) || MICROBLAZE)))) || ~GCOV_PROFILE_ALL
(DEBUG_FS && CONSTRUCTORS) || ~GCOV_KERNEL
SLOW_WORK => (((FSCACHE && EXPERIMENTAL) || (GFS2_FS && (BLOCK && (EXPERIMENTAL && (c64BIT || LBDAF))))) || (CIFS && (NETWORK_FILESYSTEMS && INET)))
(FSCACHE && EXPERIMENTAL) => SLOW_WORK
(GFS2_FS && (BLOCK && (EXPERIMENTAL && (c64BIT || LBDAF)))) => SLOW_WORK
(CIFS && (NETWORK_FILESYSTEMS && INET)) => SLOW_WORK
(SLOW_WORK && DEBUG_FS) || ~SLOW_WORK_DEBUG
HAVE_GENERIC_DMA_COHERENT => (X86 && X86_32)
(X86 && X86_32) => HAVE_GENERIC_DMA_COHERENT
SLABINFO => (PROC_FS && (SLAB || SLUB_DEBUG))
(PROC_FS && (SLAB || SLUB_DEBUG)) => SLABINFO
RT_MUTEXES => FUTEX
FUTEX => RT_MUTEXES
~BASE_SMALL
MODULES || ~MODULE_FORCE_LOAD
(MODULES && (MODULE_UNLOAD && EXPERIMENTAL)) || ~MODULE_FORCE_UNLOAD
MODULES || ~MODULE_UNLOAD
MODULES || ~MODVERSIONS
MODULES || ~MODULE_SRCVERSION_ALL
~INIT_ALL_POSSIBLE
STOP_MACHINE => ((SMP && MODULE_UNLOAD) || HOTPLUG_CPU)
((SMP && MODULE_UNLOAD) || HOTPLUG_CPU) => STOP_MACHINE
(BLOCK && ~c64BIT) || (LBDAF => (BLOCK && ~c64BIT))
(BLOCK && ~c64BIT) || ((BLOCK && ~c64BIT) => LBDAF)
BLOCK || (BLK_DEV_BSG => BLOCK)
BLOCK || (BLOCK => BLK_DEV_BSG)
BLOCK || ~BLK_DEV_INTEGRITY
BLOCK_COMPAT => (BLOCK && COMPAT)
(BLOCK && COMPAT) => BLOCK_COMPAT
IOSCHED_NOOP => BLOCK
BLOCK => IOSCHED_NOOP
BLOCK || (IOSCHED_AS => BLOCK)
BLOCK || (BLOCK => IOSCHED_AS)
BLOCK || (IOSCHED_DEADLINE => ((DASD && (BLK_DEV && (CCW && BLOCK))) || BLOCK))
BLOCK || ((DASD && (BLK_DEV && (CCW && BLOCK))) => IOSCHED_DEADLINE)
BLOCK || (BLOCK => IOSCHED_DEADLINE)
BLOCK || (IOSCHED_CFQ => BLOCK)
BLOCK || (BLOCK => IOSCHED_CFQ)
IOSCHED_AS || ~DEFAULT_AS
IOSCHED_DEADLINE || ~DEFAULT_DEADLINE
IOSCHED_CFQ || ~DEFAULT_CFQ
BLOCK
~DEFAULT_IOSCHED
EMBEDDED || BLOCK
PREEMPT_NOTIFIERS => (KVM && (VIRTUALIZATION && (HAVE_KVM && PCI)))
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => PREEMPT_NOTIFIERS
FREEZER => (PM_SLEEP || CGROUP_FREEZER)
(PM_SLEEP || CGROUP_FREEZER) => FREEZER
TICK_ONESHOT => ((NO_HZ && (GENERIC_TIME && GENERIC_CLOCKEVENTS)) || (HIGH_RES_TIMERS && (GENERIC_TIME && GENERIC_CLOCKEVENTS)))
(NO_HZ && (GENERIC_TIME && GENERIC_CLOCKEVENTS)) => TICK_ONESHOT
(HIGH_RES_TIMERS && (GENERIC_TIME && GENERIC_CLOCKEVENTS)) => TICK_ONESHOT
(GENERIC_TIME && GENERIC_CLOCKEVENTS) || ~NO_HZ
(GENERIC_TIME && GENERIC_CLOCKEVENTS) || ~HIGH_RES_TIMERS
GENERIC_CLOCKEVENTS_BUILD => (GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR)
(GENERIC_CLOCKEVENTS || GENERIC_CLOCKEVENTS_MIGR) => GENERIC_CLOCKEVENTS_BUILD
(X86_LOCAL_APIC && (X86_64 && INTR_REMAP)) || ~X86_X2APIC
NUMA_IRQ_DESC => (SPARSE_IRQ && NUMA)
(SPARSE_IRQ && NUMA) => NUMA_IRQ_DESC
(PCI_MSI || HT_IRQ) || ~SPARSE_IRQ
(X86_LOCAL_APIC && ACPI) || (X86_MPPARSE => ((X86_NUMAQ && X86_32_NON_STANDARD) || X86_LOCAL_APIC))
(X86_LOCAL_APIC && ACPI) || ((X86_NUMAQ && X86_32_NON_STANDARD) => X86_MPPARSE)
(X86_LOCAL_APIC && ACPI) || (X86_LOCAL_APIC => X86_MPPARSE)
(X86_32 && SMP) || ~X86_BIGSMP
X86_32 || (X86_EXTENDED_PLATFORM => (X86_32 || (~X86_32 && X86_64)))
X86_32 || (X86_32 => X86_EXTENDED_PLATFORM)
X86_32 || ((~X86_32 && X86_64) => X86_EXTENDED_PLATFORM)
(X86_64 && (PCI && X86_EXTENDED_PLATFORM)) || ~X86_VSMP
(X86_64 && (X86_EXTENDED_PLATFORM && (NUMA && X86_X2APIC))) || ~X86_UV
(X86_32 && X86_EXTENDED_PLATFORM) || ~X86_ELAN
(X86_32 && X86_EXTENDED_PLATFORM) || ~X86_MRST
(X86_32 && X86_EXTENDED_PLATFORM) || ~X86_RDC321X
X86_32_NON_STANDARD || ~X86_NUMAQ
(X86_32 && (SMP && X86_EXTENDED_PLATFORM)) || ~X86_32_NON_STANDARD
X86_SUPPORTS_MEMORY_FAILURE => (X86_MCE && (~X86_NUMAQ && (X86_64 || ~SPARSEMEM)))
(X86_MCE && (~X86_NUMAQ && (X86_64 || ~SPARSEMEM))) => X86_SUPPORTS_MEMORY_FAILURE
(X86_32 && (PCI && (X86_MPPARSE && (PCI_GODIRECT && X86_32_NON_STANDARD)))) || ~X86_VISWS
X86_32_NON_STANDARD || ~X86_SUMMIT
(X86_32_NON_STANDARD && X86_BIGSMP) || ~X86_ES7000
X86 || (SCHED_OMIT_FRAME_POINTER => X86)
X86 || (X86 => SCHED_OMIT_FRAME_POINTER)
(PARAVIRT_GUEST && XEN) || ~XEN_MAX_DOMAIN_MEMORY
XEN_SAVE_RESTORE => (PARAVIRT_GUEST && (XEN && PM))
(PARAVIRT_GUEST && (XEN && PM)) => XEN_SAVE_RESTORE
(PARAVIRT_GUEST && (XEN && DEBUG_FS)) || ~XEN_DEBUG_FS
(PARAVIRT_GUEST && ((X86_64 || (X86_32 && (X86_PAE && ~X86_VISWS))) && (X86_CMPXCHG && X86_TSC))) || ~XEN
(PARAVIRT_GUEST && X86_32) || ~VMI
PARAVIRT_GUEST || ~KVM_CLOCK
PARAVIRT_GUEST || ~KVM_GUEST
(PARAVIRT_GUEST && X86_32) || ~LGUEST_GUEST
(PARAVIRT_GUEST && (PARAVIRT && (SMP && EXPERIMENTAL))) || ~PARAVIRT_SPINLOCKS
PARAVIRT_GUEST || (PARAVIRT => ((((((KVM_GUEST && PARAVIRT_GUEST) || (X86_VSMP && (X86_64 && (PCI && X86_EXTENDED_PLATFORM)))) || (LGUEST_GUEST && (PARAVIRT_GUEST && X86_32))) || (KVM_CLOCK && PARAVIRT_GUEST)) || (VMI && (PARAVIRT_GUEST && X86_32))) || (XEN && (PARAVIRT_GUEST && ((X86_64 || (X86_32 && (X86_PAE && ~X86_VISWS))) && (X86_CMPXCHG && X86_TSC))))))
PARAVIRT_GUEST || ((KVM_GUEST && PARAVIRT_GUEST) => PARAVIRT)
PARAVIRT_GUEST || ((X86_VSMP && (X86_64 && (PCI && X86_EXTENDED_PLATFORM))) => PARAVIRT)
PARAVIRT_GUEST || ((LGUEST_GUEST && (PARAVIRT_GUEST && X86_32)) => PARAVIRT)
PARAVIRT_GUEST || ((KVM_CLOCK && PARAVIRT_GUEST) => PARAVIRT)
PARAVIRT_GUEST || ((VMI && (PARAVIRT_GUEST && X86_32)) => PARAVIRT)
PARAVIRT_GUEST || ((XEN && (PARAVIRT_GUEST && ((X86_64 || (X86_32 && (X86_PAE && ~X86_VISWS))) && (X86_CMPXCHG && X86_TSC)))) => PARAVIRT)
PARAVIRT_CLOCK => ((KVM_CLOCK && PARAVIRT_GUEST) || (XEN && (PARAVIRT_GUEST && ((X86_64 || (X86_32 && (X86_PAE && ~X86_VISWS))) && (X86_CMPXCHG && X86_TSC)))))
(KVM_CLOCK && PARAVIRT_GUEST) => PARAVIRT_CLOCK
(XEN && (PARAVIRT_GUEST && ((X86_64 || (X86_32 && (X86_PAE && ~X86_VISWS))) && (X86_CMPXCHG && X86_TSC)))) => PARAVIRT_CLOCK
(PARAVIRT && DEBUG_KERNEL) || ~PARAVIRT_DEBUG
X86_SUMMIT_NUMA => (X86_32 && (NUMA && X86_32_NON_STANDARD))
(X86_32 && (NUMA && X86_32_NON_STANDARD)) => X86_SUMMIT_NUMA
X86_CYCLONE_TIMER => X86_32_NON_STANDARD
X86_32_NON_STANDARD => X86_CYCLONE_TIMER
(X86_32 && ~UML) || ~M386
X86_32 || (M486 => (X86_RDC321X && (X86_32 && X86_EXTENDED_PLATFORM)))
X86_32 || ((X86_RDC321X && (X86_32 && X86_EXTENDED_PLATFORM)) => M486)
X86_32 || ~M586
X86_32 || ~M586TSC
X86_32 || ~M586MMX
X86_32 || ~M686
X86_32 || ~MPENTIUMII
X86_32 || ~MPENTIUMIII
X86_32 || ~MPENTIUMM
X86_32 || ~MPENTIUM4
X86_32 || ~MK6
X86_32 || ~MK7
X86_32 || ~MCRUSOE
X86_32 || ~MEFFICEON
X86_32 || ~MWINCHIPC6
X86_32 || ~MWINCHIP3D
X86_32 || ~MGEODEGX1
X86_32 || ~MGEODE_LX
X86_32 || ~MCYRIXIII
X86_32 || ~MVIAC3_2
X86_32 || ~MVIAC7
X86_64 || ~MPSC
X86_64 || ~GENERIC_CPU
~X86_ELAN
(~X86_ELAN && X86_32) || ~X86_GENERIC
X86_CPU
~X86_L1_CACHE_BYTES
X86_INTERNODE_CACHE_BYTES => ((~X86_VSMP && ~X86_VSMP) && X86_L1_CACHE_BYTES)
((~X86_VSMP && ~X86_VSMP) && X86_L1_CACHE_BYTES) => X86_INTERNODE_CACHE_BYTES
X86_CMPXCHG => (X86_64 || (X86_32 && ~M386))
(X86_64 || (X86_32 && ~M386)) => X86_CMPXCHG
~X86_L1_CACHE_SHIFT
X86_XADD => (X86_32 && ~M386)
(X86_32 && ~M386) => X86_XADD
(M686 || (M586MMX || (M586TSC || (M586 || (M486 || (M386 || MGEODEGX1)))))) || ~X86_PPRO_FENCE
X86_F00F_BUG => (M586MMX || (M586TSC || (M586 || (M486 || M386))))
(M586MMX || (M586TSC || (M586 || (M486 || M386)))) => X86_F00F_BUG
X86_WP_WORKS_OK => ~M386
~M386 => X86_WP_WORKS_OK
X86_INVLPG => (X86_32 && ~M386)
(X86_32 && ~M386) => X86_INVLPG
X86_BSWAP => (X86_32 && ~M386)
(X86_32 && ~M386) => X86_BSWAP
X86_POPAD_OK => (X86_32 && ~M386)
(X86_32 && ~M386) => X86_POPAD_OK
X86_ALIGNMENT_16 => (MWINCHIP3D || (MWINCHIPC6 || (MCYRIXIII || (X86_ELAN || (MK6 || (M586MMX || (M586TSC || (M586 || (M486 || (MVIAC3_2 || MGEODEGX1))))))))))
(MWINCHIP3D || (MWINCHIPC6 || (MCYRIXIII || (X86_ELAN || (MK6 || (M586MMX || (M586TSC || (M586 || (M486 || (MVIAC3_2 || MGEODEGX1)))))))))) => X86_ALIGNMENT_16
X86_INTEL_USERCOPY => (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M586MMX || (X86_GENERIC || (MK8 || (MK7 || (MEFFICEON || MCORE2)))))))))
(MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M586MMX || (X86_GENERIC || (MK8 || (MK7 || (MEFFICEON || MCORE2))))))))) => X86_INTEL_USERCOPY
X86_USE_PPRO_CHECKSUM => (MWINCHIP3D || (MWINCHIPC6 || (MCYRIXIII || (MK7 || (MK6 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (MK8 || (MVIAC3_2 || (MEFFICEON || (MGEODE_LX || (MCORE2 || MATOM)))))))))))))))
(MWINCHIP3D || (MWINCHIPC6 || (MCYRIXIII || (MK7 || (MK6 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (MK8 || (MVIAC3_2 || (MEFFICEON || (MGEODE_LX || (MCORE2 || MATOM))))))))))))))) => X86_USE_PPRO_CHECKSUM
X86_USE_3DNOW => ((MCYRIXIII || (MK7 || MGEODE_LX)) && ~UML)
((MCYRIXIII || (MK7 || MGEODE_LX)) && ~UML) => X86_USE_3DNOW
X86_OOSTORE => ((MWINCHIP3D || MWINCHIPC6) && MTRR)
((MWINCHIP3D || MWINCHIPC6) && MTRR) => X86_OOSTORE
X86_P6_NOP => (X86_64 && (MCORE2 || (MPENTIUM4 || MPSC)))
(X86_64 && (MCORE2 || (MPENTIUM4 || MPSC))) => X86_P6_NOP
X86_TSC => (((MWINCHIP3D || (MCRUSOE || (MEFFICEON || (MCYRIXIII || (MK7 || (MK6 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (M586MMX || (M586TSC || (MK8 || (MVIAC3_2 || (MVIAC7 || (MGEODEGX1 || (MGEODE_LX || (MCORE2 || MATOM))))))))))))))))))) && ~X86_NUMAQ) || X86_64)
(((MWINCHIP3D || (MCRUSOE || (MEFFICEON || (MCYRIXIII || (MK7 || (MK6 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (M586MMX || (M586TSC || (MK8 || (MVIAC3_2 || (MVIAC7 || (MGEODEGX1 || (MGEODE_LX || (MCORE2 || MATOM))))))))))))))))))) && ~X86_NUMAQ) || X86_64) => X86_TSC
X86_CMPXCHG64 => (~M386 && ~M486)
(~M386 && ~M486) => X86_CMPXCHG64
X86_CMOV => (MK8 || (MK7 || (MCORE2 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (MVIAC3_2 || (MVIAC7 || (MCRUSOE || (MEFFICEON || (X86_64 || MATOM)))))))))))))
(MK8 || (MK7 || (MCORE2 || (MPENTIUM4 || (MPENTIUMM || (MPENTIUMIII || (MPENTIUMII || (M686 || (MVIAC3_2 || (MVIAC7 || (MCRUSOE || (MEFFICEON || (X86_64 || MATOM))))))))))))) => X86_CMOV
~X86_MINIMUM_CPU_FAMILY
X86_DEBUGCTLMSR => (~MK6 && (~MWINCHIPC6 && (~MWINCHIP3D && (~MCYRIXIII && (~M586MMX && (~M586TSC && (~M586 && (~M486 && (~M386 && ~UML)))))))))
(~MK6 && (~MWINCHIPC6 && (~MWINCHIP3D && (~MCYRIXIII && (~M586MMX && (~M586TSC && (~M586 && (~M486 && (~M386 && ~UML))))))))) => X86_DEBUGCTLMSR
PROCESSOR_SELECT || CPU_SUP_INTEL
(~c64BIT && PROCESSOR_SELECT) || (CPU_SUP_CYRIX_32 => ~c64BIT)
(~c64BIT && PROCESSOR_SELECT) || (~c64BIT => CPU_SUP_CYRIX_32)
PROCESSOR_SELECT || CPU_SUP_AMD
PROCESSOR_SELECT || CPU_SUP_CENTAUR
(~c64BIT && PROCESSOR_SELECT) || (CPU_SUP_TRANSMETA_32 => ~c64BIT)
(~c64BIT && PROCESSOR_SELECT) || (~c64BIT => CPU_SUP_TRANSMETA_32)
(~c64BIT && PROCESSOR_SELECT) || (CPU_SUP_UMC_32 => ~c64BIT)
(~c64BIT && PROCESSOR_SELECT) || (~c64BIT => CPU_SUP_UMC_32)
EMBEDDED || ~PROCESSOR_SELECT
X86_DS => (X86_DEBUGCTLMSR && X86_PTRACE_BTS)
(X86_DEBUGCTLMSR && X86_PTRACE_BTS) => X86_DS
(X86_DEBUGCTLMSR && BROKEN) || (X86_PTRACE_BTS => (X86_DEBUGCTLMSR && BROKEN))
(X86_DEBUGCTLMSR && BROKEN) || ((X86_DEBUGCTLMSR && BROKEN) => X86_PTRACE_BTS)
HPET_EMULATE_RTC => (HPET_TIMER && (RTC || RTC_DRV_CMOS))
(HPET_TIMER && (RTC || RTC_DRV_CMOS)) => HPET_EMULATE_RTC
X86_32 || (HPET_TIMER => X86_64)
X86_32 || (X86_64 => HPET_TIMER)
EMBEDDED || DMI
(X86_64 && (PCI && EMBEDDED)) || (GART_IOMMU => (X86_64 && PCI))
(X86_64 && (PCI && EMBEDDED)) || ((X86_64 && PCI) => GART_IOMMU)
CALGARY_IOMMU || (CALGARY_IOMMU_ENABLED_BY_DEFAULT => CALGARY_IOMMU)
CALGARY_IOMMU || (CALGARY_IOMMU => CALGARY_IOMMU_ENABLED_BY_DEFAULT)
(X86_64 && (PCI && EXPERIMENTAL)) || ~CALGARY_IOMMU
AMD_IOMMU || ~AMD_IOMMU_STATS
(X86_64 && (PCI && ACPI)) || ~AMD_IOMMU
SWIOTLB => ((((CALGARY_IOMMU && (X86_64 && (PCI && EXPERIMENTAL))) || (GART_IOMMU && (X86_64 && PCI))) || (AMD_IOMMU && (X86_64 && (PCI && ACPI)))) || X86_64)
(CALGARY_IOMMU && (X86_64 && (PCI && EXPERIMENTAL))) => SWIOTLB
(GART_IOMMU && (X86_64 && PCI)) => SWIOTLB
(AMD_IOMMU && (X86_64 && (PCI && ACPI))) => SWIOTLB
X86_64 => SWIOTLB
IOMMU_HELPER => (CALGARY_IOMMU || (GART_IOMMU || (SWIOTLB || AMD_IOMMU)))
(CALGARY_IOMMU || (GART_IOMMU || (SWIOTLB || AMD_IOMMU))) => IOMMU_HELPER
IOMMU_API => (AMD_IOMMU || DMAR)
(AMD_IOMMU || DMAR) => IOMMU_API
(X86_64 && (SMP && (DEBUG_KERNEL && EXPERIMENTAL))) || ~MAXSMP
(SMP && ~MAXSMP) || ~NR_CPUS
X86_HT || ~SCHED_SMT
X86_HT || (SCHED_MC => X86_HT)
X86_HT || (X86_HT => SCHED_MC)
X86_UP_APIC || ~X86_UP_IOAPIC
(X86_32 && (~SMP && ~X86_32_NON_STANDARD)) || ~X86_UP_APIC
X86_LOCAL_APIC => (X86_64 || (SMP || (X86_32_NON_STANDARD || X86_UP_APIC)))
(X86_64 || (SMP || (X86_32_NON_STANDARD || X86_UP_APIC))) => X86_LOCAL_APIC
X86_IO_APIC => (X86_64 || (SMP || (X86_32_NON_STANDARD || X86_UP_APIC)))
(X86_64 || (SMP || (X86_32_NON_STANDARD || X86_UP_APIC))) => X86_IO_APIC
X86_VISWS_APIC => (X86_32 && X86_VISWS)
(X86_32 && X86_VISWS) => X86_VISWS_APIC
X86_IO_APIC || ~X86_REROUTE_FOR_BROKEN_BOOT_IRQS
(X86_MCE && X86_LOCAL_APIC) || (X86_MCE_INTEL => (X86_MCE && X86_LOCAL_APIC))
(X86_MCE && X86_LOCAL_APIC) || ((X86_MCE && X86_LOCAL_APIC) => X86_MCE_INTEL)
(X86_MCE && X86_LOCAL_APIC) || (X86_MCE_AMD => (X86_MCE && X86_LOCAL_APIC))
(X86_MCE && X86_LOCAL_APIC) || ((X86_MCE && X86_LOCAL_APIC) => X86_MCE_AMD)
(X86_32 && X86_MCE) || ~X86_ANCIENT_MCE
X86_MCE_THRESHOLD => (X86_MCE_AMD || X86_MCE_INTEL)
(X86_MCE_AMD || X86_MCE_INTEL) => X86_MCE_THRESHOLD
X86_MCE || ~X86_MCE_INJECT
X86_THERMAL_VECTOR => X86_MCE_INTEL
X86_MCE_INTEL => X86_THERMAL_VECTOR
(X86_32 && EMBEDDED) || (VM86 => X86_32)
(X86_32 && EMBEDDED) || (X86_32 => VM86)
X86_32 || ~TOSHIBA
X86_32 || (X86_REBOOTFIXUPS => (X86_RDC321X && (X86_32 && X86_EXTENDED_PLATFORM)))
X86_32 || ((X86_RDC321X && (X86_32 && X86_EXTENDED_PLATFORM)) => X86_REBOOTFIXUPS)
MICROCODE || (MICROCODE_INTEL => (MICROCODE && MICROCODE))
MICROCODE || ((MICROCODE && MICROCODE) => MICROCODE_INTEL)
MICROCODE || ~MICROCODE_AMD
MICROCODE_OLD_INTERFACE => MICROCODE
MICROCODE => MICROCODE_OLD_INTERFACE
~X86_NUMAQ || ~NOHIGHMEM
~X86_NUMAQ || ~HIGHMEM4G
(~M386 && ~M486) || ~HIGHMEM64G
X86_32
~X86_PAE || ~VMSPLIT_3G_OPT
~X86_PAE || ~VMSPLIT_2G_OPT
EXPERIMENTAL && (X86_32 && EMBEDDED)
~PAGE_OFFSET
HIGHMEM => (X86_32 && (HIGHMEM64G || HIGHMEM4G))
(X86_32 && (HIGHMEM64G || HIGHMEM4G)) => HIGHMEM
(X86_32 && ~HIGHMEM4G) || (X86_PAE => (HIGHMEM64G && (~M386 && ~M486)))
(X86_32 && ~HIGHMEM4G) || ((HIGHMEM64G && (~M386 && ~M486)) => X86_PAE)
ARCH_PHYS_ADDR_T_64BIT => (X86_64 || X86_PAE)
(X86_64 || X86_PAE) => ARCH_PHYS_ADDR_T_64BIT
(X86_64 && EMBEDDED) || (DIRECT_GBPAGES => X86_64)
(X86_64 && EMBEDDED) || (X86_64 => DIRECT_GBPAGES)
(SMP && (X86_64 || (X86_32 && (HIGHMEM64G && ((X86_NUMAQ || (X86_BIGSMP || (X86_SUMMIT && ACPI))) && EXPERIMENTAL))))) || (NUMA => ((X86_NUMAQ && X86_32_NON_STANDARD) || (SMP && ((X86_64 || (X86_32 && (HIGHMEM64G && ((X86_NUMAQ || (X86_BIGSMP || (X86_SUMMIT && ACPI))) && EXPERIMENTAL)))) && (X86_NUMAQ || (X86_SUMMIT || X86_BIGSMP))))))
(SMP && (X86_64 || (X86_32 && (HIGHMEM64G && ((X86_NUMAQ || (X86_BIGSMP || (X86_SUMMIT && ACPI))) && EXPERIMENTAL))))) || ((X86_NUMAQ && X86_32_NON_STANDARD) => NUMA)
(SMP && (X86_64 || (X86_32 && (HIGHMEM64G && ((X86_NUMAQ || (X86_BIGSMP || (X86_SUMMIT && ACPI))) && EXPERIMENTAL))))) || ((SMP && ((X86_64 || (X86_32 && (HIGHMEM64G && ((X86_NUMAQ || (X86_BIGSMP || (X86_SUMMIT && ACPI))) && EXPERIMENTAL)))) && (X86_NUMAQ || (X86_SUMMIT || X86_BIGSMP)))) => NUMA)
(X86_64 && (NUMA && PCI)) || (K8_NUMA => (X86_64 && (NUMA && PCI)))
(X86_64 && (NUMA && PCI)) || ((X86_64 && (NUMA && PCI)) => K8_NUMA)
NODES_SPAN_OTHER_NODES => X86_64_ACPI_NUMA
X86_64_ACPI_NUMA => NODES_SPAN_OTHER_NODES
(X86_64 && (NUMA && (ACPI && PCI))) || (X86_64_ACPI_NUMA => (X86_64 && (NUMA && (ACPI && PCI))))
(X86_64 && (NUMA && (ACPI && PCI))) || ((X86_64 && (NUMA && (ACPI && PCI))) => X86_64_ACPI_NUMA)
(X86_64 && NUMA) || ~NUMA_EMU
(NEED_MULTIPLE_NODES && ~MAXSMP) || ~NODES_SHIFT
HAVE_ARCH_BOOTMEM => (X86_32 && NUMA)
(X86_32 && NUMA) => HAVE_ARCH_BOOTMEM
ARCH_HAVE_MEMORY_PRESENT => (X86_32 && DISCONTIGMEM)
(X86_32 && DISCONTIGMEM) => ARCH_HAVE_MEMORY_PRESENT
NEED_NODE_MEMMAP_SIZE => (X86_32 && (DISCONTIGMEM || SPARSEMEM))
(X86_32 && (DISCONTIGMEM || SPARSEMEM)) => NEED_NODE_MEMMAP_SIZE
HAVE_ARCH_ALLOC_REMAP => (X86_32 && NUMA)
(X86_32 && NUMA) => HAVE_ARCH_ALLOC_REMAP
ARCH_FLATMEM_ENABLE => (X86_32 && (ARCH_SELECT_MEMORY_MODEL && ~NUMA))
(X86_32 && (ARCH_SELECT_MEMORY_MODEL && ~NUMA)) => ARCH_FLATMEM_ENABLE
ARCH_DISCONTIGMEM_ENABLE => (NUMA && X86_32)
(NUMA && X86_32) => ARCH_DISCONTIGMEM_ENABLE
ARCH_DISCONTIGMEM_DEFAULT => (NUMA && X86_32)
(NUMA && X86_32) => ARCH_DISCONTIGMEM_DEFAULT
ARCH_PROC_KCORE_TEXT => (X86_64 && PROC_KCORE)
(X86_64 && PROC_KCORE) => ARCH_PROC_KCORE_TEXT
ARCH_SPARSEMEM_DEFAULT => X86_64
X86_64 => ARCH_SPARSEMEM_DEFAULT
ARCH_SPARSEMEM_ENABLE => (X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD)))
(X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD))) => ARCH_SPARSEMEM_ENABLE
ARCH_SELECT_MEMORY_MODEL => ARCH_SPARSEMEM_ENABLE
ARCH_SPARSEMEM_ENABLE => ARCH_SELECT_MEMORY_MODEL
ARCH_MEMORY_PROBE => (MEMORY_HOTPLUG && X86_64)
(MEMORY_HOTPLUG && X86_64) => ARCH_MEMORY_PROBE
SELECT_MEMORY_MODEL => (EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL)
(EXPERIMENTAL || ARCH_SELECT_MEMORY_MODEL) => SELECT_MEMORY_MODEL
((~ARCH_DISCONTIGMEM_ENABLE && ~ARCH_SPARSEMEM_ENABLE) || ARCH_FLATMEM_ENABLE) || ~FLATMEM_MANUAL
ARCH_DISCONTIGMEM_ENABLE || ~DISCONTIGMEM_MANUAL
ARCH_SPARSEMEM_ENABLE || ~SPARSEMEM_MANUAL
SELECT_MEMORY_MODEL
DISCONTIGMEM => ((~SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL)
((~SELECT_MEMORY_MODEL && ARCH_DISCONTIGMEM_ENABLE) || DISCONTIGMEM_MANUAL) => DISCONTIGMEM
SPARSEMEM => ((~SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE) || SPARSEMEM_MANUAL)
((~SELECT_MEMORY_MODEL && ARCH_SPARSEMEM_ENABLE) || SPARSEMEM_MANUAL) => SPARSEMEM
FLATMEM => ((~DISCONTIGMEM && ~SPARSEMEM) || FLATMEM_MANUAL)
((~DISCONTIGMEM && ~SPARSEMEM) || FLATMEM_MANUAL) => FLATMEM
FLAT_NODE_MEM_MAP => ~SPARSEMEM
~SPARSEMEM => FLAT_NODE_MEM_MAP
NEED_MULTIPLE_NODES => (DISCONTIGMEM || NUMA)
(DISCONTIGMEM || NUMA) => NEED_MULTIPLE_NODES
HAVE_MEMORY_PRESENT => (ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM)
(ARCH_HAVE_MEMORY_PRESENT || SPARSEMEM) => HAVE_MEMORY_PRESENT
SPARSEMEM_STATIC => (ARCH_SPARSEMEM_ENABLE && ((X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD))) && X86_32))
(ARCH_SPARSEMEM_ENABLE && ((X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD))) && X86_32)) => SPARSEMEM_STATIC
SPARSEMEM_EXTREME => (SPARSEMEM && ~SPARSEMEM_STATIC)
(SPARSEMEM && ~SPARSEMEM_STATIC) => SPARSEMEM_EXTREME
SPARSEMEM_VMEMMAP_ENABLE => (ARCH_SPARSEMEM_ENABLE && ((X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD))) && X86_64))
(ARCH_SPARSEMEM_ENABLE && ((X86_64 || (NUMA || ((EXPERIMENTAL && X86_32) || X86_32_NON_STANDARD))) && X86_64)) => SPARSEMEM_VMEMMAP_ENABLE
(SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE) || (SPARSEMEM_VMEMMAP => (SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE))
(SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE) || ((SPARSEMEM && SPARSEMEM_VMEMMAP_ENABLE) => SPARSEMEM_VMEMMAP)
MEMORY_HOTPLUG_SPARSE => (SPARSEMEM && MEMORY_HOTPLUG)
(SPARSEMEM && MEMORY_HOTPLUG) => MEMORY_HOTPLUG_SPARSE
(MEMORY_HOTPLUG && (ARCH_ENABLE_MEMORY_HOTREMOVE && MIGRATION)) || ~MEMORY_HOTREMOVE
((SPARSEMEM || X86_64_ACPI_NUMA) && (HOTPLUG && (ARCH_ENABLE_MEMORY_HOTPLUG && (IA64 || (X86 || (PPC_BOOK3S_64 || (SUPERH || S390))))))) || ~MEMORY_HOTPLUG
PAGEFLAGS_EXTENDED => (c64BIT || (SPARSEMEM_VMEMMAP || ~SPARSEMEM))
(c64BIT || (SPARSEMEM_VMEMMAP || ~SPARSEMEM)) => PAGEFLAGS_EXTENDED
~SPLIT_PTLOCK_CPUS
(NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE) || (MIGRATION => (NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE))
(NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE) || ((NUMA || ARCH_ENABLE_MEMORY_HOTREMOVE) => MIGRATION)
PHYS_ADDR_T_64BIT => (c64BIT || ARCH_PHYS_ADDR_T_64BIT)
(c64BIT || ARCH_PHYS_ADDR_T_64BIT) => PHYS_ADDR_T_64BIT
~ZONE_DMA_FLAG
BOUNCE => (BLOCK && (MMU && (ZONE_DMA || HIGHMEM)))
(BLOCK && (MMU && (ZONE_DMA || HIGHMEM))) => BOUNCE
~NR_QUICK
VIRT_TO_BUS => ~ARCH_NO_VIRT_TO_BUS
~ARCH_NO_VIRT_TO_BUS => VIRT_TO_BUS
HAVE_MLOCK => MMU
MMU => HAVE_MLOCK
HAVE_MLOCKED_PAGE_BIT => HAVE_MLOCK
HAVE_MLOCK => HAVE_MLOCKED_PAGE_BIT
MMU_NOTIFIER => ((KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) || (SGI_GRU && (MISC_DEVICES && (X86_UV && SMP))))
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => MMU_NOTIFIER
(SGI_GRU && (MISC_DEVICES && (X86_UV && SMP))) => MMU_NOTIFIER
MMU || ~KSM
ARCH_SUPPORTS_MEMORY_FAILURE => (X86_SUPPORTS_MEMORY_FAILURE && (X86_MCE && (~X86_NUMAQ && (X86_64 || ~SPARSEMEM))))
(X86_SUPPORTS_MEMORY_FAILURE && (X86_MCE && (~X86_NUMAQ && (X86_64 || ~SPARSEMEM)))) => ARCH_SUPPORTS_MEMORY_FAILURE
(MEMORY_FAILURE && DEBUG_KERNEL) || ~HWPOISON_INJECT
(MMU && ARCH_SUPPORTS_MEMORY_FAILURE) || ~MEMORY_FAILURE
~MMU || ~NOMMU_INITIAL_TRIM_EXCESS
(X86_32 && (HIGHMEM4G || HIGHMEM64G)) || ~HIGHPTE
X86_CHECK_BIOS_CORRUPTION || (X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK => X86_CHECK_BIOS_CORRUPTION)
X86_CHECK_BIOS_CORRUPTION || (X86_CHECK_BIOS_CORRUPTION => X86_BOOTPARAM_MEMORY_CORRUPTION_CHECK)
X86_32 || ~MATH_EMULATION
MTRR_SANITIZER || ~MTRR_SANITIZER_ENABLE_DEFAULT
MTRR_SANITIZER || ~MTRR_SANITIZER_SPARE_REG_NR_DEFAULT
MTRR || (MTRR_SANITIZER => MTRR)
MTRR || (MTRR => MTRR_SANITIZER)
ARCH_USES_PG_UNCACHED => X86_PAT
X86_PAT => ARCH_USES_PG_UNCACHED
MTRR || ~X86_PAT
ACPI || ~EFI
~HZ
SCHED_HRTICK => (HIGH_RES_TIMERS && (~SMP || USE_GENERIC_SMP_HELPERS1))
(HIGH_RES_TIMERS && (~SMP || USE_GENERIC_SMP_HELPERS1)) => SCHED_HRTICK
(X86_64 || (X86_32 && HIGHMEM)) || ~CRASH_DUMP
(EXPERIMENTAL && (KEXEC && HIBERNATION)) || ~KEXEC_JUMP
(EMBEDDED || CRASH_DUMP) || ~PHYSICAL_START
X86_NEED_RELOCS => (X86_32 && RELOCATABLE)
(X86_32 && RELOCATABLE) => X86_NEED_RELOCS
X86_32 || ~PHYSICAL_ALIGN
(SMP && HOTPLUG) || (HOTPLUG_CPU => (PM_SLEEP_SMP && (SMP && ((ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP))))
(SMP && HOTPLUG) || ((PM_SLEEP_SMP && (SMP && ((ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP))) => HOTPLUG_CPU)
(X86_32 || IA32_EMULATION) || (COMPAT_VDSO => (X86_32 || IA32_EMULATION))
(X86_32 || IA32_EMULATION) || ((X86_32 || IA32_EMULATION) => COMPAT_VDSO)
CMDLINE_BOOL || ~CMDLINE
CMDLINE_BOOL || ~CMDLINE_OVERRIDE
ARCH_ENABLE_MEMORY_HOTPLUG => (X86_64 || (X86_32 && HIGHMEM))
(X86_64 || (X86_32 && HIGHMEM)) => ARCH_ENABLE_MEMORY_HOTPLUG
ARCH_ENABLE_MEMORY_HOTREMOVE => MEMORY_HOTPLUG
MEMORY_HOTPLUG => ARCH_ENABLE_MEMORY_HOTREMOVE
HAVE_ARCH_EARLY_PFN_TO_NID => (NUMA && X86_64)
(NUMA && X86_64) => HAVE_ARCH_EARLY_PFN_TO_NID
ARCH_HIBERNATION_HEADER => (X86_64 && HIBERNATION)
(X86_64 && HIBERNATION) => ARCH_HIBERNATION_HEADER
PM_DEBUG || ~PM_VERBOSE
CAN_PM_TRACE => (PM_DEBUG && (PM_SLEEP && EXPERIMENTAL))
(PM_DEBUG && (PM_SLEEP && EXPERIMENTAL)) => CAN_PM_TRACE
PM || ~PM_DEBUG
~IA64_HP_SIM || ~PM
PM_TRACE => (PM_TRACE_RTC && (CAN_PM_TRACE && X86))
(PM_TRACE_RTC && (CAN_PM_TRACE && X86)) => PM_TRACE
(CAN_PM_TRACE && X86) || ~PM_TRACE_RTC
PM_SLEEP_SMP => (SMP && ((ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP))
(SMP && ((ARCH_SUSPEND_POSSIBLE || ARCH_HIBERNATION_POSSIBLE) && PM_SLEEP)) => PM_SLEEP_SMP
PM_SLEEP => (SUSPEND || (HIBERNATION || XEN_SAVE_RESTORE))
(SUSPEND || (HIBERNATION || XEN_SAVE_RESTORE)) => PM_SLEEP
(SUSPEND && (PM_DEBUG && RTC_CLASS)) || ~PM_TEST_SUSPEND
(SUSPEND && (ARCH_WANTS_FREEZER_CONTROL || BROKEN)) || (SUSPEND_FREEZER => SUSPEND)
(SUSPEND && (ARCH_WANTS_FREEZER_CONTROL || BROKEN)) || (SUSPEND => SUSPEND_FREEZER)
(PM && ARCH_SUSPEND_POSSIBLE) || (SUSPEND => (PM && ARCH_SUSPEND_POSSIBLE))
(PM && ARCH_SUSPEND_POSSIBLE) || ((PM && ARCH_SUSPEND_POSSIBLE) => SUSPEND)
HIBERNATION_NVS => (HIBERNATION && (PM && (SWAP && (ARCH_HIBERNATION_POSSIBLE && HAS_IOMEM))))
(HIBERNATION && (PM && (SWAP && (ARCH_HIBERNATION_POSSIBLE && HAS_IOMEM)))) => HIBERNATION_NVS
HIBERNATION || ~PM_STD_PARTITION
(PM && (SWAP && ARCH_HIBERNATION_POSSIBLE)) || ~HIBERNATION
(PM && SYS_SUPPORTS_APM_EMULATION) || (APM_EMULATION => (PMAC_APM_EMU && (MACINTOSH_DRIVERS && (ADB_PMU && (PM && PPC32)))))
(PM && SYS_SUPPORTS_APM_EMULATION) || ((PMAC_APM_EMU && (MACINTOSH_DRIVERS && (ADB_PMU && (PM && PPC32)))) => APM_EMULATION)
PM || ~PM_RUNTIME
ACPI_SLEEP => (ACPI && (SUSPEND || HIBERNATION))
(ACPI && (SUSPEND || HIBERNATION)) => ACPI_SLEEP
(ACPI && PROC_FS) || ~ACPI_PROCFS
(ACPI && PROC_FS) || (ACPI_PROCFS_POWER => (ACPI && PROC_FS))
(ACPI && PROC_FS) || ((ACPI && PROC_FS) => ACPI_PROCFS_POWER)
(ACPI && HWMON) || ~ACPI_POWER_METER
ACPI || (ACPI_SYSFS_POWER => ACPI)
ACPI || (ACPI => ACPI_SYSFS_POWER)
(ACPI && PROC_FS) || (ACPI_PROC_EVENT => (ACPI && PROC_FS))
(ACPI && PROC_FS) || ((ACPI && PROC_FS) => ACPI_PROC_EVENT)
(ACPI && X86) || (ACPI_AC => (ACPI && X86))
(ACPI && X86) || ((ACPI && X86) => ACPI_AC)
(ACPI && X86) || (ACPI_BATTERY => (ACPI && X86))
(ACPI && X86) || ((ACPI && X86) => ACPI_BATTERY)
(ACPI && INPUT) || (ACPI_BUTTON => ((DRM_I915 && (AGP_INTEL && ACPI)) || (ACPI && INPUT)))
(ACPI && INPUT) || ((DRM_I915 && (AGP_INTEL && ACPI)) => ACPI_BUTTON)
(ACPI && INPUT) || ((ACPI && INPUT) => ACPI_BUTTON)
(ACPI && (X86 && (BACKLIGHT_CLASS_DEVICE && (VIDEO_OUTPUT_CONTROL && INPUT)))) || (ACPI_VIDEO => (DRM_I915 && (AGP_INTEL && ACPI)))
(ACPI && (X86 && (BACKLIGHT_CLASS_DEVICE && (VIDEO_OUTPUT_CONTROL && INPUT)))) || ((DRM_I915 && (AGP_INTEL && ACPI)) => ACPI_VIDEO)
ACPI || (ACPI_FAN => ACPI)
ACPI || (ACPI => ACPI_FAN)
(ACPI && EXPERIMENTAL) || (ACPI_DOCK => (ATA_ACPI && (ATA && (ACPI && PCI))))
(ACPI && EXPERIMENTAL) || ((ATA_ACPI && (ATA && (ACPI && PCI))) => ACPI_DOCK)
ACPI_HOTPLUG_CPU => (ACPI && (ACPI_PROCESSOR && HOTPLUG_CPU))
(ACPI && (ACPI_PROCESSOR && HOTPLUG_CPU)) => ACPI_HOTPLUG_CPU
(ACPI && (ACPI_PROCESSOR && (EXPERIMENTAL && X86))) || ~ACPI_PROCESSOR_AGGREGATOR
(ACPI && ACPI_PROCESSOR) || (ACPI_THERMAL => (ACPI && ACPI_PROCESSOR))
(ACPI && ACPI_PROCESSOR) || ((ACPI && ACPI_PROCESSOR) => ACPI_THERMAL)
ACPI || (ACPI_PROCESSOR => ACPI)
ACPI || (ACPI => ACPI_PROCESSOR)
(ACPI && (NUMA && (X86 || IA64))) || (ACPI_NUMA => ((X86_64_ACPI_NUMA && (X86_64 && (NUMA && (ACPI && PCI)))) || (ACPI && (NUMA && ((X86 || IA64) && (IA64_GENERIC || IA64_SGI_SN2))))))
(ACPI && (NUMA && (X86 || IA64))) || ((X86_64_ACPI_NUMA && (X86_64 && (NUMA && (ACPI && PCI)))) => ACPI_NUMA)
(ACPI && (NUMA && (X86 || IA64))) || ((ACPI && (NUMA && ((X86 || IA64) && (IA64_GENERIC || IA64_SGI_SN2)))) => ACPI_NUMA)
(ACPI && ~STANDALONE) || ~ACPI_CUSTOM_DSDT_FILE
ACPI_CUSTOM_DSDT => (ACPI && ACPI_CUSTOM_DSDT_FILE)
(ACPI && ACPI_CUSTOM_DSDT_FILE) => ACPI_CUSTOM_DSDT
(ACPI && X86_32) || ~ACPI_BLACKLIST_YEAR
(ACPI && ACPI_DEBUG) || ~ACPI_DEBUG_FUNC_TRACE
ACPI || ~ACPI_DEBUG
(ACPI && SYSFS) || ~ACPI_PCI_SLOT
(ACPI && (X86 && EMBEDDED)) || (X86_PM_TIMER => (ACPI && X86))
(ACPI && (X86 && EMBEDDED)) || ((ACPI && X86) => X86_PM_TIMER)
(ACPI && EXPERIMENTAL) || (ACPI_CONTAINER => ((ACPI_HOTPLUG_CPU && (ACPI && (ACPI_PROCESSOR && HOTPLUG_CPU))) || ((ACPI && EXPERIMENTAL) && (ACPI_HOTPLUG_MEMORY || (ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO)))))
(ACPI && EXPERIMENTAL) || ((ACPI_HOTPLUG_CPU && (ACPI && (ACPI_PROCESSOR && HOTPLUG_CPU))) => ACPI_CONTAINER)
(ACPI && EXPERIMENTAL) || (((ACPI && EXPERIMENTAL) && (ACPI_HOTPLUG_MEMORY || (ACPI_HOTPLUG_CPU || ACPI_HOTPLUG_IO))) => ACPI_CONTAINER)
(ACPI && MEMORY_HOTPLUG) || ~ACPI_HOTPLUG_MEMORY
(ACPI && X86) || ~ACPI_SBS
(~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM))) || (ACPI => (~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM))))
(~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM))) || ((~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM))) => ACPI)
X86_APM_BOOT => (APM || APM_MODULE)
(APM || APM_MODULE) => X86_APM_BOOT
APM || ~APM_IGNORE_USER_SUSPEND
APM || ~APM_DO_ENABLE
APM || ~APM_CPU_IDLE
APM || ~APM_DISPLAY_BLANK
APM || ~APM_ALLOW_INTS
(X86_32 && PM_SLEEP) || ~APM
CPU_FREQ_TABLE => ((((((((((((((X86_POWERNOW_K8 && (CPU_FREQ && (ACPI && ACPI_PROCESSOR))) || (X86_POWERNOW_K7 && (CPU_FREQ && X86_32))) || (CPU_FREQ_GOV_ONDEMAND && CPU_FREQ)) || (X86_SPEEDSTEP_ICH && (CPU_FREQ && X86_32))) || (CPU_FREQ_STAT && CPU_FREQ)) || (X86_ACPI_CPUFREQ && (CPU_FREQ && ACPI_PROCESSOR))) || (X86_SPEEDSTEP_CENTRINO && (CPU_FREQ && (X86_32 || (X86_64 && ACPI_PROCESSOR))))) || (X86_E_POWERSAVER && (CPU_FREQ && (X86_32 && EXPERIMENTAL)))) || (SC520_CPUFREQ && (CPU_FREQ && X86_ELAN))) || (X86_SPEEDSTEP_SMI && (CPU_FREQ && (X86_32 && EXPERIMENTAL)))) || (X86_POWERNOW_K6 && (CPU_FREQ && X86_32))) || (ELAN_CPUFREQ && (CPU_FREQ && X86_ELAN))) || (X86_P4_CLOCKMOD && CPU_FREQ)) || (X86_LONGHAUL && (CPU_FREQ && (X86_32 && ACPI_PROCESSOR))))
(X86_POWERNOW_K8 && (CPU_FREQ && (ACPI && ACPI_PROCESSOR))) => CPU_FREQ_TABLE
(X86_POWERNOW_K7 && (CPU_FREQ && X86_32)) => CPU_FREQ_TABLE
(CPU_FREQ_GOV_ONDEMAND && CPU_FREQ) => CPU_FREQ_TABLE
(X86_SPEEDSTEP_ICH && (CPU_FREQ && X86_32)) => CPU_FREQ_TABLE
(CPU_FREQ_STAT && CPU_FREQ) => CPU_FREQ_TABLE
(X86_ACPI_CPUFREQ && (CPU_FREQ && ACPI_PROCESSOR)) => CPU_FREQ_TABLE
(X86_SPEEDSTEP_CENTRINO && (CPU_FREQ && (X86_32 || (X86_64 && ACPI_PROCESSOR)))) => CPU_FREQ_TABLE
(X86_E_POWERSAVER && (CPU_FREQ && (X86_32 && EXPERIMENTAL))) => CPU_FREQ_TABLE
(SC520_CPUFREQ && (CPU_FREQ && X86_ELAN)) => CPU_FREQ_TABLE
(X86_SPEEDSTEP_SMI && (CPU_FREQ && (X86_32 && EXPERIMENTAL))) => CPU_FREQ_TABLE
(X86_POWERNOW_K6 && (CPU_FREQ && X86_32)) => CPU_FREQ_TABLE
(ELAN_CPUFREQ && (CPU_FREQ && X86_ELAN)) => CPU_FREQ_TABLE
(X86_P4_CLOCKMOD && CPU_FREQ) => CPU_FREQ_TABLE
(X86_LONGHAUL && (CPU_FREQ && (X86_32 && ACPI_PROCESSOR))) => CPU_FREQ_TABLE
CPU_FREQ || ~CPU_FREQ_DEBUG
(CPU_FREQ && CPU_FREQ_STAT) || ~CPU_FREQ_STAT_DETAILS
CPU_FREQ || (CPU_FREQ_STAT => CPU_FREQ)
CPU_FREQ || (CPU_FREQ => CPU_FREQ_STAT)
EMBEDDED || ~CPU_FREQ_DEFAULT_GOV_POWERSAVE
CPU_FREQ
CPU_FREQ || (CPU_FREQ_GOV_PERFORMANCE => ((CPU_FREQ_DEFAULT_GOV_ONDEMAND || CPU_FREQ_DEFAULT_GOV_PERFORMANCE) || CPU_FREQ_DEFAULT_GOV_CONSERVATIVE))
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_ONDEMAND => CPU_FREQ_GOV_PERFORMANCE)
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_PERFORMANCE => CPU_FREQ_GOV_PERFORMANCE)
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_CONSERVATIVE => CPU_FREQ_GOV_PERFORMANCE)
CPU_FREQ || (CPU_FREQ_GOV_POWERSAVE => (CPU_FREQ_DEFAULT_GOV_POWERSAVE && EMBEDDED))
CPU_FREQ || ((CPU_FREQ_DEFAULT_GOV_POWERSAVE && EMBEDDED) => CPU_FREQ_GOV_POWERSAVE)
CPU_FREQ || (CPU_FREQ_GOV_USERSPACE => CPU_FREQ_DEFAULT_GOV_USERSPACE)
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_USERSPACE => CPU_FREQ_GOV_USERSPACE)
CPU_FREQ || (CPU_FREQ_GOV_ONDEMAND => CPU_FREQ_DEFAULT_GOV_ONDEMAND)
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_ONDEMAND => CPU_FREQ_GOV_ONDEMAND)
CPU_FREQ || (CPU_FREQ_GOV_CONSERVATIVE => CPU_FREQ_DEFAULT_GOV_CONSERVATIVE)
CPU_FREQ || (CPU_FREQ_DEFAULT_GOV_CONSERVATIVE => CPU_FREQ_GOV_CONSERVATIVE)
(CPU_FREQ && ACPI_PROCESSOR) || ~X86_ACPI_CPUFREQ
(CPU_FREQ && X86_ELAN) || ~ELAN_CPUFREQ
(CPU_FREQ && X86_ELAN) || ~SC520_CPUFREQ
(CPU_FREQ && X86_32) || ~X86_POWERNOW_K6
X86_POWERNOW_K7_ACPI => (CPU_FREQ && (X86_POWERNOW_K7 && (ACPI_PROCESSOR && X86_32)))
(CPU_FREQ && X86_32) || ~X86_POWERNOW_K7
(CPU_FREQ && (ACPI && ACPI_PROCESSOR)) || ~X86_POWERNOW_K8
(CPU_FREQ && (X86_32 && PCI)) || ~X86_GX_SUSPMOD
(CPU_FREQ && (X86_32 && X86_SPEEDSTEP_CENTRINO)) || (X86_SPEEDSTEP_CENTRINO_TABLE => ((X86_SPEEDSTEP_CENTRINO && (CPU_FREQ && ((X86_32 || (X86_64 && ACPI_PROCESSOR)) && X86_32))) || (CPU_FREQ && (X86_32 && X86_SPEEDSTEP_CENTRINO))))
(CPU_FREQ && (X86_32 && X86_SPEEDSTEP_CENTRINO)) || ((X86_SPEEDSTEP_CENTRINO && (CPU_FREQ && ((X86_32 || (X86_64 && ACPI_PROCESSOR)) && X86_32))) => X86_SPEEDSTEP_CENTRINO_TABLE)
(CPU_FREQ && (X86_32 && X86_SPEEDSTEP_CENTRINO)) || ((CPU_FREQ && (X86_32 && X86_SPEEDSTEP_CENTRINO)) => X86_SPEEDSTEP_CENTRINO_TABLE)
(CPU_FREQ && (X86_32 || (X86_64 && ACPI_PROCESSOR))) || ~X86_SPEEDSTEP_CENTRINO
(CPU_FREQ && X86_32) || ~X86_SPEEDSTEP_ICH
(CPU_FREQ && (X86_32 && EXPERIMENTAL)) || ~X86_SPEEDSTEP_SMI
CPU_FREQ || ~X86_P4_CLOCKMOD
(CPU_FREQ && (X86_32 && EXPERIMENTAL)) || ~X86_CPUFREQ_NFORCE2
(CPU_FREQ && X86_32) || ~X86_LONGRUN
(CPU_FREQ && (X86_32 && ACPI_PROCESSOR)) || ~X86_LONGHAUL
(CPU_FREQ && (X86_32 && EXPERIMENTAL)) || ~X86_E_POWERSAVER
X86_SPEEDSTEP_LIB => (CPU_FREQ && (X86_SPEEDSTEP_ICH || (X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD)))
(CPU_FREQ && (X86_SPEEDSTEP_ICH || (X86_SPEEDSTEP_SMI || X86_P4_CLOCKMOD))) => X86_SPEEDSTEP_LIB
(CPU_FREQ && (X86_32 && (X86_SPEEDSTEP_SMI || X86_SPEEDSTEP_ICH))) || ~X86_SPEEDSTEP_RELAXED_CAP_CHECK
CPU_IDLE_GOV_LADDER => CPU_IDLE
CPU_IDLE => CPU_IDLE_GOV_LADDER
CPU_IDLE_GOV_MENU => (CPU_IDLE && NO_HZ)
(CPU_IDLE && NO_HZ) => CPU_IDLE_GOV_MENU
I7300_IDLE_IOAT_CHANNEL => (I7300_IDLE && (X86_64 && EXPERIMENTAL))
(I7300_IDLE && (X86_64 && EXPERIMENTAL)) => I7300_IDLE_IOAT_CHANNEL
(X86_64 && EXPERIMENTAL) || ~I7300_IDLE
OLPC || ~PCI_GOOLPC
X86_32 && PCI
PCI_BIOS => (X86_32 && (PCI && (PCI_GOBIOS || PCI_GOANY)))
(X86_32 && (PCI && (PCI_GOBIOS || PCI_GOANY))) => PCI_BIOS
PCI_DIRECT => (PCI && (X86_64 || (PCI_GODIRECT || (PCI_GOANY || PCI_GOOLPC))))
(PCI && (X86_64 || (PCI_GODIRECT || (PCI_GOANY || PCI_GOOLPC)))) => PCI_DIRECT
PCI_OLPC => (PCI && (OLPC && (PCI_GOOLPC || PCI_GOANY)))
(PCI && (OLPC && (PCI_GOOLPC || PCI_GOANY))) => PCI_OLPC
PCI_DOMAINS => PCI
PCI => PCI_DOMAINS
(X86_64 && (PCI && ACPI)) || (PCI_MMCONFIG => (X86_32 && (PCI && ((ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)))))
(X86_64 && (PCI && ACPI)) || ((X86_32 && (PCI && ((ACPI || SFI) && (PCI_GOMMCONFIG || PCI_GOANY)))) => PCI_MMCONFIG)
DMAR || (DMAR_DEFAULT_ON => DMAR)
DMAR || (DMAR => DMAR_DEFAULT_ON)
(DMAR && BROKEN) || ~DMAR_BROKEN_GFX_WA
DMAR_FLOPPY_WA => DMAR
DMAR => DMAR_FLOPPY_WA
(PCI_MSI && (ACPI && EXPERIMENTAL)) || ~DMAR
(X86_64 && (X86_IO_APIC && (PCI_MSI && (ACPI && EXPERIMENTAL)))) || ~INTR_REMAP
(HOTPLUG_PCI && PCIEPORTBUS) || ~HOTPLUG_PCI_PCIE
PCIEAER || ~PCIE_ECRC
PCIEAER || ~PCIEAER_INJECT
PCIEPORTBUS || (PCIEAER => PCIEPORTBUS)
PCIEPORTBUS || (PCIEPORTBUS => PCIEAER)
PCIEASPM || ~PCIEASPM_DEBUG
(PCI && (EXPERIMENTAL && PCIEPORTBUS)) || ~PCIEASPM
PCI || ~PCIEPORTBUS
ARCH_SUPPORTS_MSI => (PCI && (X86_LOCAL_APIC && X86_IO_APIC))
(PCI && (X86_LOCAL_APIC && X86_IO_APIC)) => ARCH_SUPPORTS_MSI
(PCI && ARCH_SUPPORTS_MSI) || (PCI_MSI => (AMD_IOMMU && (X86_64 && (PCI && ACPI))))
(PCI && ARCH_SUPPORTS_MSI) || ((AMD_IOMMU && (X86_64 && (PCI && ACPI))) => PCI_MSI)
PCI || (PCI_LEGACY => PCI)
PCI || (PCI => PCI_LEGACY)
(PCI && DEBUG_KERNEL) || ~PCI_DEBUG
PCI || ~PCI_STUB
(PCI && (X86_LOCAL_APIC && X86_IO_APIC)) || (HT_IRQ => (PCI && (X86_LOCAL_APIC && X86_IO_APIC)))
(PCI && (X86_LOCAL_APIC && X86_IO_APIC)) || ((PCI && (X86_LOCAL_APIC && X86_IO_APIC)) => HT_IRQ)
PCI || ~PCI_IOV
ISA_DMA_API
(X86_32 && (X86 && EISA)) || ~EISA_VLB_PRIMING
(X86_32 && (~PARISC && (PCI && EISA))) || (EISA_PCI_EISA => (X86_32 && (~PARISC && (PCI && EISA))))
(X86_32 && (~PARISC && (PCI && EISA))) || ((X86_32 && (~PARISC && (PCI && EISA))) => EISA_PCI_EISA)
(X86_32 && (EISA && (ALPHA || X86))) || (EISA_VIRTUAL_ROOT => (X86_32 && (EISA && (ALPHA || X86))))
(X86_32 && (EISA && (ALPHA || X86))) || ((X86_32 && (EISA && (ALPHA || X86))) => EISA_VIRTUAL_ROOT)
(X86_32 && EISA) || (EISA_NAMES => (X86_32 && EISA))
(X86_32 && EISA) || ((X86_32 && EISA) => EISA_NAMES)
(X86_32 && ISA) || ~EISA
X86_32 || ~ISA
(X86_32 && (MCA_LEGACY && PROC_FS)) || ~MCA_PROC_FS
(X86_32 && MCA) || ~MCA_LEGACY
X86_32 || ~MCA
(X86_32 && (SCx200 && GENERIC_TIME)) || (SCx200HR_TIMER => (X86_32 && (SCx200 && GENERIC_TIME)))
(X86_32 && (SCx200 && GENERIC_TIME)) || ((X86_32 && (SCx200 && GENERIC_TIME)) => SCx200HR_TIMER)
X86_32 || ~SCx200
(X86_32 && (MGEODE_LX && (GENERIC_TIME && GENERIC_CLOCKEVENTS))) || (GEODE_MFGPT_TIMER => (X86_32 && (MGEODE_LX && (GENERIC_TIME && GENERIC_CLOCKEVENTS))))
(X86_32 && (MGEODE_LX && (GENERIC_TIME && GENERIC_CLOCKEVENTS))) || ((X86_32 && (MGEODE_LX && (GENERIC_TIME && GENERIC_CLOCKEVENTS))) => GEODE_MFGPT_TIMER)
X86_32 || ~OLPC
K8_NB => (AGP_AMD64 || (X86_64 && (GART_IOMMU || (PCI && NUMA))))
(AGP_AMD64 || (X86_64 && (GART_IOMMU || (PCI && NUMA)))) => K8_NB
PCCARD || ~PCMCIA_DEBUG
(PCCARD && (PCMCIA && EXPERIMENTAL)) || (PCMCIA_LOAD_CIS => (PCCARD && (PCMCIA && EXPERIMENTAL)))
(PCCARD && (PCMCIA && EXPERIMENTAL)) || ((PCCARD && (PCMCIA && EXPERIMENTAL)) => PCMCIA_LOAD_CIS)
(PCCARD && PCMCIA) || (PCMCIA_IOCTL => (PCCARD && PCMCIA))
(PCCARD && PCMCIA) || ((PCCARD && PCMCIA) => PCMCIA_IOCTL)
PCCARD || (PCMCIA => PCCARD)
PCCARD || (PCCARD => PCMCIA)
(PCCARD && PCI) || (CARDBUS => ((YENTA && (PCCARD && (PCI && ~EMBEDDED))) || (PCCARD && PCI)))
(PCCARD && PCI) || ((YENTA && (PCCARD && (PCI && ~EMBEDDED))) => CARDBUS)
(PCCARD && PCI) || ((PCCARD && PCI) => CARDBUS)
(PCCARD && (YENTA && EMBEDDED)) || (YENTA_O2 => (PCCARD && YENTA))
(PCCARD && (YENTA && EMBEDDED)) || ((PCCARD && YENTA) => YENTA_O2)
(PCCARD && (YENTA && EMBEDDED)) || (YENTA_RICOH => (PCCARD && YENTA))
(PCCARD && (YENTA && EMBEDDED)) || ((PCCARD && YENTA) => YENTA_RICOH)
(PCCARD && (YENTA_TI && (CARDBUS && EMBEDDED))) || (YENTA_ENE_TUNE => (PCCARD && (YENTA_TI && CARDBUS)))
(PCCARD && (YENTA_TI && (CARDBUS && EMBEDDED))) || ((PCCARD && (YENTA_TI && CARDBUS)) => YENTA_ENE_TUNE)
(PCCARD && (YENTA && EMBEDDED)) || (YENTA_TI => (PCCARD && YENTA))
(PCCARD && (YENTA && EMBEDDED)) || ((PCCARD && YENTA) => YENTA_TI)
(PCCARD && (YENTA && EMBEDDED)) || (YENTA_TOSHIBA => (PCCARD && YENTA))
(PCCARD && (YENTA && EMBEDDED)) || ((PCCARD && YENTA) => YENTA_TOSHIBA)
(PCCARD && PCI) || ~YENTA
(PCCARD && (PCMCIA && PCI)) || ~PD6729
(PCCARD && (PCMCIA && PCI)) || ~I82092
(PCCARD && (PCMCIA && ISA)) || ~I82365
(PCCARD && (PCMCIA && ISA)) || ~TCIC
(PCCARD && (PCMCIA && (PPC && c8xx))) || ~PCMCIA_M8XX
(PCCARD && (SOC_AU1X00 && PCMCIA)) || ~PCMCIA_AU1X00
(PCCARD && (BCM63XX && PCMCIA)) || ~PCMCIA_BCM63XX
(PCCARD && (ARM && (ARCH_SA1100 && PCMCIA))) || ~PCMCIA_SA1100
(PCCARD && (ARM && (ARCH_SA1100 && (SA1111 && PCMCIA)))) || ~PCMCIA_SA1111
(PCCARD && (ARM && (ARCH_PXA && (PCMCIA && (ARCH_LUBBOCK || (MACH_MAINSTONE || (PXA_SHARPSL || (MACH_ARMCORE || (ARCH_PXA_PALM || (TRIZEPS_PCMCIA || (ARCH_VIPER || (ARCH_PXA_ESERIES || MACH_STARGATE2)))))))))))) || ~PCMCIA_PXA2XX
PCMCIA_PROBE => (PCCARD && (ISA && (~ARCH_SA1100 && (~ARCH_CLPS711X && ~PARISC))))
(PCCARD && (ISA && (~ARCH_SA1100 && (~ARCH_CLPS711X && ~PARISC)))) => PCMCIA_PROBE
(PCCARD && (M32R && (CHIP_M32700 && PCMCIA))) || ~M32R_PCC
(PCCARD && M32R_CFC) || ~M32R_CFC_NUM
(PCCARD && (M32R && (PLAT_USRV || (PLAT_M32700UT || (PLAT_MAPPI2 || (PLAT_MAPPI3 || PLAT_OPSPUT)))))) || ~M32R_CFC
(PCCARD && (CPU_VR41XX && (ISA && PCMCIA))) || ~PCMCIA_VRC4171
(PCCARD && (CPU_VR41XX && (PCI && PCMCIA))) || ~PCMCIA_VRC4173
(PCCARD && (PCMCIA && ARCH_OMAP16XX)) || ~OMAP_CF
(PCCARD && (PCMCIA && BLACKFIN)) || ~BFIN_CFPCMCIA
(PCCARD && (PCMCIA && ARCH_AT91RM9200)) || ~AT91_CF
(PCCARD && (PCMCIA && PPC_PASEMI)) || ~ELECTRA_CF
PCCARD_NONSTATIC => ((((((((PCMCIA_M8XX && (PCCARD && (PCMCIA && (PPC && c8xx)))) || (YENTA && (PCCARD && PCI))) || (M32R_CFC && (PCCARD && (M32R && (PLAT_USRV || (PLAT_M32700UT || (PLAT_MAPPI2 || (PLAT_MAPPI3 || PLAT_OPSPUT)))))))) || (M32R_PCC && (PCCARD && (M32R && (CHIP_M32700 && PCMCIA))))) || (TCIC && (PCCARD && (PCMCIA && ISA)))) || (I82092 && (PCCARD && (PCMCIA && PCI)))) || (PD6729 && (PCCARD && (PCMCIA && PCI)))) || (I82365 && (PCCARD && (PCMCIA && ISA))))
(PCMCIA_M8XX && (PCCARD && (PCMCIA && (PPC && c8xx)))) => PCCARD_NONSTATIC
(YENTA && (PCCARD && PCI)) => PCCARD_NONSTATIC
(M32R_CFC && (PCCARD && (M32R && (PLAT_USRV || (PLAT_M32700UT || (PLAT_MAPPI2 || (PLAT_MAPPI3 || PLAT_OPSPUT))))))) => PCCARD_NONSTATIC
(M32R_PCC && (PCCARD && (M32R && (CHIP_M32700 && PCMCIA)))) => PCCARD_NONSTATIC
(TCIC && (PCCARD && (PCMCIA && ISA))) => PCCARD_NONSTATIC
(I82092 && (PCCARD && (PCMCIA && PCI))) => PCCARD_NONSTATIC
(PD6729 && (PCCARD && (PCMCIA && PCI))) => PCCARD_NONSTATIC
(I82365 && (PCCARD && (PCMCIA && ISA))) => PCCARD_NONSTATIC
PCCARD_IODYN => (PCMCIA_M8XX && (PCCARD && (PCMCIA && (PPC && c8xx))))
(PCMCIA_M8XX && (PCCARD && (PCMCIA && (PPC && c8xx)))) => PCCARD_IODYN
HOTPLUG || ~PCCARD
HOTPLUG_PCI || ~HOTPLUG_PCI_FAKE
(HOTPLUG_PCI && HOTPLUG_PCI_COMPAQ) || ~HOTPLUG_PCI_COMPAQ_NVRAM
(HOTPLUG_PCI && (X86 && PCI_BIOS)) || ~HOTPLUG_PCI_COMPAQ
(HOTPLUG_PCI && (X86_IO_APIC && (X86 && PCI_BIOS))) || ~HOTPLUG_PCI_IBM
(HOTPLUG_PCI && HOTPLUG_PCI_ACPI) || ~HOTPLUG_PCI_ACPI_IBM
(HOTPLUG_PCI && ((~ACPI_DOCK && ACPI) || ACPI_DOCK)) || ~HOTPLUG_PCI_ACPI
(HOTPLUG_PCI && (HOTPLUG_PCI_CPCI && X86)) || ~HOTPLUG_PCI_CPCI_ZT5550
(HOTPLUG_PCI && (HOTPLUG_PCI_CPCI && X86)) || ~HOTPLUG_PCI_CPCI_GENERIC
HOTPLUG_PCI || ~HOTPLUG_PCI_CPCI
HOTPLUG_PCI || ~HOTPLUG_PCI_SHPC
(HOTPLUG_PCI && HOTPLUG_PCI_RPA) || ~HOTPLUG_PCI_RPA_DLPAR
(HOTPLUG_PCI && (PPC_PSERIES && (EEH && ~HOTPLUG_PCI_FAKE))) || ~HOTPLUG_PCI_RPA
(HOTPLUG_PCI && (IA64_SGI_SN2 || IA64_GENERIC)) || ~HOTPLUG_PCI_SGI
(PCI && (HOTPLUG && SYSFS)) || ~HOTPLUG_PCI
COMPAT_BINFMT_ELF => (IA32_EMULATION && X86_64)
(IA32_EMULATION && X86_64) => COMPAT_BINFMT_ELF
(MMU && (BROKEN || ~FRV)) || (BINFMT_ELF => (MMU && (BROKEN || ~FRV)))
(MMU && (BROKEN || ~FRV)) || ((MMU && (BROKEN || ~FRV)) => BINFMT_ELF)
(FRV || (BLACKFIN || (SUPERH32 && ~MMU))) || (BINFMT_ELF_FDPIC => (FRV || (BLACKFIN || (SUPERH32 && ~MMU))))
(FRV || (BLACKFIN || (SUPERH32 && ~MMU))) || ((FRV || (BLACKFIN || (SUPERH32 && ~MMU))) => BINFMT_ELF_FDPIC)
(BINFMT_ELF && ELF_CORE) || ~CORE_DUMP_DEFAULT_ELF_HEADERS
BINFMT_FLAT || ~BINFMT_ZFLAT
BINFMT_FLAT || ~BINFMT_SHARED_FLAT
(~MMU && (~FRV || BROKEN)) || ~BINFMT_FLAT
HAVE_AOUT => (X86 && X86_32)
(X86 && X86_32) => HAVE_AOUT
(ALPHA && BINFMT_AOUT) || ~OSF4_COMPAT
HAVE_AOUT || ~BINFMT_AOUT
ALPHA || ~BINFMT_EM86
(PARISC && HPUX) || ~BINFMT_SOM
IA32_EMULATION || ~IA32_AOUT
COMPAT => IA32_EMULATION
IA32_EMULATION => COMPAT
X86_64 || ~IA32_EMULATION
COMPAT_FOR_U64_ALIGNMENT => (X86_64 && COMPAT)
(X86_64 && COMPAT) => COMPAT_FOR_U64_ALIGNMENT
SYSVIPC_COMPAT => (COMPAT && SYSVIPC)
(COMPAT && SYSVIPC) => SYSVIPC_COMPAT
HAVE_ATOMIC_IOMAP => X86_32
X86_32 => HAVE_ATOMIC_IOMAP
~WANT_COMPAT_NETLINK_MESSAGES
COMPAT_NETLINK_MESSAGES => (NET && (COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES)))
(NET && (COMPAT && (WIRELESS_EXT || WANT_COMPAT_NETLINK_MESSAGES))) => COMPAT_NETLINK_MESSAGES
(NET && PACKET) || ~PACKET_MMAP
NET || ~PACKET
NET || ~UNIX
XFRM => ((((((((((((((INET_AH && (NET && INET)) || (IPV6_MIP6 && (NET && (INET && (IPV6 && EXPERIMENTAL))))) || (INET_XFRM_MODE_BEET && (NET && INET))) || (INET6_ESP && (NET && (INET && IPV6)))) || (INET6_XFRM_MODE_BEET && (NET && (INET && IPV6)))) || (INET6_XFRM_MODE_TRANSPORT && (NET && (INET && IPV6)))) || (INET_XFRM_MODE_TRANSPORT && (NET && INET))) || (NET_KEY && NET)) || (INET_ESP && (NET && INET))) || (XFRM_IPCOMP && NET)) || (INET6_XFRM_MODE_TUNNEL && (NET && (INET && IPV6)))) || (INET6_XFRM_MODE_ROUTEOPTIMIZATION && (NET && (INET && (IPV6 && EXPERIMENTAL))))) || (INET_XFRM_MODE_TUNNEL && (NET && INET))) || (INET6_AH && (NET && (INET && IPV6))))
(INET_AH && (NET && INET)) => XFRM
(IPV6_MIP6 && (NET && (INET && (IPV6 && EXPERIMENTAL)))) => XFRM
(INET_XFRM_MODE_BEET && (NET && INET)) => XFRM
(INET6_ESP && (NET && (INET && IPV6))) => XFRM
(INET6_XFRM_MODE_BEET && (NET && (INET && IPV6))) => XFRM
(INET6_XFRM_MODE_TRANSPORT && (NET && (INET && IPV6))) => XFRM
(INET_XFRM_MODE_TRANSPORT && (NET && INET)) => XFRM
(NET_KEY && NET) => XFRM
(INET_ESP && (NET && INET)) => XFRM
(XFRM_IPCOMP && NET) => XFRM
(INET6_XFRM_MODE_TUNNEL && (NET && (INET && IPV6))) => XFRM
(INET6_XFRM_MODE_ROUTEOPTIMIZATION && (NET && (INET && (IPV6 && EXPERIMENTAL)))) => XFRM
(INET_XFRM_MODE_TUNNEL && (NET && INET)) => XFRM
(INET6_AH && (NET && (INET && IPV6))) => XFRM
(NET && (INET && XFRM)) || ~XFRM_USER
(NET && (XFRM && EXPERIMENTAL)) || ~XFRM_SUB_POLICY
(NET && (XFRM && EXPERIMENTAL)) || (XFRM_MIGRATE => (NET_KEY_MIGRATE && (NET && (NET_KEY && EXPERIMENTAL))))
(NET && (XFRM && EXPERIMENTAL)) || ((NET_KEY_MIGRATE && (NET && (NET_KEY && EXPERIMENTAL))) => XFRM_MIGRATE)
(NET && (INET && (XFRM && (PROC_FS && EXPERIMENTAL)))) || ~XFRM_STATISTICS
XFRM_IPCOMP => ((INET6_IPCOMP && (NET && (INET && IPV6))) || (INET_IPCOMP && (NET && INET)))
(INET6_IPCOMP && (NET && (INET && IPV6))) => XFRM_IPCOMP
(INET_IPCOMP && (NET && INET)) => XFRM_IPCOMP
(NET && (NET_KEY && EXPERIMENTAL)) || ~NET_KEY_MIGRATE
NET || ~NET_KEY
(NET && IUCV) || ~AFIUCV
(NET && S390) || (IUCV => (HVC_IUCV && S390))
(NET && S390) || ((HVC_IUCV && S390) => IUCV)
(NET && INET) || ~IP_MULTICAST
NET && (INET && IP_ADVANCED_ROUTER)
(NET && INET) || ~IP_ADVANCED_ROUTER
IP_FIB_HASH => ((NET && INET) && (ASK_IP_FIB_HASH || ~IP_ADVANCED_ROUTER))
((NET && INET) && (ASK_IP_FIB_HASH || ~IP_ADVANCED_ROUTER)) => IP_FIB_HASH
(NET && (INET && IP_FIB_TRIE)) || ~IP_FIB_TRIE_STATS
(NET && (INET && IP_ADVANCED_ROUTER)) || ~IP_MULTIPLE_TABLES
(NET && (INET && IP_ADVANCED_ROUTER)) || ~IP_ROUTE_MULTIPATH
(NET && (INET && IP_ADVANCED_ROUTER)) || ~IP_ROUTE_VERBOSE
(NET && (INET && IP_PNP)) || ~IP_PNP_DHCP
(NET && (INET && IP_PNP)) || ~IP_PNP_BOOTP
(NET && (INET && IP_PNP)) || ~IP_PNP_RARP
(NET && INET) || ~IP_PNP
(NET && INET) || ~NET_IPIP
(NET && (INET && (IP_MULTICAST && NET_IPGRE))) || ~NET_IPGRE_BROADCAST
(NET && INET) || ~NET_IPGRE
(NET && (INET && IP_MROUTE)) || ~IP_PIMSM_V1
(NET && (INET && IP_MROUTE)) || ~IP_PIMSM_V2
(NET && (INET && IP_MULTICAST)) || ~IP_MROUTE
(NET && INET) || ~ARPD
(NET && INET) || ~SYN_COOKIES
(NET && INET) || ~INET_AH
(NET && INET) || ~INET_ESP
(NET && INET) || ~INET_IPCOMP
INET_XFRM_TUNNEL => (INET_IPCOMP && (NET && INET))
(INET_IPCOMP && (NET && INET)) => INET_XFRM_TUNNEL
INET_TUNNEL => (((NET_IPIP && (NET && INET)) || (INET_XFRM_TUNNEL && (NET && INET))) || (IPV6_SIT && (NET && (INET && IPV6))))
(NET_IPIP && (NET && INET)) => INET_TUNNEL
(INET_XFRM_TUNNEL && (NET && INET)) => INET_TUNNEL
(IPV6_SIT && (NET && (INET && IPV6))) => INET_TUNNEL
(NET && INET) || (INET_XFRM_MODE_TRANSPORT => (NET && INET))
(NET && INET) || ((NET && INET) => INET_XFRM_MODE_TRANSPORT)
(NET && INET) || (INET_XFRM_MODE_TUNNEL => (NET && INET))
(NET && INET) || ((NET && INET) => INET_XFRM_MODE_TUNNEL)
(NET && INET) || (INET_XFRM_MODE_BEET => (NET && INET))
(NET && INET) || ((NET && INET) => INET_XFRM_MODE_BEET)
(NET && INET) || (INET_LRO => (((((((((EHEA && (NETDEVICES && (NETDEV_10000 && (IBMEBUS && (INET && SPARSEMEM))))) || (ENIC && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (MYRI10GE && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (INFINIBAND_NES && (PCI && (INET && INFINIBAND)))) || (MV643XX_ETH && (NETDEVICES && (NETDEV_1000 && (MV64X60 || (PPC32 || PLAT_ORION)))))) || (PASEMI_MAC && (NETDEVICES && (NETDEV_10000 && (PPC_PASEMI && PCI))))) || (MLX4_EN && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (INFINIBAND_IPOIB && (INFINIBAND && (NETDEVICES && (INET && (IPV6 || ~IPV6)))))) || (NET && INET)))
(NET && INET) || ((EHEA && (NETDEVICES && (NETDEV_10000 && (IBMEBUS && (INET && SPARSEMEM))))) => INET_LRO)
(NET && INET) || ((ENIC && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => INET_LRO)
(NET && INET) || ((MYRI10GE && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => INET_LRO)
(NET && INET) || ((INFINIBAND_NES && (PCI && (INET && INFINIBAND))) => INET_LRO)
(NET && INET) || ((MV643XX_ETH && (NETDEVICES && (NETDEV_1000 && (MV64X60 || (PPC32 || PLAT_ORION))))) => INET_LRO)
(NET && INET) || ((PASEMI_MAC && (NETDEVICES && (NETDEV_10000 && (PPC_PASEMI && PCI)))) => INET_LRO)
(NET && INET) || ((MLX4_EN && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => INET_LRO)
(NET && INET) || ((NET && INET) => INET_LRO)
INET_TCP_DIAG => ((NET && (INET && INET_DIAG)) && INET_DIAG)
((NET && (INET && INET_DIAG)) && INET_DIAG) => INET_TCP_DIAG
(NET && INET) || (INET_DIAG => (NET && INET))
(NET && INET) || ((NET && INET) => INET_DIAG)
(NET && (INET && TCP_CONG_ADVANCED)) || (TCP_CONG_BIC => (NET && (INET && TCP_CONG_ADVANCED)))
(NET && (INET && TCP_CONG_ADVANCED)) || ((NET && (INET && TCP_CONG_ADVANCED)) => TCP_CONG_BIC)
(NET && (INET && TCP_CONG_ADVANCED)) || (TCP_CONG_CUBIC => ((NET && (INET && TCP_CONG_ADVANCED)) || (~NET && (INET && TCP_CONG_ADVANCED) && (NET && (INET && ~TCP_CONG_ADVANCED)))))
(NET && (INET && TCP_CONG_ADVANCED)) || ((NET && (INET && TCP_CONG_ADVANCED)) => TCP_CONG_CUBIC)
(NET && (INET && TCP_CONG_ADVANCED)) || ((~NET && (INET && TCP_CONG_ADVANCED) && (NET && (INET && ~TCP_CONG_ADVANCED))) => TCP_CONG_CUBIC)
(NET && (INET && TCP_CONG_ADVANCED)) || (TCP_CONG_WESTWOOD => (NET && (INET && TCP_CONG_ADVANCED)))
(NET && (INET && TCP_CONG_ADVANCED)) || ((NET && (INET && TCP_CONG_ADVANCED)) => TCP_CONG_WESTWOOD)
(NET && (INET && TCP_CONG_ADVANCED)) || (TCP_CONG_HTCP => (NET && (INET && TCP_CONG_ADVANCED)))
(NET && (INET && TCP_CONG_ADVANCED)) || ((NET && (INET && TCP_CONG_ADVANCED)) => TCP_CONG_HTCP)
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_HSTCP
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_HYBLA
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || (TCP_CONG_VEGAS => (TCP_CONG_YEAH && (NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL)))))
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ((TCP_CONG_YEAH && (NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL)))) => TCP_CONG_VEGAS)
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_SCALABLE
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_LP
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_VENO
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_YEAH
(NET && (INET && (TCP_CONG_ADVANCED && EXPERIMENTAL))) || ~TCP_CONG_ILLINOIS
TCP_CONG_BIC || ~DEFAULT_BIC
TCP_CONG_CUBIC || ~DEFAULT_CUBIC
TCP_CONG_HTCP || ~DEFAULT_HTCP
TCP_CONG_VEGAS || ~DEFAULT_VEGAS
TCP_CONG_WESTWOOD || ~DEFAULT_WESTWOOD
NET && (INET && TCP_CONG_ADVANCED)
(NET && INET) || ~TCP_CONG_ADVANCED
~DEFAULT_TCP_CONG
(NET && (INET && EXPERIMENTAL)) || ~TCP_MD5SIG
(NET && (INET && IPV6)) || ~IPV6_PRIVACY
(NET && (INET && (IPV6 && (IPV6_ROUTER_PREF && EXPERIMENTAL)))) || ~IPV6_ROUTE_INFO
(NET && (INET && IPV6)) || ~IPV6_ROUTER_PREF
(NET && (INET && (IPV6 && EXPERIMENTAL))) || ~IPV6_OPTIMISTIC_DAD
(NET && (INET && IPV6)) || ~INET6_AH
(NET && (INET && IPV6)) || ~INET6_ESP
(NET && (INET && IPV6)) || ~INET6_IPCOMP
(NET && (INET && (IPV6 && EXPERIMENTAL))) || ~IPV6_MIP6
INET6_XFRM_TUNNEL => (INET6_IPCOMP && (NET && (INET && IPV6)))
(INET6_IPCOMP && (NET && (INET && IPV6))) => INET6_XFRM_TUNNEL
INET6_TUNNEL => ((IPV6_TUNNEL && (NET && (INET && IPV6))) || (INET6_XFRM_TUNNEL && (NET && (INET && IPV6))))
(IPV6_TUNNEL && (NET && (INET && IPV6))) => INET6_TUNNEL
(INET6_XFRM_TUNNEL && (NET && (INET && IPV6))) => INET6_TUNNEL
(NET && (INET && IPV6)) || (INET6_XFRM_MODE_TRANSPORT => ((NET && (INET && IPV6)) && IPV6))
(NET && (INET && IPV6)) || (((NET && (INET && IPV6)) && IPV6) => INET6_XFRM_MODE_TRANSPORT)
(NET && (INET && IPV6)) || (INET6_XFRM_MODE_TUNNEL => ((NET && (INET && IPV6)) && IPV6))
(NET && (INET && IPV6)) || (((NET && (INET && IPV6)) && IPV6) => INET6_XFRM_MODE_TUNNEL)
(NET && (INET && IPV6)) || (INET6_XFRM_MODE_BEET => ((NET && (INET && IPV6)) && IPV6))
(NET && (INET && IPV6)) || (((NET && (INET && IPV6)) && IPV6) => INET6_XFRM_MODE_BEET)
(NET && (INET && (IPV6 && EXPERIMENTAL))) || ~INET6_XFRM_MODE_ROUTEOPTIMIZATION
(NET && (INET && IPV6)) || (IPV6_SIT => (NET && (INET && IPV6)))
(NET && (INET && IPV6)) || ((NET && (INET && IPV6)) => IPV6_SIT)
IPV6_NDISC_NODETYPE => (IPV6_SIT && (NET && (INET && IPV6)))
(IPV6_SIT && (NET && (INET && IPV6))) => IPV6_NDISC_NODETYPE
(NET && (INET && IPV6)) || ~IPV6_TUNNEL
(NET && (INET && (IPV6 && IPV6_MULTIPLE_TABLES))) || ~IPV6_SUBTREES
(NET && (INET && (IPV6 && EXPERIMENTAL))) || ~IPV6_MULTIPLE_TABLES
(NET && (INET && (IPV6 && IPV6_MROUTE))) || ~IPV6_PIMSM_V2
(NET && (INET && (IPV6 && EXPERIMENTAL))) || ~IPV6_MROUTE
(NET && INET) || (IPV6 => (NET && INET))
(NET && INET) || ((NET && INET) => IPV6)
(NET && (INET && SECURITY)) || ~NETLABEL
NET || ~INET
NET || (NETWORK_SECMARK => (SECURITY_SELINUX && (SECURITY_NETWORK && (AUDIT && (NET && INET)))))
NET || ((SECURITY_SELINUX && (SECURITY_NETWORK && (AUDIT && (NET && INET)))) => NETWORK_SECMARK)
(NET && NETFILTER) || ~NETFILTER_DEBUG
(NET && (BRIDGE && (NETFILTER && (INET && NETFILTER_ADVANCED)))) || (BRIDGE_NETFILTER => (NET && (BRIDGE && (NETFILTER && (INET && NETFILTER_ADVANCED)))))
(NET && (BRIDGE && (NETFILTER && (INET && NETFILTER_ADVANCED)))) || ((NET && (BRIDGE && (NETFILTER && (INET && NETFILTER_ADVANCED)))) => BRIDGE_NETFILTER)
(NET && NETFILTER) || (NETFILTER_ADVANCED => (NET && NETFILTER))
(NET && NETFILTER) || ((NET && NETFILTER) => NETFILTER_ADVANCED)
NETFILTER_NETLINK => (((NETFILTER_NETLINK_QUEUE && (NET && (INET && (NETFILTER && NETFILTER_ADVANCED)))) || (NETFILTER_NETLINK_LOG && (NET && (INET && NETFILTER)))) || (NF_CT_NETLINK && (NET && (INET && (NETFILTER && NF_CONNTRACK)))))
(NETFILTER_NETLINK_QUEUE && (NET && (INET && (NETFILTER && NETFILTER_ADVANCED)))) => NETFILTER_NETLINK
(NETFILTER_NETLINK_LOG && (NET && (INET && NETFILTER))) => NETFILTER_NETLINK
(NF_CT_NETLINK && (NET && (INET && (NETFILTER && NF_CONNTRACK)))) => NETFILTER_NETLINK
(NET && (INET && (NETFILTER && NETFILTER_ADVANCED))) || ~NETFILTER_NETLINK_QUEUE
(NET && (INET && NETFILTER)) || (NETFILTER_NETLINK_LOG => ((NETFILTER_XT_TARGET_NFLOG && (NET && (INET && (NETFILTER && NETFILTER_XTABLES)))) || (NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED)))))
(NET && (INET && NETFILTER)) || ((NETFILTER_XT_TARGET_NFLOG && (NET && (INET && (NETFILTER && NETFILTER_XTABLES)))) => NETFILTER_NETLINK_LOG)
(NET && (INET && NETFILTER)) || ((NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))) => NETFILTER_NETLINK_LOG)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || (NF_CT_ACCT => (NETFILTER_XT_MATCH_CONNBYTES && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED)))))))
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ((NETFILTER_XT_MATCH_CONNBYTES && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED)))))) => NF_CT_ACCT)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || (NF_CONNTRACK_MARK => (((NETFILTER_XT_MATCH_CONNMARK && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED)))))) || (NETFILTER_XT_TARGET_CONNMARK && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))))) || (IP_NF_TARGET_CLUSTERIP && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_MANGLE && (EXPERIMENTAL && (NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED))))))))))
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ((NETFILTER_XT_MATCH_CONNMARK && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED)))))) => NF_CONNTRACK_MARK)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ((NETFILTER_XT_TARGET_CONNMARK && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED)))))) => NF_CONNTRACK_MARK)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ((IP_NF_TARGET_CLUSTERIP && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_MANGLE && (EXPERIMENTAL && (NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED)))))))) => NF_CONNTRACK_MARK)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETWORK_SECMARK)))) || (NF_CONNTRACK_SECMARK => (NET && (INET && (NETFILTER && (NF_CONNTRACK && (NETWORK_SECMARK && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETWORK_SECMARK)))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && (NETWORK_SECMARK && ~NETFILTER_ADVANCED))))) => NF_CONNTRACK_SECMARK)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CONNTRACK_EVENTS
(NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (NF_CT_PROTO_DCCP => ((NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_DCCP))
(NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (((NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_DCCP) => NF_CT_PROTO_DCCP)
NF_CT_PROTO_GRE => (NF_CONNTRACK_PPTP && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))))
(NF_CONNTRACK_PPTP && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED))))) => NF_CT_PROTO_GRE
(NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (NF_CT_PROTO_SCTP => ((NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_SCTP))
(NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (((NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_SCTP) => NF_CT_PROTO_SCTP)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CT_PROTO_UDPLITE
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CONNTRACK_AMANDA
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || (NF_CONNTRACK_FTP => (NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))) => NF_CONNTRACK_FTP)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && ((IPV6 || ~IPV6) && NETFILTER_ADVANCED))))) || ~NF_CONNTRACK_H323
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || (NF_CONNTRACK_IRC => (NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))) => NF_CONNTRACK_IRC)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CONNTRACK_NETBIOS_NS
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CONNTRACK_PPTP
(NET && (INET && (NETFILTER && (NF_CONNTRACK && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || ~NF_CONNTRACK_SANE
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || (NF_CONNTRACK_SIP => (NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))) => NF_CONNTRACK_SIP)
(NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED)))) || ~NF_CONNTRACK_TFTP
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || (NF_CT_NETLINK => (NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))) => NF_CT_NETLINK)
(NET && (INET && NETFILTER)) || (NF_CONNTRACK => (NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))))
(NET && (INET && NETFILTER)) || ((NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))) => NF_CONNTRACK)
(NET && (INET && (NETFILTER && (EXPERIMENTAL && (IP_NF_MANGLE && NETFILTER_ADVANCED))))) || ~NETFILTER_TPROXY
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_TARGET_CLASSIFY
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_TARGET_CONNMARK
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NF_CONNTRACK_SECMARK))))) || (NETFILTER_XT_TARGET_CONNSECMARK => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && (NF_CONNTRACK_SECMARK && ~NETFILTER_ADVANCED)))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NF_CONNTRACK_SECMARK))))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && (NF_CONNTRACK_SECMARK && ~NETFILTER_ADVANCED)))))) => NETFILTER_XT_TARGET_CONNSECMARK)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_TARGET_DSCP
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED))))) || (NETFILTER_XT_TARGET_HL => ((IP6_NF_TARGET_HL && (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED)))))) || (IP_NF_TARGET_TTL && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED))))) || ((IP6_NF_TARGET_HL && (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED)))))) => NETFILTER_XT_TARGET_HL)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED))))) || ((IP_NF_TARGET_TTL && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED))))) => NETFILTER_XT_TARGET_HL)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (LEDS_CLASS && (LEDS_TRIGGERS && NETFILTER_ADVANCED)))))) || ~NETFILTER_XT_TARGET_LED
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || (NETFILTER_XT_TARGET_MARK => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))) => NETFILTER_XT_TARGET_MARK)
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || (NETFILTER_XT_TARGET_NFLOG => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))) => NETFILTER_XT_TARGET_NFLOG)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_TARGET_NFQUEUE
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_RAW || IP6_NF_RAW) && (NF_CONNTRACK && NETFILTER_ADVANCED)))))) || ~NETFILTER_XT_TARGET_NOTRACK
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || (NETFILTER_XT_TARGET_RATEEST => (NETFILTER_XT_MATCH_RATEEST && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ((NETFILTER_XT_MATCH_RATEEST && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => NETFILTER_XT_TARGET_RATEEST)
(NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))))) || ~NETFILTER_XT_TARGET_TPROXY
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP_NF_RAW || IP6_NF_RAW) && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_TARGET_TRACE
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETWORK_SECMARK)))) || (NETFILTER_XT_TARGET_SECMARK => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NETWORK_SECMARK && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETWORK_SECMARK)))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NETWORK_SECMARK && ~NETFILTER_ADVANCED))))) => NETFILTER_XT_TARGET_SECMARK)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (IPV6 || ~IPV6))))) || (NETFILTER_XT_TARGET_TCPMSS => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IPV6 || ~IPV6) && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (EXPERIMENTAL && ((IP_NF_MANGLE || IP6_NF_MANGLE) && NETFILTER_ADVANCED)))))) || ~NETFILTER_XT_TARGET_TCPOPTSTRIP
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_CLUSTER
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_COMMENT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_CONNBYTES
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_CONNLIMIT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_CONNMARK
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NF_CONNTRACK)))) || (NETFILTER_XT_MATCH_CONNTRACK => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NF_CONNTRACK)))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))) => NETFILTER_XT_MATCH_CONNTRACK)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || (NETFILTER_XT_MATCH_DCCP => ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) && IP_DCCP))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || (((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) && IP_DCCP) => NETFILTER_XT_MATCH_DCCP)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_DSCP
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_ESP
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ((IP6_NF_IPTABLES || ~IP6_NF_IPTABLES) && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_HASHLIMIT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || ~NETFILTER_XT_MATCH_HELPER
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || (NETFILTER_XT_MATCH_HL => ((IP_NF_MATCH_TTL && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED))))) || (IP6_NF_MATCH_HL && (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ((IP_NF_MATCH_TTL && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED))))) => NETFILTER_XT_MATCH_HL)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ((IP6_NF_MATCH_HL && (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED)))))) => NETFILTER_XT_MATCH_HL)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_IPRANGE
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_LENGTH
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_LIMIT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_MAC
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || (NETFILTER_XT_MATCH_MARK => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NETFILTER_XTABLES))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && ~NETFILTER_ADVANCED)))) => NETFILTER_XT_MATCH_MARK)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_MULTIPORT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_OWNER
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && XFRM)))) || (NETFILTER_XT_MATCH_POLICY => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (XFRM && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && XFRM)))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (XFRM && ~NETFILTER_ADVANCED))))) => NETFILTER_XT_MATCH_POLICY)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (BRIDGE && (BRIDGE_NETFILTER && NETFILTER_ADVANCED)))))) || ~NETFILTER_XT_MATCH_PHYSDEV
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_PKTTYPE
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_QUOTA
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_RATEEST
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_REALM
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NETFILTER_XT_MATCH_RECENT && PROC_FS))))) || ~NETFILTER_XT_MATCH_RECENT_PROC_COMPAT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_RECENT
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (NETFILTER_XT_MATCH_SCTP => ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_SCTP))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (EXPERIMENTAL && NETFILTER_ADVANCED))))) || (((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (EXPERIMENTAL && NETFILTER_ADVANCED))))) && IP_SCTP) => NETFILTER_XT_MATCH_SCTP)
(NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && (NETFILTER_ADVANCED && (~NF_CONNTRACK || NF_CONNTRACK)))))))) || ~NETFILTER_XT_MATCH_SOCKET
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NF_CONNTRACK)))) || (NETFILTER_XT_MATCH_STATE => (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NF_CONNTRACK)))) || ((NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))) => NETFILTER_XT_MATCH_STATE)
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_STATISTIC
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_STRING
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_TCPMSS
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_TIME
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED)))) || ~NETFILTER_XT_MATCH_U32
(NET && (INET && (NETFILTER && (NETFILTER_XTABLES && (NETFILTER_ADVANCED && NETFILTER_NETLINK))))) || ~NETFILTER_XT_MATCH_OSF
(NET && (INET && NETFILTER)) || (NETFILTER_XTABLES => (((((IP_NF_IPTABLES && (NET && (INET && NETFILTER))) || (IP_NF_ARPTABLES && (NET && (INET && (NETFILTER && NETFILTER_ADVANCED))))) || (BRIDGE_NF_EBTABLES && (NET && (NETFILTER && (BRIDGE && BRIDGE_NETFILTER))))) || (IP6_NF_IPTABLES && (NET && (NETFILTER && (INET && IPV6))))) || (NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED)))))
(NET && (INET && NETFILTER)) || ((IP_NF_IPTABLES && (NET && (INET && NETFILTER))) => NETFILTER_XTABLES)
(NET && (INET && NETFILTER)) || ((IP_NF_ARPTABLES && (NET && (INET && (NETFILTER && NETFILTER_ADVANCED)))) => NETFILTER_XTABLES)
(NET && (INET && NETFILTER)) || ((BRIDGE_NF_EBTABLES && (NET && (NETFILTER && (BRIDGE && BRIDGE_NETFILTER)))) => NETFILTER_XTABLES)
(NET && (INET && NETFILTER)) || ((IP6_NF_IPTABLES && (NET && (NETFILTER && (INET && IPV6)))) => NETFILTER_XTABLES)
(NET && (INET && NETFILTER)) || ((NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))) => NETFILTER_XTABLES)
(NET && (NETFILTER && (IP_VS && (EXPERIMENTAL && (IPV6 || IP_VS))))) || ~IP_VS_IPV6
(NET && (NETFILTER && IP_VS)) || ~IP_VS_DEBUG
(NET && (NETFILTER && IP_VS)) || ~IP_VS_TAB_BITS
(NET && (NETFILTER && IP_VS)) || ~IP_VS_PROTO_TCP
(NET && (NETFILTER && IP_VS)) || ~IP_VS_PROTO_UDP
IP_VS_PROTO_AH_ESP => ((IP_VS_PROTO_ESP && (NET && (NETFILTER && IP_VS))) || (IP_VS_PROTO_AH && (NET && (NETFILTER && IP_VS))))
(IP_VS_PROTO_ESP && (NET && (NETFILTER && IP_VS))) => IP_VS_PROTO_AH_ESP
(IP_VS_PROTO_AH && (NET && (NETFILTER && IP_VS))) => IP_VS_PROTO_AH_ESP
(NET && (NETFILTER && IP_VS)) || ~IP_VS_PROTO_ESP
(NET && (NETFILTER && IP_VS)) || ~IP_VS_PROTO_AH
(NET && (NETFILTER && IP_VS)) || ~IP_VS_RR
(NET && (NETFILTER && IP_VS)) || ~IP_VS_WRR
(NET && (NETFILTER && IP_VS)) || ~IP_VS_LC
(NET && (NETFILTER && IP_VS)) || ~IP_VS_WLC
(NET && (NETFILTER && IP_VS)) || ~IP_VS_LBLC
(NET && (NETFILTER && IP_VS)) || ~IP_VS_LBLCR
(NET && (NETFILTER && IP_VS)) || ~IP_VS_DH
(NET && (NETFILTER && IP_VS)) || ~IP_VS_SH
(NET && (NETFILTER && IP_VS)) || ~IP_VS_SED
(NET && (NETFILTER && IP_VS)) || ~IP_VS_NQ
(NET && (NETFILTER && (IP_VS && IP_VS_PROTO_TCP))) || ~IP_VS_FTP
(NET && (INET && NETFILTER)) || ~IP_VS
NF_DEFRAG_IPV4 => (((NF_CONNTRACK_IPV4 && (NET && (INET && (NETFILTER && NF_CONNTRACK)))) || (NETFILTER_XT_MATCH_SOCKET && (NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && (NETFILTER_ADVANCED && (~NF_CONNTRACK || NF_CONNTRACK)))))))))) || (NETFILTER_XT_TARGET_TPROXY && (NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))))
(NF_CONNTRACK_IPV4 && (NET && (INET && (NETFILTER && NF_CONNTRACK)))) => NF_DEFRAG_IPV4
(NETFILTER_XT_MATCH_SOCKET && (NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && (NETFILTER_ADVANCED && (~NF_CONNTRACK || NF_CONNTRACK))))))))) => NF_DEFRAG_IPV4
(NETFILTER_XT_TARGET_TPROXY && (NET && (INET && (NETFILTER && (EXPERIMENTAL && (NETFILTER_TPROXY && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))) => NF_DEFRAG_IPV4
(NET && (INET && (NETFILTER && NF_CONNTRACK_IPV4))) || (NF_CONNTRACK_PROC_COMPAT => (NET && (INET && (NETFILTER && NF_CONNTRACK_IPV4))))
(NET && (INET && (NETFILTER && NF_CONNTRACK_IPV4))) || ((NET && (INET && (NETFILTER && NF_CONNTRACK_IPV4))) => NF_CONNTRACK_PROC_COMPAT)
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || (NF_CONNTRACK_IPV4 => (NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && NF_CONNTRACK))) || ((NET && (INET && (NETFILTER && (NF_CONNTRACK && ~NETFILTER_ADVANCED)))) => NF_CONNTRACK_IPV4)
(NET && (INET && (NETFILTER && NETFILTER_ADVANCED))) || ~IP_NF_QUEUE
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_MATCH_ADDRTYPE
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_MATCH_AH
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_MATCH_ECN
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_MATCH_TTL
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && IP_NF_FILTER)))) || (IP_NF_TARGET_REJECT => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_FILTER && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && IP_NF_FILTER)))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_FILTER && ~NETFILTER_ADVANCED))))) => IP_NF_TARGET_REJECT)
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || (IP_NF_FILTER => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))) => IP_NF_FILTER)
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || (IP_NF_TARGET_LOG => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))) => IP_NF_TARGET_LOG)
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || (IP_NF_TARGET_ULOG => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))) => IP_NF_TARGET_ULOG)
NF_NAT_NEEDED => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_NAT))))
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_NAT)))) => NF_NAT_NEEDED
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_NAT)))) || (IP_NF_TARGET_MASQUERADE => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_NAT)))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && ~NETFILTER_ADVANCED))))) => IP_NF_TARGET_MASQUERADE)
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NETFILTER_ADVANCED))))) || ~IP_NF_TARGET_NETMAP
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NETFILTER_ADVANCED))))) || ~IP_NF_TARGET_REDIRECT
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NETFILTER_ADVANCED))))) || ~NF_NAT_SNMP_BASIC
NF_NAT_PROTO_DCCP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_DCCP))))) && (NF_NAT && NF_CT_PROTO_DCCP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_DCCP))))) && (NF_NAT && NF_CT_PROTO_DCCP)) => NF_NAT_PROTO_DCCP
NF_NAT_PROTO_GRE => (NF_NAT_PPTP && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))))
(NF_NAT_PPTP && (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT)))))) => NF_NAT_PROTO_GRE
NF_NAT_PROTO_UDPLITE => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_UDPLITE))))) && (NF_NAT && NF_CT_PROTO_UDPLITE))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_UDPLITE))))) && (NF_NAT && NF_CT_PROTO_UDPLITE)) => NF_NAT_PROTO_UDPLITE
NF_NAT_PROTO_SCTP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_SCTP))))) && (NF_NAT && NF_CT_PROTO_SCTP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_NAT && NF_CT_PROTO_SCTP))))) && (NF_NAT && NF_CT_PROTO_SCTP)) => NF_NAT_PROTO_SCTP
NF_NAT_FTP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_FTP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_FTP)) => NF_NAT_FTP
NF_NAT_IRC => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_IRC))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_IRC)) => NF_NAT_IRC
NF_NAT_TFTP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_TFTP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_TFTP)) => NF_NAT_TFTP
NF_NAT_AMANDA => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_AMANDA))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_AMANDA)) => NF_NAT_AMANDA
NF_NAT_PPTP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_PPTP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_PPTP)) => NF_NAT_PPTP
NF_NAT_H323 => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_H323))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_H323)) => NF_NAT_H323
NF_NAT_SIP => ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_SIP))
((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK && NF_NAT))))) && (NF_NAT && NF_CONNTRACK_SIP)) => NF_NAT_SIP
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_CONNTRACK_IPV4)))) || (NF_NAT => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK_IPV4 && ~NETFILTER_ADVANCED))))))
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NF_CONNTRACK_IPV4)))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (NF_CONNTRACK_IPV4 && ~NETFILTER_ADVANCED))))) => NF_NAT)
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_MANGLE && (EXPERIMENTAL && (NF_CONNTRACK_IPV4 && NETFILTER_ADVANCED))))))) || ~IP_NF_TARGET_CLUSTERIP
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (IP_NF_MANGLE && NETFILTER_ADVANCED))))) || ~IP_NF_TARGET_ECN
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || (IP_NF_MANGLE => (NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))))
(NET && (INET && (NETFILTER && IP_NF_IPTABLES))) || ((NET && (INET && (NETFILTER && (IP_NF_IPTABLES && ~NETFILTER_ADVANCED)))) => IP_NF_MANGLE)
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_TARGET_TTL
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && NETFILTER_ADVANCED)))) || ~IP_NF_RAW
(NET && (INET && (NETFILTER && (IP_NF_IPTABLES && (SECURITY && NETFILTER_ADVANCED))))) || ~IP_NF_SECURITY
(NET && (INET && NETFILTER)) || (IP_NF_IPTABLES => (NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))))
(NET && (INET && NETFILTER)) || ((NET && (INET && (NETFILTER && ~NETFILTER_ADVANCED))) => IP_NF_IPTABLES)
(NET && (INET && (NETFILTER && IP_NF_ARPTABLES))) || ~IP_NF_ARPFILTER
(NET && (INET && (NETFILTER && IP_NF_ARPTABLES))) || ~IP_NF_ARP_MANGLE
(NET && (INET && (NETFILTER && NETFILTER_ADVANCED))) || ~IP_NF_ARPTABLES
(NET && (NETFILTER && (INET && (IPV6 && NF_CONNTRACK)))) || (NF_CONNTRACK_IPV6 => (NET && (NETFILTER && (INET && (IPV6 && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))))
(NET && (NETFILTER && (INET && (IPV6 && NF_CONNTRACK)))) || ((NET && (NETFILTER && (INET && (IPV6 && (NF_CONNTRACK && ~NETFILTER_ADVANCED))))) => NF_CONNTRACK_IPV6)
(NET && (INET && (IPV6 && (NETFILTER && NETFILTER_ADVANCED)))) || ~IP6_NF_QUEUE
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_AH
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_EUI64
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_FRAG
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_OPTS
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_HL
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || (IP6_NF_MATCH_IPV6HEADER => (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))))
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || ((NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))) => IP6_NF_MATCH_IPV6HEADER)
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_MH
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_MATCH_RT
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_TARGET_HL
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || (IP6_NF_TARGET_LOG => (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))))
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || ((NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))) => IP6_NF_TARGET_LOG)
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && IP6_NF_FILTER))))) || (IP6_NF_TARGET_REJECT => (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && (IP6_NF_FILTER && ~NETFILTER_ADVANCED)))))))
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && IP6_NF_FILTER))))) || ((NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && (IP6_NF_FILTER && ~NETFILTER_ADVANCED)))))) => IP6_NF_TARGET_REJECT)
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || (IP6_NF_FILTER => (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))))
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || ((NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))) => IP6_NF_FILTER)
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || (IP6_NF_MANGLE => (NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))))
(NET && (INET && (IPV6 && (NETFILTER && IP6_NF_IPTABLES)))) || ((NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && ~NETFILTER_ADVANCED))))) => IP6_NF_MANGLE)
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && NETFILTER_ADVANCED))))) || ~IP6_NF_RAW
(NET && (INET && (IPV6 && (NETFILTER && (IP6_NF_IPTABLES && (SECURITY && NETFILTER_ADVANCED)))))) || ~IP6_NF_SECURITY
(NET && (NETFILTER && (INET && IPV6))) || (IP6_NF_IPTABLES => (NET && (NETFILTER && (INET && (IPV6 && ~NETFILTER_ADVANCED)))))
(NET && (NETFILTER && (INET && IPV6))) || ((NET && (NETFILTER && (INET && (IPV6 && ~NETFILTER_ADVANCED)))) => IP6_NF_IPTABLES)
(NET && (DECNET && (NETFILTER && (EXPERIMENTAL && NETFILTER_ADVANCED)))) || ~DECNET_NF_GRABULATOR
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_BROUTE
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_T_FILTER
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_T_NAT
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_802_3
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_AMONG
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_ARP
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_IP
(NET && (NETFILTER && (BRIDGE_NF_EBTABLES && IPV6))) || ~BRIDGE_EBT_IP6
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_LIMIT
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_MARK
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_PKTTYPE
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_STP
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_VLAN
(NET && (NETFILTER && (BRIDGE_NF_EBTABLES && INET))) || ~BRIDGE_EBT_ARPREPLY
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_DNAT
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_MARK_T
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_REDIRECT
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_SNAT
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_LOG
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_ULOG
(NET && (NETFILTER && BRIDGE_NF_EBTABLES)) || ~BRIDGE_EBT_NFLOG
(NET && (NETFILTER && (BRIDGE && BRIDGE_NETFILTER))) || ~BRIDGE_NF_EBTABLES
NET || ~NETFILTER
INET_DCCP_DIAG => ((NET && (IP_DCCP && INET_DIAG)) || (~NET && (IP_DCCP && INET_DIAG) && (NET && (IP_DCCP && INET_DIAG))))
(NET && (IP_DCCP && INET_DIAG)) => INET_DCCP_DIAG
(NET && (IP_DCCP && EXPERIMENTAL)) || ~IP_DCCP_CCID2_DEBUG
(NET && (IP_DCCP && (EXPERIMENTAL && IP_DCCP_CCID3))) || ~IP_DCCP_CCID3_DEBUG
(NET && (IP_DCCP && (IP_DCCP_CCID3 && EXPERIMENTAL))) || ~IP_DCCP_CCID3_RTO
(NET && (IP_DCCP && EXPERIMENTAL)) || (IP_DCCP_CCID3 => (NET && (EXPERIMENTAL && IP_DCCP)))
(NET && (IP_DCCP && EXPERIMENTAL)) || ((NET && (EXPERIMENTAL && IP_DCCP)) => IP_DCCP_CCID3)
IP_DCCP_TFRC_LIB => (NET && (IP_DCCP && (EXPERIMENTAL && IP_DCCP_CCID3)))
(NET && (IP_DCCP && (EXPERIMENTAL && IP_DCCP_CCID3))) => IP_DCCP_TFRC_LIB
IP_DCCP_TFRC_DEBUG => (NET && (IP_DCCP && (EXPERIMENTAL && IP_DCCP_CCID3_DEBUG)))
(NET && (IP_DCCP && (EXPERIMENTAL && IP_DCCP_CCID3_DEBUG))) => IP_DCCP_TFRC_DEBUG
(NET && (IP_DCCP && DEBUG_KERNEL)) || ~IP_DCCP_DEBUG
(NET && (IP_DCCP && (DEBUG_KERNEL && (PROC_FS && KPROBES)))) || ~NET_DCCPPROBE
(NET && (INET && EXPERIMENTAL)) || ~IP_DCCP
(NET && IP_SCTP) || ~SCTP_DBG_MSG
(NET && (IP_SCTP && PROC_FS)) || ~SCTP_DBG_OBJCNT
NET && IP_SCTP
(NET && (INET && (EXPERIMENTAL && (IPV6 || ~IPV6)))) || (IP_SCTP => ((GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && DLM_SCTP)))) || (DLM && (EXPERIMENTAL && (INET && (SYSFS && (IPV6 || ~IPV6)))))))
(NET && (INET && (EXPERIMENTAL && (IPV6 || ~IPV6)))) || ((GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && DLM_SCTP)))) => IP_SCTP)
(NET && (RDS && (INFINIBAND && INFINIBAND_ADDR_TRANS))) || ~RDS_RDMA
(NET && RDS) || ~RDS_TCP
(NET && RDS) || ~RDS_DEBUG
(NET && (INET && EXPERIMENTAL)) || ~RDS
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_ZONES
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_CLUSTERS
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_NODES
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_SLAVE_NODES
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_PORTS
(NET && (TIPC && TIPC_ADVANCED)) || ~TIPC_LOG
(NET && TIPC) || ~TIPC_ADVANCED
(NET && TIPC) || ~TIPC_DEBUG
(NET && (INET && EXPERIMENTAL)) || ~TIPC
(NET && ATM_CLIP) || ~ATM_CLIP_NO_ICMP
(NET && (ATM && INET)) || ~ATM_CLIP
(NET && (ATM && (INET && ATM_LANE))) || ~ATM_MPOA
(NET && ATM) || ~ATM_LANE
(NET && ATM_BR2684) || ~ATM_BR2684_IPFILTER
(NET && (ATM && INET)) || ~ATM_BR2684
NET || ~ATM
STP => ((GARP && NET) || (BRIDGE && NET))
(GARP && NET) => STP
(BRIDGE && NET) => STP
GARP => (VLAN_8021Q_GVRP && (NET && VLAN_8021Q))
(VLAN_8021Q_GVRP && (NET && VLAN_8021Q)) => GARP
NET || ~BRIDGE
NET_DSA_TAG_DSA => (NET_DSA_MV88E6131 && (NET && NET_DSA))
(NET_DSA_MV88E6131 && (NET && NET_DSA)) => NET_DSA_TAG_DSA
NET_DSA_TAG_EDSA => (NET_DSA_MV88E6123_61_65 && (NET && NET_DSA))
(NET_DSA_MV88E6123_61_65 && (NET && NET_DSA)) => NET_DSA_TAG_EDSA
NET_DSA_TAG_TRAILER => (NET_DSA_MV88E6060 && (NET && NET_DSA))
(NET_DSA_MV88E6060 && (NET && NET_DSA)) => NET_DSA_TAG_TRAILER
NET_DSA_MV88E6XXX => ((NET_DSA_MV88E6131 && (NET && NET_DSA)) || (NET_DSA_MV88E6123_61_65 && (NET && NET_DSA)))
(NET_DSA_MV88E6131 && (NET && NET_DSA)) => NET_DSA_MV88E6XXX
(NET_DSA_MV88E6123_61_65 && (NET && NET_DSA)) => NET_DSA_MV88E6XXX
(NET && NET_DSA) || ~NET_DSA_MV88E6060
NET_DSA_MV88E6XXX_NEED_PPU => (NET_DSA_MV88E6131 && (NET && NET_DSA))
(NET_DSA_MV88E6131 && (NET && NET_DSA)) => NET_DSA_MV88E6XXX_NEED_PPU
(NET && NET_DSA) || ~NET_DSA_MV88E6131
(NET && NET_DSA) || ~NET_DSA_MV88E6123_61_65
(NET && (EXPERIMENTAL && ~S390)) || ~NET_DSA
(NET && VLAN_8021Q) || ~VLAN_8021Q_GVRP
NET || ~VLAN_8021Q
(NET && (DECNET && EXPERIMENTAL)) || ~DECNET_ROUTER
NET || ~DECNET
LLC => ((((((IPX && NET) || (ATALK && NET)) || (STP && NET)) || (LLC2 && NET)) || (TR && (NETDEVICES && (~UML && (PCI || (ISA || (MCA || CCW))))))) || (BRIDGE && NET))
(IPX && NET) => LLC
(ATALK && NET) => LLC
(STP && NET) => LLC
(LLC2 && NET) => LLC
(TR && (NETDEVICES && (~UML && (PCI || (ISA || (MCA || CCW)))))) => LLC
(BRIDGE && NET) => LLC
NET || ~LLC2
(NET && IPX) || ~IPX_INTERN
NET || ~IPX
(NET && (DEV_APPLETALK && ((ISA || EISA) && ISA_DMA_API))) || ~LTPC
(NET && COPS) || ~COPS_DAYNA
(NET && COPS) || ~COPS_TANGENT
(NET && (DEV_APPLETALK && (ISA || EISA))) || ~COPS
(NET && IPDDP) || ~IPDDP_ENCAP
(NET && IPDDP) || ~IPDDP_DECAP
(NET && (DEV_APPLETALK && ATALK)) || ~IPDDP
(NET && ATALK) || ~DEV_APPLETALK
NET || ~ATALK
(NET && EXPERIMENTAL) || ~X25
(NET && EXPERIMENTAL) || ~LAPB
(NET && ECONET) || ~ECONET_AUNUDP
(NET && ECONET) || ~ECONET_NATIVE
(NET && (EXPERIMENTAL && INET)) || ~ECONET
(NET && EXPERIMENTAL) || ~WAN_ROUTER
NET || ~PHONET
(NET && EXPERIMENTAL) || ~IEEE802154
(NET && NET_SCHED) || ~NET_SCH_CBQ
(NET && NET_SCHED) || ~NET_SCH_HTB
(NET && NET_SCHED) || ~NET_SCH_HFSC
(NET && (NET_SCHED && ATM)) || ~NET_SCH_ATM
(NET && NET_SCHED) || ~NET_SCH_PRIO
(NET && NET_SCHED) || ~NET_SCH_MULTIQ
(NET && NET_SCHED) || ~NET_SCH_RED
(NET && NET_SCHED) || ~NET_SCH_SFQ
(NET && NET_SCHED) || ~NET_SCH_TEQL
(NET && NET_SCHED) || ~NET_SCH_TBF
(NET && NET_SCHED) || ~NET_SCH_GRED
(NET && NET_SCHED) || ~NET_SCH_DSMARK
(NET && NET_SCHED) || ~NET_SCH_NETEM
(NET && NET_SCHED) || ~NET_SCH_DRR
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_SCH_INGRESS
NET_CLS => ((((((((((NET_CLS_FW && (NET && NET_SCHED)) || (NET_CLS_U32 && (NET && NET_SCHED))) || (NET_EMATCH && (NET && NET_SCHED))) || (NET_CLS_ROUTE4 && (NET && NET_SCHED))) || (NET_CLS_CGROUP && (NET && (NET_SCHED && CGROUPS)))) || (NET_CLS_RSVP && (NET && NET_SCHED))) || (NET_CLS_FLOW && (NET && NET_SCHED))) || (NET_CLS_BASIC && (NET && NET_SCHED))) || (NET_CLS_TCINDEX && (NET && NET_SCHED))) || (NET_CLS_RSVP6 && (NET && NET_SCHED)))
(NET_CLS_FW && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_U32 && (NET && NET_SCHED)) => NET_CLS
(NET_EMATCH && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_ROUTE4 && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_CGROUP && (NET && (NET_SCHED && CGROUPS))) => NET_CLS
(NET_CLS_RSVP && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_FLOW && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_BASIC && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_TCINDEX && (NET && NET_SCHED)) => NET_CLS
(NET_CLS_RSVP6 && (NET && NET_SCHED)) => NET_CLS
(NET && NET_SCHED) || ~NET_CLS_BASIC
(NET && NET_SCHED) || ~NET_CLS_TCINDEX
(NET && NET_SCHED) || ~NET_CLS_ROUTE4
NET_CLS_ROUTE => ((NET_CLS_ROUTE4 && (NET && NET_SCHED)) || (NETFILTER_XT_MATCH_REALM && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NET_CLS_ROUTE4 && (NET && NET_SCHED)) => NET_CLS_ROUTE
(NETFILTER_XT_MATCH_REALM && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => NET_CLS_ROUTE
(NET && NET_SCHED) || ~NET_CLS_FW
(NET && (NET_SCHED && NET_CLS_U32)) || ~CLS_U32_PERF
(NET && (NET_SCHED && NET_CLS_U32)) || ~CLS_U32_MARK
(NET && NET_SCHED) || ~NET_CLS_U32
(NET && NET_SCHED) || ~NET_CLS_RSVP
(NET && NET_SCHED) || ~NET_CLS_RSVP6
(NET && NET_SCHED) || ~NET_CLS_FLOW
(NET && (NET_SCHED && CGROUPS)) || ~NET_CLS_CGROUP
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_STACK
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_CMP
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_NBYTE
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_U32
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_META
(NET && (NET_SCHED && NET_EMATCH)) || ~NET_EMATCH_TEXT
(NET && NET_SCHED) || ~NET_EMATCH
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_POLICE
(NET && (NET_SCHED && NET_ACT_GACT)) || ~GACT_PROB
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_GACT
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_MIRRED
(NET && (NET_SCHED && (NET_CLS_ACT && (NETFILTER && IP_NF_IPTABLES)))) || ~NET_ACT_IPT
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_NAT
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_PEDIT
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_SIMP
(NET && (NET_SCHED && NET_CLS_ACT)) || ~NET_ACT_SKBEDIT
(NET && NET_SCHED) || ~NET_CLS_ACT
(NET && (NET_SCHED && (NET_CLS_U32 || NET_CLS_FW))) || ~NET_CLS_IND
NET || ~NET_SCHED
NET_SCH_FIFO => (NET_SCHED && NET)
(NET_SCHED && NET) => NET_SCH_FIFO
NET || ~DCB
(NET && PROC_FS) || ~NET_PKTGEN
(NET && (INET && (EXPERIMENTAL && (PROC_FS && KPROBES)))) || ~NET_TCPPROBE
(NET && (INET && (EXPERIMENTAL && TRACEPOINTS))) || ~NET_DROP_MONITOR
(NET && (AX25_DAMA_SLAVE && BROKEN)) || ~AX25_DAMA_MASTER
(NET && AX25) || (AX25_DAMA_SLAVE => (NET && AX25))
(NET && AX25) || ((NET && AX25) => AX25_DAMA_SLAVE)
(NET && AX25) || ~NETROM
(NET && AX25) || ~ROSE
(NET && (HAMRADIO && AX25)) || ~MKISS
(NET && (HAMRADIO && AX25)) || ~c6PACK
(NET && (HAMRADIO && AX25)) || ~BPQETHER
(NET && (HAMRADIO && (ISA && (AX25 && (BROKEN_ON_SMP && ISA_DMA_API))))) || ~DMASCC
(NET && (HAMRADIO && (AX25 && SCC))) || ~SCC_DELAY
(NET && (HAMRADIO && (AX25 && SCC))) || ~SCC_TRXECHO
(NET && (HAMRADIO && (ISA && (AX25 && ISA_DMA_API)))) || ~SCC
(NET && (HAMRADIO && (AX25 && ~S390))) || ~BAYCOM_SER_FDX
(NET && (HAMRADIO && (AX25 && ~S390))) || ~BAYCOM_SER_HDX
(NET && (HAMRADIO && (PARPORT && AX25))) || ~BAYCOM_PAR
(NET && (HAMRADIO && (PARPORT && (AX25 && ~c64BIT)))) || ~BAYCOM_EPP
(NET && (HAMRADIO && (AX25 && ~S390))) || ~YAM
(NET && HAMRADIO) || ~AX25
(NET && ~S390) || ~HAMRADIO
(NET && CAN) || ~CAN_RAW
(NET && CAN) || ~CAN_BCM
(NET && CAN) || ~CAN_VCAN
(NET && (CAN && CAN_DEV)) || (CAN_CALC_BITTIMING => (NET && (CAN && CAN_DEV)))
(NET && (CAN && CAN_DEV)) || ((NET && (CAN && CAN_DEV)) => CAN_CALC_BITTIMING)
(NET && (CAN && (CAN_DEV && ARCH_AT91SAM9263))) || ~CAN_AT91
(NET && (CAN && (CAN_SJA1000 && ISA))) || ~CAN_SJA1000_ISA
(NET && (CAN && CAN_SJA1000)) || ~CAN_SJA1000_PLATFORM
(NET && (CAN && (CAN_SJA1000 && PPC_OF))) || ~CAN_SJA1000_OF_PLATFORM
(NET && (CAN && (CAN_SJA1000 && PCI))) || ~CAN_EMS_PCI
(NET && (CAN && (CAN_SJA1000 && PCI))) || ~CAN_KVASER_PCI
(NET && (CAN && (CAN_DEV && HAS_IOMEM))) || ~CAN_SJA1000
(NET && (CAN && (USB && CAN_DEV))) || ~CAN_EMS_USB
(NET && CAN) || (CAN_DEV => (NET && CAN))
(NET && CAN) || ((NET && CAN) => CAN_DEV)
(NET && CAN) || ~CAN_DEBUG_DEVICES
NET || ~CAN
(NET && IRDA) || ~IRLAN
(NET && (IRDA && PPP)) || ~IRNET
(NET && IRDA) || ~IRCOMM
(NET && IRDA) || ~IRDA_ULTRA
(NET && IRDA) || ~IRDA_CACHE_LAST_LSAP
(NET && IRDA) || ~IRDA_FAST_RR
(NET && IRDA) || ~IRDA_DEBUG
(NET && IRDA) || ~IRTTY_SIR
(NET && (IRDA && (BFIN_SIR && ~SERIAL_BFIN_UART0))) || ~BFIN_SIR0
(NET && (IRDA && (BFIN_SIR && (~SERIAL_BFIN_UART1 && (~BF531 && (~BF532 && (~BF533 && ~BF561))))))) || ~BFIN_SIR1
(NET && (IRDA && (BFIN_SIR && (~SERIAL_BFIN_UART2 && (BF54x || (BF538 || BF539)))))) || ~BFIN_SIR2
(NET && (IRDA && (BFIN_SIR && (~SERIAL_BFIN_UART3 && BF54x)))) || ~BFIN_SIR3
~DMA_UNCACHED_NONE || ~SIR_BFIN_DMA
NET && (IRDA && BFIN_SIR)
(NET && (BLACKFIN && IRDA)) || ~BFIN_SIR
(NET && (IRTTY_SIR && (DONGLE && IRDA))) || ~ESI_DONGLE
(NET && (IRTTY_SIR && (DONGLE && IRDA))) || ~ACTISYS_DONGLE
(NET && (IRTTY_SIR && (DONGLE && IRDA))) || ~TEKRAM_DONGLE
(NET && (IRTTY_SIR && (DONGLE && IRDA))) || ~TOIM3232_DONGLE
(NET && (IRTTY_SIR && (DONGLE && IRDA))) || ~LITELINK_DONGLE
(NET && (IRTTY_SIR && (DONGLE && (IRDA && EXPERIMENTAL)))) || ~MA600_DONGLE
(NET && (IRTTY_SIR && (DONGLE && (IRDA && EXPERIMENTAL)))) || ~GIRBIL_DONGLE
(NET && (IRTTY_SIR && (DONGLE && (IRDA && EXPERIMENTAL)))) || ~MCP2120_DONGLE
(NET && (IRTTY_SIR && (DONGLE && (IRDA && EXPERIMENTAL)))) || ~OLD_BELKIN_DONGLE
(NET && (IRTTY_SIR && (DONGLE && (IRDA && EXPERIMENTAL)))) || ~ACT200L_DONGLE
(NET && (IRDA && IRTTY_SIR)) || ~DONGLE
(NET && (IRDA && (USB && EXPERIMENTAL))) || ~KINGSUN_DONGLE
(NET && (IRTTY_SIR && (ARCH_EP7211 && (IRDA && EXPERIMENTAL)))) || ~EP7211_DONGLE
(NET && (IRDA && (USB && EXPERIMENTAL))) || ~KSDAZZLE_DONGLE
(NET && (IRDA && (USB && EXPERIMENTAL))) || ~KS959_DONGLE
(NET && (IRDA && USB)) || ~USB_IRDA
(NET && (IRDA && (USB && EXPERIMENTAL))) || ~SIGMATEL_FIR
(NET && (IRDA && ISA_DMA_API)) || ~NSC_FIR
(NET && (IRDA && ISA_DMA_API)) || ~WINBOND_FIR
(NET && (IRDA && (PCI && (~c64BIT && VIRT_TO_BUS)))) || ~TOSHIBA_FIR
(NET && (SOC_AU1000 && IRDA)) || ~AU1000_FIR
(NET && (EXPERIMENTAL && (IRDA && ISA_DMA_API))) || ~SMC_IRCC_FIR
(NET && (EXPERIMENTAL && (IRDA && ISA_DMA_API))) || ~ALI_FIR
(NET && (EXPERIMENTAL && (IRDA && PCI))) || ~VLSI_FIR
(NET && (ARCH_SA1100 && IRDA)) || ~SA1100_FIR
(NET && (IRDA && ISA_DMA_API)) || ~VIA_FIR
(NET && (ARCH_PXA && IRDA)) || ~PXA_FICP
(NET && (IRDA && (USB && EXPERIMENTAL))) || ~MCS_FIR
(NET && ~S390) || ~IRDA
(NET && BT) || ~BT_L2CAP
(NET && BT) || ~BT_SCO
(NET && BT_RFCOMM) || ~BT_RFCOMM_TTY
(NET && (BT && BT_L2CAP)) || ~BT_RFCOMM
(NET && BT_BNEP) || ~BT_BNEP_MC_FILTER
(NET && BT_BNEP) || ~BT_BNEP_PROTO_FILTER
(NET && (BT && BT_L2CAP)) || ~BT_BNEP
(NET && (BT && (BT_L2CAP && ISDN_CAPI))) || ~BT_CMTP
(NET && (BT && (BT_L2CAP && INPUT))) || ~BT_HIDP
(NET && (BT && USB)) || ~BT_HCIBTUSB
(NET && (BT && MMC)) || ~BT_HCIBTSDIO
(NET && (BT && BT_HCIUART)) || ~BT_HCIUART_H4
(NET && (BT && BT_HCIUART)) || ~BT_HCIUART_BCSP
(NET && (BT && BT_HCIUART)) || ~BT_HCIUART_LL
(NET && BT) || ~BT_HCIUART
(NET && (BT && USB)) || ~BT_HCIBCM203X
(NET && (BT && USB)) || ~BT_HCIBPA10X
(NET && (BT && USB)) || ~BT_HCIBFUSB
(NET && (BT && PCMCIA)) || ~BT_HCIDTL1
(NET && (BT && PCMCIA)) || ~BT_HCIBT3C
(NET && (BT && PCMCIA)) || ~BT_HCIBLUECARD
(NET && (BT && PCMCIA)) || ~BT_HCIBTUART
(NET && BT) || ~BT_HCIVHCI
(NET && (BT && (BT_MRVL && MMC))) || ~BT_MRVL_SDIO
(NET && BT) || ~BT_MRVL
(NET && (~S390 && (RFKILL || ~RFKILL))) || ~BT
(NET && AF_RXRPC) || ~AF_RXRPC_DEBUG
(NET && AF_RXRPC) || ~RXKAD
(NET && (INET && EXPERIMENTAL)) || (AF_RXRPC => (AFS_FS && (NETWORK_FILESYSTEMS && (INET && EXPERIMENTAL))))
(NET && (INET && EXPERIMENTAL)) || ((AFS_FS && (NETWORK_FILESYSTEMS && (INET && EXPERIMENTAL))) => AF_RXRPC)
FIB_RULES => (((IP_MULTIPLE_TABLES && (NET && (INET && IP_ADVANCED_ROUTER))) || (DECNET_ROUTER && (NET && (DECNET && EXPERIMENTAL)))) || (IPV6_MULTIPLE_TABLES && (NET && (INET && (IPV6 && EXPERIMENTAL)))))
(IP_MULTIPLE_TABLES && (NET && (INET && IP_ADVANCED_ROUTER))) => FIB_RULES
(DECNET_ROUTER && (NET && (DECNET && EXPERIMENTAL))) => FIB_RULES
(IPV6_MULTIPLE_TABLES && (NET && (INET && (IPV6 && EXPERIMENTAL)))) => FIB_RULES
(NET && (WIRELESS && CFG80211)) || ~NL80211_TESTMODE
(NET && (WIRELESS && CFG80211)) || ~CFG80211_DEVELOPER_WARNINGS
(NET && (WIRELESS && CFG80211)) || ~CFG80211_REG_DEBUG
(NET && (WIRELESS && CFG80211)) || (CFG80211_DEFAULT_PS => (NET && (WIRELESS && CFG80211)))
(NET && (WIRELESS && CFG80211)) || ((NET && (WIRELESS && CFG80211)) => CFG80211_DEFAULT_PS)
(NET && (WIRELESS && (RFKILL || ~RFKILL))) || ~CFG80211
~CFG80211_DEFAULT_PS_VALUE
(NET && (WIRELESS && (CFG80211 && DEBUG_FS))) || ~CFG80211_DEBUGFS
(NET && WIRELESS) || ~WIRELESS_OLD_REGULATORY
(NET && (WIRELESS && (WIRELESS_EXT && SYSFS))) || (WIRELESS_EXT_SYSFS => (NET && (WIRELESS && (WIRELESS_EXT && SYSFS))))
(NET && (WIRELESS && (WIRELESS_EXT && SYSFS))) || ((NET && (WIRELESS && (WIRELESS_EXT && SYSFS))) => WIRELESS_EXT_SYSFS)
(NET && WIRELESS) || (WIRELESS_EXT => (((((((((((((((((((((STRIP && (NETDEVICES && (WLAN && (INET && WLAN_PRE80211)))) || (AIRO_CS && (NETDEVICES && (WLAN && (PCMCIA && ((BROKEN || ~M32R) && WLAN_80211)))))) || (IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211)))) || (IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (GELIC_WIRELESS && (NETDEVICES && (NETDEV_1000 && GELIC_NET)))) || (PCMCIA_WAVELAN && (NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211))))) || (PCMCIA_RAYCS && (NETDEVICES && (WLAN && (PCMCIA && WLAN_80211))))) || (ATMEL && (NETDEVICES && (WLAN && ((PCI || PCMCIA) && WLAN_80211))))) || (AIRO && (NETDEVICES && (WLAN && (ISA_DMA_API && (WLAN_80211 && (PCI || BROKEN))))))) || (PRISM54 && (NETDEVICES && (WLAN && (PCI && (EXPERIMENTAL && WLAN_80211)))))) || (HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211)))))) || (USB_ZD1201 && (NETDEVICES && (WLAN && (USB && WLAN_80211))))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (PCMCIA_WL3501 && (NETDEVICES && (WLAN && (EXPERIMENTAL && (PCMCIA && WLAN_80211)))))) || (HOSTAP && (NETDEVICES && (WLAN && WLAN_80211)))) || (ARLAN && (NETDEVICES && (WLAN && (ISA && (~c64BIT && WLAN_PRE80211)))))) || (PCMCIA_ATMEL && (NETDEVICES && (WLAN && (ATMEL && PCMCIA))))) || (WAVELAN && (NETDEVICES && (WLAN && (ISA && WLAN_PRE80211))))) || (PCMCIA_NETWAVE && (NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211))))) || (NET && WIRELESS)))
(NET && WIRELESS) || ((STRIP && (NETDEVICES && (WLAN && (INET && WLAN_PRE80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((AIRO_CS && (NETDEVICES && (WLAN && (PCMCIA && ((BROKEN || ~M32R) && WLAN_80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211))) => WIRELESS_EXT)
(NET && WIRELESS) || ((IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((GELIC_WIRELESS && (NETDEVICES && (NETDEV_1000 && GELIC_NET))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PCMCIA_WAVELAN && (NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PCMCIA_RAYCS && (NETDEVICES && (WLAN && (PCMCIA && WLAN_80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((ATMEL && (NETDEVICES && (WLAN && ((PCI || PCMCIA) && WLAN_80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((AIRO && (NETDEVICES && (WLAN && (ISA_DMA_API && (WLAN_80211 && (PCI || BROKEN)))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PRISM54 && (NETDEVICES && (WLAN && (PCI && (EXPERIMENTAL && WLAN_80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((USB_ZD1201 && (NETDEVICES && (WLAN && (USB && WLAN_80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PCMCIA_WL3501 && (NETDEVICES && (WLAN && (EXPERIMENTAL && (PCMCIA && WLAN_80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => WIRELESS_EXT)
(NET && WIRELESS) || ((ARLAN && (NETDEVICES && (WLAN && (ISA && (~c64BIT && WLAN_PRE80211))))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PCMCIA_ATMEL && (NETDEVICES && (WLAN && (ATMEL && PCMCIA)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((WAVELAN && (NETDEVICES && (WLAN && (ISA && WLAN_PRE80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((PCMCIA_NETWAVE && (NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211)))) => WIRELESS_EXT)
(NET && WIRELESS) || ((NET && WIRELESS) => WIRELESS_EXT)
(NET && WIRELESS) || (LIB80211 => ((((((IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) || (HOSTAP && (NETDEVICES && (WLAN && WLAN_80211)))) || (IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))))) || (LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211)))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))))
(NET && WIRELESS) || ((IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211)
(NET && WIRELESS) || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => LIB80211)
(NET && WIRELESS) || ((IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211)
(NET && WIRELESS) || ((IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))))) => LIB80211)
(NET && WIRELESS) || ((LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211))) => LIB80211)
(NET && WIRELESS) || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211)
LIB80211_CRYPT_WEP => ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))))
(HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => LIB80211_CRYPT_WEP
(LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211_CRYPT_WEP
LIB80211_CRYPT_CCMP => ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))))
(HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => LIB80211_CRYPT_CCMP
(LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211_CRYPT_CCMP
LIB80211_CRYPT_TKIP => ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))))
(HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => LIB80211_CRYPT_TKIP
(LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIB80211_CRYPT_TKIP
(NET && (WIRELESS && LIB80211)) || ~LIB80211_DEBUG
(NET && (WIRELESS && CFG80211)) || ~MAC80211
(NET && (WIRELESS && (MAC80211 && EMBEDDED))) || ~MAC80211_RC_PID
(NET && (WIRELESS && (MAC80211 && EMBEDDED))) || (MAC80211_RC_MINSTREL => (NET && (WIRELESS && MAC80211)))
(NET && (WIRELESS && (MAC80211 && EMBEDDED))) || ((NET && (WIRELESS && MAC80211)) => MAC80211_RC_MINSTREL)
MAC80211_RC_PID || ~MAC80211_RC_DEFAULT_PID
MAC80211_RC_MINSTREL || ~MAC80211_RC_DEFAULT_MINSTREL
NET && (WIRELESS && MAC80211)
~MAC80211_RC_DEFAULT
(NET && (WIRELESS && (MAC80211 && EXPERIMENTAL))) || ~MAC80211_MESH
(NET && (WIRELESS && MAC80211)) || (MAC80211_LEDS => (((ATH9K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) || (ATH5K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211))))))) || (IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && (EXPERIMENTAL && IWLWIFI_LEDS)))))))))
(NET && (WIRELESS && MAC80211)) || ((ATH9K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) => MAC80211_LEDS)
(NET && (WIRELESS && MAC80211)) || ((ATH5K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) => MAC80211_LEDS)
(NET && (WIRELESS && MAC80211)) || ((IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && (EXPERIMENTAL && IWLWIFI_LEDS))))))) => MAC80211_LEDS)
(NET && (WIRELESS && (MAC80211 && DEBUG_FS))) || ~MAC80211_DEBUGFS
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_DEBUG_PACKET_ALIGNMENT
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_NOINLINE
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_VERBOSE_DEBUG
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_HT_DEBUG
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_TKIP_DEBUG
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_IBSS_DEBUG
(NET && (WIRELESS && MAC80211_DEBUG_MENU)) || ~MAC80211_VERBOSE_PS_DEBUG
(NET && (WIRELESS && (MAC80211_DEBUG_MENU && MAC80211_MESH))) || ~MAC80211_VERBOSE_MPL_DEBUG
(NET && (WIRELESS && (MAC80211_DEBUG_MENU && MAC80211_DEBUGFS))) || ~MAC80211_DEBUG_COUNTERS
(NET && (WIRELESS && (MAC80211_DEBUG_MENU && EVENT_TRACING))) || ~MAC80211_DRIVER_API_TRACER
(NET && (WIRELESS && MAC80211)) || ~MAC80211_DEBUG_MENU
(NET && ~S390) || (WIRELESS => (NET && ~S390))
(NET && ~S390) || ((NET && ~S390) => WIRELESS)
(NET && WIMAX) || ~WIMAX_DEBUG_LEVEL
(NET && (RFKILL || ~RFKILL)) || ~WIMAX
RFKILL_LEDS => (NET && (RFKILL && (LEDS_TRIGGERS || RFKILL)))
(NET && (RFKILL && ((INPUT || RFKILL) && EMBEDDED))) || (RFKILL_INPUT => (NET && (RFKILL && ((INPUT || RFKILL) && ~EMBEDDED))))
NET || ~RFKILL
(NET && (NET_9P && (EXPERIMENTAL && VIRTIO))) || ~NET_9P_VIRTIO
(NET && (NET_9P && (INET && (INFINIBAND && (INFINIBAND_ADDR_TRANS && EXPERIMENTAL))))) || ~NET_9P_RDMA
(NET && NET_9P) || ~NET_9P_DEBUG
(NET && EXPERIMENTAL) || ~NET_9P
HOTPLUG || ~UEVENT_HELPER_PATH
DEVTMPFS || ~DEVTMPFS_MOUNT
(HOTPLUG && (SHMEM && TMPFS)) || ~DEVTMPFS
EXPERIMENTAL || STANDALONE
FW_LOADER || (FIRMWARE_IN_KERNEL => FW_LOADER)
FW_LOADER || (FW_LOADER => FIRMWARE_IN_KERNEL)
FW_LOADER || ~EXTRA_FIRMWARE
(HOTPLUG && EMBEDDED) || (FW_LOADER => (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((LIBERTAS_THINFIRM && (NETDEVICES && (WLAN && (WLAN_80211 && MAC80211)))) || (SCSI_IPR && (SCSI_LOWLEVEL && (PCI && (SCSI && ATA))))) || (BNX2X && (NETDEVICES && (NETDEV_10000 && PCI)))) || (IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (B43 && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))))) || (SND_MONA && (SOUND && (~M68K && (SND && SND_PCI))))) || (USB_CXACRU && (USB_SUPPORT && USB_ATM))) || (BT_HCIBT3C && (NET && (BT && PCMCIA)))) || (BT_HCIBCM203X && (NET && (BT && USB)))) || (SCSI_MVSAS && (SCSI_LOWLEVEL && (SCSI && PCI)))) || (SND_GINA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (ISI && (SERIAL_NONSTANDARD && PCI))) || (ATMEL && (NETDEVICES && (WLAN && ((PCI || PCMCIA) && WLAN_80211))))) || (PRISM54 && (NETDEVICES && (WLAN && (PCI && (EXPERIMENTAL && WLAN_80211)))))) || (BT_HCIBFUSB && (NET && (BT && USB)))) || (SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (DELL_RBU && X86)) || (ATM_FORE200E && (ATM_DRIVERS && (NETDEVICES && (ATM && (PCI || SBUS)))))) || (SND_INDIGOIOX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_GINA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (DRM_RADEON && (HAS_IOMEM && (DRM && PCI)))) || (SND_MIA && (SOUND && (~M68K && (SND && SND_PCI))))) || (IWM && (NETDEVICES && (WLAN && (MMC && (WLAN_80211 && (EXPERIMENTAL && CFG80211))))))) || (MICROCODE_INTEL && MICROCODE)) || (B43LEGACY && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))))) || (SND_INDIGODJ && (SOUND && (~M68K && (SND && SND_PCI))))) || (MICROCODE_AMD && MICROCODE)) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))))) || (USB_ZD1201 && (NETDEVICES && (WLAN && (USB && WLAN_80211))))) || (AR9170_USB && (NETDEVICES && (WLAN && (ATH_COMMON && (USB && (MAC80211 && WLAN_80211))))))) || (SND_DARLA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (WL1271 && (NETDEVICES && (WLAN && (WL12XX && (SPI_MASTER && GENERIC_HARDIRQS)))))) || (SND_SB16_CSP && (SOUND && (~M68K && (SND && (SND_ISA && ((SND_SB16 || SND_SBAWE) && (BROKEN || ~PPC)))))))) || (SND_INDIGO && (SOUND && (~M68K && (SND && SND_PCI))))) || (USB_IRDA && (NET && (IRDA && USB)))) || MICROCODE) || (BT_MRVL_SDIO && (NET && (BT && (BT_MRVL && MMC))))) || (SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI))))) || (DRM_R128 && (HAS_IOMEM && (DRM && PCI)))) || (LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211)))) || (SERIAL_ICOM && (HAS_IOMEM && (PCI && (PPC_ISERIES || PPC_PSERIES))))) || (WIMAX_I2400M && (NETDEVICES && WIMAX))) || (TMS380TR && (NETDEVICES && (TR && (PCI || ((ISA && ISA_DMA_API) || MCA)))))) || (USB_SPEEDTOUCH && (USB_SUPPORT && USB_ATM))) || (SCSI_AIC94XX && (SCSI_LOWLEVEL && (SCSI && PCI)))) || (P54_COMMON && (NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))))) || (DRM_MGA && (HAS_IOMEM && DRM))) || (MYRI10GE && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (LIBERTAS_CS && (NETDEVICES && (WLAN && (LIBERTAS && PCMCIA))))) || (HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211)))))) || (SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (ZD1211RW && (NETDEVICES && (WLAN && (USB && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))))) || (SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI))))) || (UWB_I1480U && (UWB && UWB_HWA))) || (PCMCIA_ATMEL && (NETDEVICES && (WLAN && (ATMEL && PCMCIA))))) || (SCSI_QLA_FC && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (WL1251 && (NETDEVICES && (WLAN && (WL12XX && GENERIC_HARDIRQS))))) || (USB_UEAGLEATM && (USB_SUPPORT && USB_ATM))) || (SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI))))) || (CYCLADES && (SERIAL_NONSTANDARD && (PCI || ISA)))) || (SERIAL_QE && (HAS_IOMEM && QUICC_ENGINE))) || (IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (SPIDER_NET && (NETDEVICES && (NETDEV_1000 && (PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)))))) || (AT76C50X_USB && (NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && USB)))))) || (SND_DARLA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL))))))) || (SND_INDIGODJX && (SOUND && (~M68K && (SND && SND_PCI))))) || (PCMCIA_LOAD_CIS && (PCCARD && (PCMCIA && EXPERIMENTAL)))) || (BNX2 && (NETDEVICES && (NETDEV_1000 && PCI)))) || (MOXA_INTELLIO && (SERIAL_NONSTANDARD && (ISA || (EISA || PCI))))) || (SND_INDIGOIO && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (RT2X00_LIB_FIRMWARE && (NETDEVICES && (WLAN && RT2X00)))) || (USB_ISIGHTFW && (USB_SUPPORT && USB))) || (IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))))) || (CHELSIO_T3 && (NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS)))) || HOTPLUG))
(HOTPLUG && EMBEDDED) || ((LIBERTAS_THINFIRM && (NETDEVICES && (WLAN && (WLAN_80211 && MAC80211)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SCSI_IPR && (SCSI_LOWLEVEL && (PCI && (SCSI && ATA)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BNX2X && (NETDEVICES && (NETDEV_10000 && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((B43 && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_MONA && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_CXACRU && (USB_SUPPORT && USB_ATM)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BT_HCIBT3C && (NET && (BT && PCMCIA))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BT_HCIBCM203X && (NET && (BT && USB))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SCSI_MVSAS && (SCSI_LOWLEVEL && (SCSI && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_GINA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((ISI && (SERIAL_NONSTANDARD && PCI)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((ATMEL && (NETDEVICES && (WLAN && ((PCI || PCMCIA) && WLAN_80211)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((PRISM54 && (NETDEVICES && (WLAN && (PCI && (EXPERIMENTAL && WLAN_80211))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BT_HCIBFUSB && (NET && (BT && USB))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((DELL_RBU && X86) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((ATM_FORE200E && (ATM_DRIVERS && (NETDEVICES && (ATM && (PCI || SBUS))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_INDIGOIOX && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_GINA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_MIA && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((IWM && (NETDEVICES && (WLAN && (MMC && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((MICROCODE_INTEL && MICROCODE) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((B43LEGACY && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_INDIGODJ && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((MICROCODE_AMD && MICROCODE) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_ZD1201 && (NETDEVICES && (WLAN && (USB && WLAN_80211)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((AR9170_USB && (NETDEVICES && (WLAN && (ATH_COMMON && (USB && (MAC80211 && WLAN_80211)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_DARLA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((WL1271 && (NETDEVICES && (WLAN && (WL12XX && (SPI_MASTER && GENERIC_HARDIRQS))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_SB16_CSP && (SOUND && (~M68K && (SND && (SND_ISA && ((SND_SB16 || SND_SBAWE) && (BROKEN || ~PPC))))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_INDIGO && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_IRDA && (NET && (IRDA && USB))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || (MICROCODE => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BT_MRVL_SDIO && (NET && (BT && (BT_MRVL && MMC)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((DRM_R128 && (HAS_IOMEM && (DRM && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((LIBERTAS && (NETDEVICES && (WLAN && WLAN_80211))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SERIAL_ICOM && (HAS_IOMEM && (PCI && (PPC_ISERIES || PPC_PSERIES)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((WIMAX_I2400M && (NETDEVICES && WIMAX)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((TMS380TR && (NETDEVICES && (TR && (PCI || ((ISA && ISA_DMA_API) || MCA))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_SPEEDTOUCH && (USB_SUPPORT && USB_ATM)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SCSI_AIC94XX && (SCSI_LOWLEVEL && (SCSI && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((P54_COMMON && (NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((DRM_MGA && (HAS_IOMEM && DRM)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((MYRI10GE && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((LIBERTAS_CS && (NETDEVICES && (WLAN && (LIBERTAS && PCMCIA)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((ZD1211RW && (NETDEVICES && (WLAN && (USB && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((UWB_I1480U && (UWB && UWB_HWA)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((PCMCIA_ATMEL && (NETDEVICES && (WLAN && (ATMEL && PCMCIA)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SCSI_QLA_FC && (SCSI_LOWLEVEL && (PCI && SCSI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((WL1251 && (NETDEVICES && (WLAN && (WL12XX && GENERIC_HARDIRQS)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_UEAGLEATM && (USB_SUPPORT && USB_ATM)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((CYCLADES && (SERIAL_NONSTANDARD && (PCI || ISA))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SERIAL_QE && (HAS_IOMEM && QUICC_ENGINE)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SPIDER_NET && (NETDEVICES && (NETDEV_1000 && (PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((AT76C50X_USB && (NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && USB))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_DARLA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_INDIGODJX && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((PCMCIA_LOAD_CIS && (PCCARD && (PCMCIA && EXPERIMENTAL))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((BNX2 && (NETDEVICES && (NETDEV_1000 && PCI))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((MOXA_INTELLIO && (SERIAL_NONSTANDARD && (ISA || (EISA || PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_INDIGOIO && (SOUND && (~M68K && (SND && SND_PCI)))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((RT2X00_LIB_FIRMWARE && (NETDEVICES && (WLAN && RT2X00))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((USB_ISIGHTFW && (USB_SUPPORT && USB)) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || ((CHELSIO_T3 && (NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS))) => FW_LOADER)
(HOTPLUG && EMBEDDED) || (HOTPLUG => FW_LOADER)
EXTRA_FIRMWARE || ~EXTRA_FIRMWARE_DIR
DEBUG_KERNEL || ~DEBUG_DRIVER
DEBUG_KERNEL || ~DEBUG_DEVRES
SYS_HYPERVISOR => (XEN_SYS_HYPERVISOR && (XEN && SYSFS))
(XEN_SYS_HYPERVISOR && (XEN && SYSFS)) => SYS_HYPERVISOR
CONNECTOR || (PROC_EVENTS => CONNECTOR)
NET || (CONNECTOR => (((DST && (STAGING && (~STAGING_EXCLUDE_BUILD && (NET && (CRYPTO && (SYSFS && BLK_DEV)))))) || (DM_LOG_USERSPACE && (MD && (DM_MIRROR && (EXPERIMENTAL && NET))))) || (POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET)))))
NET || ((DST && (STAGING && (~STAGING_EXCLUDE_BUILD && (NET && (CRYPTO && (SYSFS && BLK_DEV)))))) => CONNECTOR)
NET || ((DM_LOG_USERSPACE && (MD && (DM_MIRROR && (EXPERIMENTAL && NET)))) => CONNECTOR)
NET || ((POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET))) => CONNECTOR)
(MTD && MTD_DEBUG) || ~MTD_DEBUG_VERBOSE
MTD || ~MTD_DEBUG
MTD || ~MTD_TESTS
MTD || ~MTD_CONCAT
(MTD && MTD_REDBOOT_PARTS) || ~MTD_REDBOOT_DIRECTORY_BLOCK
(MTD && MTD_REDBOOT_PARTS) || ~MTD_REDBOOT_PARTS_UNALLOCATED
(MTD && MTD_REDBOOT_PARTS) || ~MTD_REDBOOT_PARTS_READONLY
(MTD && MTD_PARTITIONS) || ~MTD_REDBOOT_PARTS
(MTD_PARTITIONS && MTD) || ~MTD_CMDLINE_PARTS
(MTD && (ARM && MTD_PARTITIONS)) || ~MTD_AFS_PARTS
(MTD && ((MICROBLAZE || PPC_OF) && MTD_PARTITIONS)) || ~MTD_OF_PARTS
(MTD && MTD_PARTITIONS) || ~MTD_AR7_PARTS
MTD || (MTD_PARTITIONS => ((((((((MTD_GPIO_ADDR && (MTD && ((GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS))) || (MTD_PMC_MSP_EVM && (MTD && (PMC_MSP && MTD_CFI)))) || (MTD_TS5500 && (MTD && X86))) || (MTD_DMV182 && (MTD && DMV182))) || (MTD_PXA2XX && (MTD && ((PXA25x || PXA27x) && MTD_CFI_INTELEXT)))) || (MTD_BFIN_ASYNC && (MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS))))) || (MTD_ONENAND && MTD)) || (MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560)))))
MTD || ((MTD_GPIO_ADDR && (MTD && ((GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS))) => MTD_PARTITIONS)
MTD || ((MTD_PMC_MSP_EVM && (MTD && (PMC_MSP && MTD_CFI))) => MTD_PARTITIONS)
MTD || ((MTD_TS5500 && (MTD && X86)) => MTD_PARTITIONS)
MTD || ((MTD_DMV182 && (MTD && DMV182)) => MTD_PARTITIONS)
MTD || ((MTD_PXA2XX && (MTD && ((PXA25x || PXA27x) && MTD_CFI_INTELEXT))) => MTD_PARTITIONS)
MTD || ((MTD_BFIN_ASYNC && (MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS)))) => MTD_PARTITIONS)
MTD || ((MTD_ONENAND && MTD) => MTD_PARTITIONS)
MTD || ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) => MTD_PARTITIONS)
MTD || ~MTD_CHAR
HAVE_MTD_OTP => (((MTD_ONENAND_OTP && (MTD && MTD_ONENAND)) || (MTD_OTP && (MTD && MTD_CFI_ADV_OPTIONS))) || (MTD_DATAFLASH_OTP && (MTD && MTD_DATAFLASH)))
(MTD_ONENAND_OTP && (MTD && MTD_ONENAND)) => HAVE_MTD_OTP
(MTD_OTP && (MTD && MTD_CFI_ADV_OPTIONS)) => HAVE_MTD_OTP
(MTD_DATAFLASH_OTP && (MTD && MTD_DATAFLASH)) => HAVE_MTD_OTP
(MTD && BLOCK) || (MTD_BLKDEVS => (((((((FTL && (MTD && BLOCK)) || (INFTL && (MTD && BLOCK))) || (MTD_BLOCK && (MTD && BLOCK))) || (MTD_BLOCK_RO && (MTD && BLOCK))) || (NFTL && (MTD && BLOCK))) || (SSFDC && (MTD && BLOCK))) || (RFD_FTL && (MTD && BLOCK))))
(MTD && BLOCK) || ((FTL && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ((INFTL && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ((MTD_BLOCK && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ((NFTL && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ((SSFDC && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ((RFD_FTL && (MTD && BLOCK)) => MTD_BLKDEVS)
(MTD && BLOCK) || ~MTD_BLOCK_RO
(MTD && BLOCK) || ~MTD_BLOCK
(MTD && BLOCK) || ~FTL
(MTD && NFTL) || ~NFTL_RW
(MTD && BLOCK) || ~NFTL
(MTD && BLOCK) || ~INFTL
(MTD && BLOCK) || ~RFD_FTL
(MTD && BLOCK) || ~SSFDC
MTD || ~MTD_OOPS
MTD || ~MTD_CFI
MTD || (MTD_JEDECPROBE => (MTD_TS5500 && (MTD && X86)))
MTD || ((MTD_TS5500 && (MTD && X86)) => MTD_JEDECPROBE)
MTD_GEN_PROBE => ((MTD_JEDECPROBE && MTD) || (MTD_CFI && MTD))
(MTD_JEDECPROBE && MTD) => MTD_GEN_PROBE
(MTD_CFI && MTD) => MTD_GEN_PROBE
MTD && MTD_CFI_ADV_OPTIONS
(MTD && MTD_CFI_GEOMETRY) || (MTD_MAP_BANK_WIDTH_1 => ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) || MTD))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) => MTD_MAP_BANK_WIDTH_1)
(MTD && MTD_CFI_GEOMETRY) || (MTD => MTD_MAP_BANK_WIDTH_1)
(MTD && MTD_CFI_GEOMETRY) || (MTD_MAP_BANK_WIDTH_2 => MTD)
(MTD && MTD_CFI_GEOMETRY) || (MTD => MTD_MAP_BANK_WIDTH_2)
(MTD && MTD_CFI_GEOMETRY) || (MTD_MAP_BANK_WIDTH_4 => ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) || MTD))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) => MTD_MAP_BANK_WIDTH_4)
(MTD && MTD_CFI_GEOMETRY) || (MTD => MTD_MAP_BANK_WIDTH_4)
(MTD && MTD_CFI_GEOMETRY) || ~MTD_MAP_BANK_WIDTH_8
(MTD && MTD_CFI_GEOMETRY) || ~MTD_MAP_BANK_WIDTH_16
(MTD && MTD_CFI_GEOMETRY) || (MTD_MAP_BANK_WIDTH_32 => (MTD_DMV182 && (MTD && DMV182)))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_DMV182 && (MTD && DMV182)) => MTD_MAP_BANK_WIDTH_32)
(MTD && MTD_CFI_GEOMETRY) || (MTD_CFI_I1 => ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) || MTD))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) => MTD_CFI_I1)
(MTD && MTD_CFI_GEOMETRY) || (MTD => MTD_CFI_I1)
(MTD && MTD_CFI_GEOMETRY) || (MTD_CFI_I2 => MTD)
(MTD && MTD_CFI_GEOMETRY) || (MTD => MTD_CFI_I2)
(MTD && MTD_CFI_GEOMETRY) || (MTD_CFI_I4 => (MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_WRSBC8260 && (MTD && (SBC82xx || SBC8560))) => MTD_CFI_I4)
(MTD && MTD_CFI_GEOMETRY) || (MTD_CFI_I8 => (MTD_DMV182 && (MTD && DMV182)))
(MTD && MTD_CFI_GEOMETRY) || ((MTD_DMV182 && (MTD && DMV182)) => MTD_CFI_I8)
(MTD && MTD_CFI_ADV_OPTIONS) || ~MTD_CFI_GEOMETRY
(MTD && MTD_CFI_ADV_OPTIONS) || ~MTD_OTP
(MTD && MTD_GEN_PROBE) || ~MTD_CFI_ADV_OPTIONS
(MTD && MTD_GEN_PROBE) || ~MTD_CFI_INTELEXT
(MTD && MTD_GEN_PROBE) || (MTD_CFI_AMDSTD => ((MTD_TS5500 && (MTD && X86)) || (MTD_DMV182 && (MTD && DMV182))))
(MTD && MTD_GEN_PROBE) || ((MTD_TS5500 && (MTD && X86)) => MTD_CFI_AMDSTD)
(MTD && MTD_GEN_PROBE) || ((MTD_DMV182 && (MTD && DMV182)) => MTD_CFI_AMDSTD)
(MTD && MTD_GEN_PROBE) || ~MTD_CFI_STAA
MTD_CFI_UTIL => ((((MTD_CFI_AMDSTD && (MTD && MTD_GEN_PROBE)) || (MTD_CFI_INTELEXT && (MTD && MTD_GEN_PROBE))) || (MTD_CFI && MTD)) || (MTD_CFI_STAA && (MTD && MTD_GEN_PROBE)))
(MTD_CFI_AMDSTD && (MTD && MTD_GEN_PROBE)) => MTD_CFI_UTIL
(MTD_CFI_INTELEXT && (MTD && MTD_GEN_PROBE)) => MTD_CFI_UTIL
(MTD_CFI && MTD) => MTD_CFI_UTIL
(MTD_CFI_STAA && (MTD && MTD_GEN_PROBE)) => MTD_CFI_UTIL
MTD || (MTD_RAM => (MTD_PLATRAM && MTD))
MTD || ((MTD_PLATRAM && MTD) => MTD_RAM)
MTD || ~MTD_ROM
MTD || ~MTD_ABSENT
(MTD && (~SMP && ((MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && (EXPERIMENTAL && ARCH_MTD_XIP)))) || (MTD_XIP => (MTD && (~SMP && ((MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && (EXPERIMENTAL && (ARCH_MTD_XIP && XIP_KERNEL))))))
(MTD && (~SMP && ((MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && (EXPERIMENTAL && ARCH_MTD_XIP)))) || ((MTD && (~SMP && ((MTD_CFI_INTELEXT || MTD_CFI_AMDSTD) && (EXPERIMENTAL && (ARCH_MTD_XIP && XIP_KERNEL))))) => MTD_XIP)
MTD || ~MTD_COMPLEX_MAPPINGS
(MTD && MTD_PHYSMAP_COMPAT) || ~MTD_PHYSMAP_START
(MTD && MTD_PHYSMAP_COMPAT) || ~MTD_PHYSMAP_LEN
(MTD && MTD_PHYSMAP_COMPAT) || ~MTD_PHYSMAP_BANKWIDTH
(MTD && MTD_PHYSMAP) || ~MTD_PHYSMAP_COMPAT
(MTD && (MTD_CFI || (MTD_JEDECPROBE || (MTD_ROM || MTD_LPDDR)))) || ~MTD_PHYSMAP
(MTD && ((MICROBLAZE || PPC_OF) && (MTD_CFI || (MTD_JEDECPROBE || MTD_ROM)))) || ~MTD_PHYSMAP_OF
MTD && MTD_PMC_MSP_EVM
(MTD && (PMC_MSP && MTD_CFI)) || ~MTD_PMC_MSP_EVM
~MSP_FLASH_MAP_LIMIT
(MTD && (SPARC && (MTD_CFI && PCI))) || ~MTD_SUN_UFLASH
(MTD && (X86 && (MTD_CFI && MTD_CONCAT))) || ~MTD_SC520CDP
(MTD && (X86 && (MTD_CFI && MTD_PARTITIONS))) || ~MTD_NETSC520
(MTD && X86) || ~MTD_TS5500
(MTD && (X86 && (MTD_CFI_INTELEXT && (MTD_PARTITIONS && MTD_COMPLEX_MAPPINGS)))) || ~MTD_SBC_GXX
(MTD && ((PXA25x || PXA27x) && MTD_CFI_INTELEXT)) || ~MTD_PXA2XX
(MTD && (X86 && (MTD_JEDEC && MTD_COMPLEX_MAPPINGS))) || ~MTD_OCTAGON
(MTD && (X86 && (MTD_JEDEC && MTD_COMPLEX_MAPPINGS))) || ~MTD_VMAX
(MTD && (SCx200 && (MTD_CFI && MTD_PARTITIONS))) || ~MTD_SCx200_DOCFLASH
(MTD && (X86 && MTD_JEDECPROBE)) || ~MTD_AMD76XROM
(MTD && (X86 && MTD_JEDECPROBE)) || ~MTD_ICHXROM
(MTD && (X86 && (MTD_JEDECPROBE && PCI))) || ~MTD_ESB2ROM
(MTD && (X86 && (MTD_JEDECPROBE && PCI))) || ~MTD_CK804XROM
(MTD && (X86 && MTD_JEDECPROBE)) || ~MTD_SCB2_FLASH
(MTD && (ALPHA_TSUNAMI && MTD_COMPLEX_MAPPINGS)) || ~MTD_TSUNAMI
(MTD && (X86 && (MTD_PARTITIONS && MTD_JEDECPROBE))) || ~MTD_NETtel
(MTD && (SOC_AU1X00 && (MTD_PARTITIONS && MTD_CFI))) || ~MTD_ALCHEMY
(MTD && MTD_DILNETPC) || ~MTD_DILNETPC_BOOTSIZE
(MTD && (X86 && (MTD_CONCAT && (MTD_PARTITIONS && (MTD_CFI_INTELEXT && BROKEN))))) || ~MTD_DILNETPC
(MTD && (X86 && MTD_JEDECPROBE)) || ~MTD_L440GX
(MTD && (MTD_CFI && TQM8xxL)) || ~MTD_TQM8XXL
(MTD && (MTD_CFI && (RPXCLASSIC || RPXLITE))) || ~MTD_RPXLITE
(MTD && (MTD_CFI && MBX)) || ~MTD_MBX860
(MTD && (DBOX2 && (MTD_CFI_INTELSTD && (MTD_CFI_INTELEXT && MTD_CFI_AMDSTD)))) || ~MTD_DBOX2
(MTD && (c8xx && MTD_CFI)) || ~MTD_CFI_FLAGADM
(MTD && (MTD_CFI && (REDWOOD_4 || (REDWOOD_5 || REDWOOD_6)))) || ~MTD_REDWOOD
(MTD && (SUPERH && (SOLUTION_ENGINE && (MTD_CFI && MTD_REDBOOT_PARTS)))) || ~MTD_SOLUTIONENGINE
(MTD && (ARM && MTD_CFI)) || ~MTD_ARM_INTEGRATOR
(MTD && (MTD_CFI && ARCH_CDB89712)) || ~MTD_CDB89712
(MTD && (MTD_CFI && (ARCH_SA1100 && MTD_PARTITIONS))) || ~MTD_SA1100
(MTD && (IPAQ_HANDHELD && MTD_CFI)) || ~MTD_IPAQ
(MTD && (MTD_CFI && (ARCH_FOOTBRIDGE && MTD_COMPLEX_MAPPINGS))) || ~MTD_DC21285
(MTD && (MTD_CFI && (MTD_COMPLEX_MAPPINGS && ARCH_IXP4XX))) || ~MTD_IXP4XX
(MTD && (MTD_CFI && (MTD_COMPLEX_MAPPINGS && ARCH_IXP2000))) || ~MTD_IXP2000
(MTD && (MTD_CFI && (MTD_PARTITIONS && SA1100_FORTUNET))) || ~MTD_FORTUNET
(MTD && ARCH_AUTCPU12) || ~MTD_AUTCPU12
(MTD && (ARCH_EDB7312 && MTD_CFI)) || ~MTD_EDB7312
(MTD && (ARM && MTD_JEDECPROBE)) || ~MTD_IMPA7
(MTD && (MTD_JEDECPROBE && ARCH_CEIVA)) || ~MTD_CEIVA
(MTD && (MTD_CFI && (ARCH_H7201 || ARCH_H7202))) || ~MTD_H720X
(MTD && (MTD_CFI && ARCH_OMAP)) || ~MTD_OMAP_NOR
(MTD && (PCI && MTD_COMPLEX_MAPPINGS)) || ~MTD_PCI
(MTD && MTD_PCMCIA) || ~MTD_PCMCIA_ANONYMOUS
(MTD && (PCMCIA && (MTD_COMPLEX_MAPPINGS && BROKEN))) || ~MTD_PCMCIA
(MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS))) || (MTD_BFIN_ASYNC => (MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS))))
(MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS))) || ((MTD && (BFIN533_STAMP && (MTD_CFI && MTD_COMPLEX_MAPPINGS))) => MTD_BFIN_ASYNC)
(MTD && ((GENERIC_GPIO || GPIOLIB) && MTD_COMPLEX_MAPPINGS)) || ~MTD_GPIO_ADDR
(MTD && (MTD_PARTITIONS && (MTD_RAM && ~MMU))) || ~MTD_UCLINUX
(MTD && (SBC82xx || SBC8560)) || ~MTD_WRSBC8260
(MTD && DMV182) || ~MTD_DMV182
(MTD && PCI) || ~MTD_INTEL_VR_NOR
(MTD && (TOSHIBA_RBTX4939 && (MTD_CFI && MTD_COMPLEX_MAPPINGS))) || ~MTD_RBTX4939
MTD || ~MTD_PLATRAM
(MTD && MAPLE) || ~MTD_VMU
(MTD && MTD_PMC551) || ~MTD_PMC551_BUGFIX
(MTD && MTD_PMC551) || ~MTD_PMC551_DEBUG
(MTD && PCI) || ~MTD_PMC551
(MTD && MACH_DECSTATION) || ~MTD_MS02NV
(MTD && MTD_DATAFLASH) || ~MTD_DATAFLASH_WRITE_VERIFY
(MTD && MTD_DATAFLASH) || ~MTD_DATAFLASH_OTP
(MTD && (SPI_MASTER && EXPERIMENTAL)) || ~MTD_DATAFLASH
(MTD && MTD_M25P80) || (M25PXX_USE_FAST_READ => (MTD && MTD_M25P80))
(MTD && MTD_M25P80) || ((MTD && MTD_M25P80) => M25PXX_USE_FAST_READ)
(MTD && (SPI_MASTER && EXPERIMENTAL)) || ~MTD_M25P80
(MTD && SPI_MASTER) || ~MTD_SST25L
MTD || ~MTD_SLRAM
MTD || ~MTD_PHRAM
(MTD && SA1100_LART) || ~MTD_LART
(MTD && MTD_MTDRAM) || ~MTDRAM_TOTAL_SIZE
(MTD && MTD_MTDRAM) || ~MTDRAM_ERASE_SIZE
(MTD && MTD_MTDRAM) || ~MTDRAM_ABS_POS
MTD || ~MTD_MTDRAM
(MTD && BLOCK) || ~MTD_BLOCK2MTD
MTD || ~MTD_DOC2000
MTD || ~MTD_DOC2001
MTD || ~MTD_DOC2001PLUS
MTD_DOCPROBE => (((MTD_DOC2001 && MTD) || (MTD_DOC2001PLUS && MTD)) || (MTD_DOC2000 && MTD))
(MTD_DOC2001 && MTD) => MTD_DOCPROBE
(MTD_DOC2001PLUS && MTD) => MTD_DOCPROBE
(MTD_DOC2000 && MTD) => MTD_DOCPROBE
MTD_DOCECC => (MTD_DOCPROBE && MTD)
(MTD_DOCPROBE && MTD) => MTD_DOCECC
(MTD && (MTD_DOCPROBE && MTD_DOCPROBE_ADVANCED)) || ~MTD_DOCPROBE_ADDRESS
(MTD && MTD_DOCPROBE_ADVANCED) || ~MTD_DOCPROBE_HIGH
(MTD && MTD_DOCPROBE_ADVANCED) || ~MTD_DOCPROBE_55AA
(MTD && MTD_DOCPROBE) || ~MTD_DOCPROBE_ADVANCED
(MTD && MTD_NAND) || ~MTD_NAND_VERIFY_WRITE
(MTD && MTD_NAND) || (MTD_NAND_ECC_SMC => (MTD_NAND_NDFC && (MTD && (MTD_NAND && c4xx))))
(MTD && MTD_NAND) || ((MTD_NAND_NDFC && (MTD && (MTD_NAND && c4xx))) => MTD_NAND_ECC_SMC)
(MTD && MTD_NAND) || ~MTD_NAND_MUSEUM_IDS
(MTD && (MTD_NAND && ARCH_AUTCPU12)) || ~MTD_NAND_AUTCPU12
(MTD && (MTD_NAND && ARCH_EDB7312)) || ~MTD_NAND_EDB7312
(MTD && (MTD_NAND && (ARCH_PXA && MTD_PARTITIONS))) || ~MTD_NAND_H1900
(MTD && (MTD_NAND && (GENERIC_GPIO && ARM))) || ~MTD_NAND_GPIO
(MTD && (MTD_NAND && ARCH_P720T)) || ~MTD_NAND_SPIA
(MTD && (MTD_NAND && MACH_AMS_DELTA)) || ~MTD_NAND_AMS_DELTA
(MTD && (MTD_NAND && MTD_NAND_OMAP_PREFETCH)) || ~MTD_NAND_OMAP_PREFETCH_DMA
(MTD && (MTD_NAND && MTD_NAND_OMAP2)) || (MTD_NAND_OMAP_PREFETCH => (MTD && (MTD_NAND && MTD_NAND_OMAP2)))
(MTD && (MTD_NAND && MTD_NAND_OMAP2)) || ((MTD && (MTD_NAND && MTD_NAND_OMAP2)) => MTD_NAND_OMAP_PREFETCH)
(MTD && (ARM && (MTD_NAND && (ARCH_OMAP2 || ARCH_OMAP3)))) || ~MTD_NAND_OMAP2
(MTD && (MTD_NAND && MACH_TS72XX)) || ~MTD_NAND_TS7250
MTD_NAND_IDS => ((((MTD_NAND && MTD) || (MTD_DOC2001 && MTD)) || (MTD_DOC2001PLUS && MTD)) || (MTD_DOC2000 && MTD))
(MTD_NAND && MTD) => MTD_NAND_IDS
(MTD_DOC2001 && MTD) => MTD_NAND_IDS
(MTD_DOC2001PLUS && MTD) => MTD_NAND_IDS
(MTD_DOC2000 && MTD) => MTD_NAND_IDS
(MTD && (MTD_NAND && (SOC_AU1200 || SOC_AU1550))) || ~MTD_NAND_AU1550
(MTD && (MTD_NAND && MTD_NAND_BF5XX_HWECC)) || ~MTD_NAND_BF5XX_BOOTROM_ECC
(MTD && (MTD_NAND && MTD_NAND_BF5XX)) || (MTD_NAND_BF5XX_HWECC => (MTD && (MTD_NAND && MTD_NAND_BF5XX)))
(MTD && (MTD_NAND && MTD_NAND_BF5XX)) || ((MTD && (MTD_NAND && MTD_NAND_BF5XX)) => MTD_NAND_BF5XX_HWECC)
(MTD && ((BF54x || BF52x) && MTD_NAND)) || ~MTD_NAND_BF5XX
(MTD && (MTD_NAND && SH_SOLUTION_ENGINE)) || ~MTD_NAND_RTC_FROM4
(MTD && (MTD_NAND && (PPCHAMELEONEVB && BROKEN))) || ~MTD_NAND_PPCHAMELEONEVB
(MTD && (MTD_NAND && MTD_NAND_S3C2410)) || ~MTD_NAND_S3C2410_DEBUG
(MTD && (MTD_NAND && MTD_NAND_S3C2410)) || ~MTD_NAND_S3C2410_HWECC
(MTD && (MTD_NAND && (ARCH_S3C2410 || ARCH_S3C64XX))) || ~MTD_NAND_S3C2410
(MTD && (MTD_NAND && c4xx)) || ~MTD_NAND_NDFC
(MTD && (MTD_NAND && MTD_NAND_S3C2410)) || ~MTD_NAND_S3C2410_CLKSTOP
(MTD && (MTD_NAND && (MTD_NAND_DISKONCHIP && MTD_NAND_DISKONCHIP_PROBE_ADVANCED))) || ~MTD_NAND_DISKONCHIP_PROBE_ADDRESS
(MTD && (MTD_NAND && MTD_NAND_DISKONCHIP_PROBE_ADVANCED)) || ~MTD_NAND_DISKONCHIP_PROBE_HIGH
(MTD && (MTD_NAND && MTD_NAND_DISKONCHIP)) || ~MTD_NAND_DISKONCHIP_PROBE_ADVANCED
(MTD && (MTD_NAND && MTD_NAND_DISKONCHIP)) || ~MTD_NAND_DISKONCHIP_BBTWRITE
(MTD && (MTD_NAND && EXPERIMENTAL)) || ~MTD_NAND_DISKONCHIP
(MTD && (MTD_NAND && ARCH_PXA)) || ~MTD_NAND_SHARPSL
(MTD && (MTD_NAND && BASLER_EXCITE)) || ~MTD_NAND_BASLER_EXCITE
(MTD && (MTD_NAND && PCI)) || ~MTD_NAND_CAFE
(MTD && (MTD_NAND && X86_32)) || ~MTD_NAND_CS553X
(ARCH_AT91SAM9263 || (ARCH_AT91SAM9260 || AVR32)) || ~MTD_NAND_ATMEL_ECC_HW
DEBUG_KERNEL || ~MTD_NAND_ATMEL_ECC_NONE
MTD && (MTD_NAND && MTD_NAND_ATMEL)
(MTD && (MTD_NAND && (ARCH_AT91 || AVR32))) || ~MTD_NAND_ATMEL
(MTD && (MTD_NAND && MTD_NAND_PXA3xx)) || ~MTD_NAND_PXA3xx_BUILTIN
(MTD && (MTD_NAND && PXA3xx)) || ~MTD_NAND_PXA3xx
(MTD && (MTD_NAND && MACH_ARMCORE)) || ~MTD_NAND_CM_X270
(MTD && (MTD_NAND && PPC_PASEMI)) || ~MTD_NAND_PASEMI
(MTD && (MTD_NAND && MFD_TMIO)) || ~MTD_NAND_TMIO
(MTD && (MTD_NAND && MTD_PARTITIONS)) || ~MTD_NAND_NANDSIM
(MTD && MTD_NAND) || ~MTD_NAND_PLATFORM
(MTD && (MTD_NAND && USB)) || ~MTD_ALAUDA
(MTD && (PLAT_ORION && MTD_NAND)) || ~MTD_NAND_ORION
(MTD && (MTD_NAND && PPC_OF)) || ~MTD_NAND_FSL_ELBC
(MTD && (MTD_NAND && (PPC_83xx || PPC_85xx))) || ~MTD_NAND_FSL_UPM
(MTD && (MTD_NAND && (ARCH_MX2 || ARCH_MX3))) || ~MTD_NAND_MXC
(MTD && (MTD_NAND && ARCH_NOMADIK)) || ~MTD_NAND_NOMADIK
(MTD && (MTD_NAND && (SUPERH && CPU_SUBTYPE_SH7723))) || ~MTD_NAND_SH_FLCTL
(MTD && (MTD_NAND && ARCH_DAVINCI)) || ~MTD_NAND_DAVINCI
(MTD && (MTD_NAND && (SOC_TX4938 || SOC_TX4939))) || ~MTD_NAND_TXX9NDFMC
(MTD && (MTD_NAND && SOCRATES)) || ~MTD_NAND_SOCRATES
(MTD && (MTD_NAND && (ARCH_W90X900 && MTD_PARTITIONS))) || ~MTD_NAND_W90P910
MTD || ~MTD_NAND
(MTD && MTD_ONENAND) || ~MTD_ONENAND_VERIFY_WRITE
(MTD && MTD_ONENAND) || ~MTD_ONENAND_GENERIC
(MTD && (MTD_ONENAND && (ARCH_OMAP2 || ARCH_OMAP3))) || ~MTD_ONENAND_OMAP2
(MTD && MTD_ONENAND) || ~MTD_ONENAND_OTP
(MTD && MTD_ONENAND) || ~MTD_ONENAND_2X_PROGRAM
(MTD && MTD_ONENAND) || ~MTD_ONENAND_SIM
MTD || ~MTD_ONENAND
(MTD && MTD_LPDDR) || (MTD_QINFO_PROBE => (MTD_LPDDR && MTD))
(MTD && MTD_LPDDR) || ((MTD_LPDDR && MTD) => MTD_QINFO_PROBE)
MTD || ~MTD_LPDDR
(MTD && MTD_UBI) || ~MTD_UBI_WL_THRESHOLD
(MTD && MTD_UBI) || ~MTD_UBI_BEB_RESERVE
(MTD && MTD_UBI) || ~MTD_UBI_GLUEBI
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_MSG
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_PARANOID
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_DISABLE_BGT
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_EMULATE_BITFLIPS
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_EMULATE_WRITE_FAILURES
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_EMULATE_ERASE_FAILURES
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_MSG_BLD
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_MSG_EBA
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_MSG_WL
(MTD && MTD_UBI_DEBUG) || ~MTD_UBI_DEBUG_MSG_IO
(MTD && (SYSFS && MTD_UBI)) || ~MTD_UBI_DEBUG
MTD || ~MTD_UBI
HAS_IOMEM || ~MTD
OF_DEVICE => (OF && (SPARC || (PPC_OF || MICROBLAZE)))
(OF && (SPARC || (PPC_OF || MICROBLAZE))) => OF_DEVICE
OF_GPIO => (OF && ((PPC_OF || MICROBLAZE) && GPIOLIB))
(OF && ((PPC_OF || MICROBLAZE) && GPIOLIB)) => OF_GPIO
OF_I2C => (((PPC_OF || MICROBLAZE) && I2C) && I2C)
(((PPC_OF || MICROBLAZE) && I2C) && I2C) => OF_I2C
OF_SPI => ((OF && ((PPC_OF || MICROBLAZE) && SPI)) && SPI)
((OF && ((PPC_OF || MICROBLAZE) && SPI)) && SPI) => OF_SPI
OF_MDIO => ((OF && PHYLIB) && PHYLIB)
((OF && PHYLIB) && PHYLIB) => OF_MDIO
(PARPORT && (SERIAL_8250_PCI && (PARPORT_PC && PCI))) || ~PARPORT_SERIAL
(PARPORT && (PARPORT_PC && EXPERIMENTAL)) || ~PARPORT_PC_FIFO
(PARPORT && (PARPORT_PC && EXPERIMENTAL)) || ~PARPORT_PC_SUPERIO
(PARPORT && (PCMCIA && PARPORT_PC)) || ~PARPORT_PC_PCMCIA
(PARPORT && ((~SPARC64 || PCI) && (~SPARC32 && (~M32R && (~FRV && ((~M68K || ISA) && (~MN10300 && (~AVR32 && ~BLACKFIN)))))))) || ~PARPORT_PC
(PARPORT && (SGI_IP32 && EXPERIMENTAL)) || ~PARPORT_IP32
(PARPORT && AMIGA) || ~PARPORT_AMIGA
(PARPORT && ZORRO) || ~PARPORT_MFC3
(PARPORT && ATARI) || ~PARPORT_ATARI
PARPORT_GSC => (PARPORT && GSC)
(PARPORT && GSC) => PARPORT_GSC
(PARPORT && (SBUS && EXPERIMENTAL)) || ~PARPORT_SUNBPP
PARPORT || ~PARPORT_AX88796
PARPORT || ~PARPORT_1284
PARPORT_NOT_PC => ((((((((PARPORT_GSC && PARPORT) || (PARPORT_SUNBPP && (PARPORT && (SBUS && EXPERIMENTAL)))) || (PARPORT_IP32 && (PARPORT && (SGI_IP32 && EXPERIMENTAL)))) || (PARPORT_ATARI && (PARPORT && ATARI))) || (PARPORT_AX88796 && PARPORT)) || (PARPORT_AMIGA && (PARPORT && AMIGA))) || (USB_USS720 && (USB_SUPPORT && (USB && PARPORT)))) || (PARPORT_MFC3 && (PARPORT && ZORRO)))
(PARPORT_GSC && PARPORT) => PARPORT_NOT_PC
(PARPORT_SUNBPP && (PARPORT && (SBUS && EXPERIMENTAL))) => PARPORT_NOT_PC
(PARPORT_IP32 && (PARPORT && (SGI_IP32 && EXPERIMENTAL))) => PARPORT_NOT_PC
(PARPORT_ATARI && (PARPORT && ATARI)) => PARPORT_NOT_PC
(PARPORT_AX88796 && PARPORT) => PARPORT_NOT_PC
(PARPORT_AMIGA && (PARPORT && AMIGA)) => PARPORT_NOT_PC
(USB_USS720 && (USB_SUPPORT && (USB && PARPORT))) => PARPORT_NOT_PC
(PARPORT_MFC3 && (PARPORT && ZORRO)) => PARPORT_NOT_PC
HAS_IOMEM || ~PARPORT
PNP || (PNP_DEBUG_MESSAGES => PNP)
PNP || (PNP => PNP_DEBUG_MESSAGES)
(PNP && ISA) || (ISAPNP => (((((SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) || (SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))))
(PNP && ISA) || ((SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => ISAPNP)
(PNP && ISA) || ((SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => ISAPNP)
(PNP && ISA) || ((SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => ISAPNP)
(PNP && ISA) || ((SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => ISAPNP)
(PNP && ISA) || ((SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => ISAPNP)
(PNP && (PNPBIOS && PROC_FS)) || ~PNPBIOS_PROC_FS
(PNP && (ISA && (X86 && EXPERIMENTAL))) || ~PNPBIOS
PNPACPI => (PNP && (PNP && ACPI))
(PNP && (PNP && ACPI)) => PNPACPI
(HAS_IOMEM && (ISA || ACPI)) || (PNP => (ACPI && (~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM)))))
(HAS_IOMEM && (ISA || ACPI)) || ((ACPI && (~IA64_HP_SIM && ((IA64 || X86) && (PCI && PM)))) => PNP)
(BLK_DEV && ARCH_MAY_HAVE_PC_FDC) || ~BLK_DEV_FD
(BLK_DEV && AMIGA) || ~AMIGA_FLOPPY
(BLK_DEV && ATARI) || ~ATARI_FLOPPY
(BLK_DEV && (PPC_PMAC && ~PPC_PMAC64)) || ~MAC_FLOPPY
(BLK_DEV && (M68K && MAC)) || ~BLK_DEV_SWIM
(BLK_DEV && ZORRO) || ~AMIGA_Z2RAM
(BLK_DEV && (ISA && ISA_DMA_API)) || ~BLK_DEV_XD
(BLK_DEV && PARPORT_PC) || ~PARIDE
(BLK_DEV && SH_DREAMCAST) || ~GDROM
(BLK_DEV && PARIDE) || ~PARIDE_PD
(BLK_DEV && PARIDE) || ~PARIDE_PCD
(BLK_DEV && PARIDE) || ~PARIDE_PF
(BLK_DEV && PARIDE) || ~PARIDE_PT
(BLK_DEV && PARIDE) || ~PARIDE_PG
(BLK_DEV && PARIDE) || ~PARIDE_ATEN
(BLK_DEV && PARIDE) || ~PARIDE_BPCK
(BLK_DEV && (PARIDE && ~c64BIT)) || ~PARIDE_BPCK6
(BLK_DEV && PARIDE) || ~PARIDE_COMM
(BLK_DEV && PARIDE) || ~PARIDE_DSTR
(BLK_DEV && PARIDE) || ~PARIDE_FIT2
(BLK_DEV && PARIDE) || ~PARIDE_FIT3
(BLK_DEV && (PARIDE_EPAT && EXPERIMENTAL)) || ~PARIDE_EPATC8
(BLK_DEV && PARIDE) || ~PARIDE_EPAT
(BLK_DEV && PARIDE) || ~PARIDE_EPIA
(BLK_DEV && PARIDE) || ~PARIDE_FRIQ
(BLK_DEV && PARIDE) || ~PARIDE_FRPW
(BLK_DEV && PARIDE) || ~PARIDE_KBIC
(BLK_DEV && PARIDE) || ~PARIDE_KTTI
(BLK_DEV && PARIDE) || ~PARIDE_ON20
(BLK_DEV && PARIDE) || ~PARIDE_ON26
(BLK_DEV && (PCI && VIRT_TO_BUS)) || ~BLK_CPQ_DA
(BLK_DEV && (BLK_CPQ_CISS_DA && (PROC_FS && (SCSI || SCSI)))) || ~CISS_SCSI_TAPE
(BLK_DEV && PCI) || ~BLK_CPQ_CISS_DA
(BLK_DEV && PCI) || ~BLK_DEV_DAC960
(BLK_DEV && (PCI && EXPERIMENTAL)) || ~BLK_DEV_UMEM
(BLK_DEV && BLK_DEV_UBD) || ~BLK_DEV_UBD_SYNC
(BLK_DEV && UML) || ~BLK_DEV_UBD
BLK_DEV_COW_COMMON => (BLK_DEV && BLK_DEV_UBD)
(BLK_DEV && BLK_DEV_UBD) => BLK_DEV_COW_COMMON
(BLK_DEV && BLK_DEV_LOOP) || ~BLK_DEV_CRYPTOLOOP
BLK_DEV || ~BLK_DEV_LOOP
(BLK_DEV && NET) || ~BLK_DEV_NBD
(BLK_DEV && SCSI_OSD_ULD) || ~BLK_DEV_OSD
(BLK_DEV && PCI) || ~BLK_DEV_SX8
(BLK_DEV && USB) || ~BLK_DEV_UB
(BLK_DEV && BLK_DEV_RAM) || ~BLK_DEV_RAM_COUNT
(BLK_DEV && BLK_DEV_RAM) || ~BLK_DEV_RAM_SIZE
(BLK_DEV && BLK_DEV_RAM) || ~BLK_DEV_XIP
BLK_DEV || ~BLK_DEV_RAM
(BLK_DEV && CDROM_PKTCDVD) || ~CDROM_PKTCDVD_BUFFERS
(BLK_DEV && (CDROM_PKTCDVD && EXPERIMENTAL)) || ~CDROM_PKTCDVD_WCACHE
(BLK_DEV && ~UML) || ~CDROM_PKTCDVD
(BLK_DEV && NET) || ~ATA_OVER_ETH
(BLK_DEV && MG_DISK) || ~MG_DISK_RES
(BLK_DEV && (ARM && GPIOLIB)) || ~MG_DISK
(BLK_DEV && SUN_LDOMS) || ~SUNVDC
(BLK_DEV && (S390 && BLOCK)) || ~BLK_DEV_XPRAM
(BLK_DEV && (S390 && BLOCK)) || ~DCSSBLK
(BLK_DEV && DASD) || ~DASD_PROFILE
(BLK_DEV && DASD) || ~DASD_ECKD
(BLK_DEV && DASD) || ~DASD_FBA
(BLK_DEV && DASD) || ~DASD_DIAG
(BLK_DEV && DASD) || ~DASD_EER
(BLK_DEV && (CCW && BLOCK)) || ~DASD
(BLK_DEV && (c4xx || MICROBLAZE)) || ~XILINX_SYSACE
(BLK_DEV && XEN) || (XEN_BLKDEV_FRONTEND => (BLK_DEV && XEN))
(BLK_DEV && XEN) || ((BLK_DEV && XEN) => XEN_BLKDEV_FRONTEND)
(BLK_DEV && (EXPERIMENTAL && VIRTIO)) || ~VIRTIO_BLK
(BLK_DEV && (HAVE_IDE && (~ARM || (ARCH_RPC || (ARCH_SHARK || BROKEN))))) || ~BLK_DEV_HD
BLOCK || (BLK_DEV => BLOCK)
BLOCK || (BLOCK => BLK_DEV)
(MISC_DEVICES && (AVR32 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || ARCH_AT91CAP9)))) || ~ATMEL_PWM
(MISC_DEVICES && (ATMEL_TCB_CLKSRC && (ARCH_AT91RM9200 || (ARCH_AT91SAM9260 || CPU_AT32AP700X)))) || ~ATMEL_TCB_CLKSRC_BLOCK
(MISC_DEVICES && (ATMEL_TCLIB && GENERIC_TIME)) || (ATMEL_TCB_CLKSRC => (MISC_DEVICES && (ATMEL_TCLIB && GENERIC_TIME)))
(MISC_DEVICES && (ATMEL_TCLIB && GENERIC_TIME)) || ((MISC_DEVICES && (ATMEL_TCLIB && GENERIC_TIME)) => ATMEL_TCB_CLKSRC)
(MISC_DEVICES && (AVR32 || ARCH_AT91)) || ~ATMEL_TCLIB
(MISC_DEVICES && (X86 && (PCI && (INPUT && EXPERIMENTAL)))) || ~IBM_ASM
(MISC_DEVICES && PCI) || ~PHANTOM
(MISC_DEVICES && PCI) || ~SGI_IOC4
(MISC_DEVICES && (PCI && (TIFM_CORE && EXPERIMENTAL))) || (TIFM_7XX1 => ((MISC_DEVICES && (PCI && (TIFM_CORE && EXPERIMENTAL))) && TIFM_CORE))
(MISC_DEVICES && (PCI && (TIFM_CORE && EXPERIMENTAL))) || (((MISC_DEVICES && (PCI && (TIFM_CORE && EXPERIMENTAL))) && TIFM_CORE) => TIFM_7XX1)
(MISC_DEVICES && (EXPERIMENTAL && PCI)) || (TIFM_CORE => ((MEMSTICK_TIFM_MS && (MEMSTICK && (EXPERIMENTAL && PCI))) || (MMC_TIFM_SD && (MMC && (EXPERIMENTAL && PCI)))))
(MISC_DEVICES && (EXPERIMENTAL && PCI)) || ((MEMSTICK_TIFM_MS && (MEMSTICK && (EXPERIMENTAL && PCI))) => TIFM_CORE)
(MISC_DEVICES && (EXPERIMENTAL && PCI)) || ((MMC_TIFM_SD && (MMC && (EXPERIMENTAL && PCI))) => TIFM_CORE)
(MISC_DEVICES && (I2C && EXPERIMENTAL)) || ~ICS932S401
(MISC_DEVICES && (AVR32 || ARCH_AT91)) || ~ATMEL_SSC
MISC_DEVICES || ~ENCLOSURE_SERVICES
(MISC_DEVICES && (NET && ((IA64_GENERIC || (IA64_SGI_SN2 || (IA64_SGI_UV || X86_UV))) && SMP))) || ~SGI_XP
(MISC_DEVICES && PCI) || ~HP_ILO
(MISC_DEVICES && SGI_GRU) || ~SGI_GRU_DEBUG
(MISC_DEVICES && (X86_UV && SMP)) || (SGI_GRU => (SGI_XP && (MISC_DEVICES && (NET && ((IA64_GENERIC || (IA64_SGI_SN2 || (IA64_SGI_UV || X86_UV))) && (X86_64 && SMP))))))
(MISC_DEVICES && (X86_UV && SMP)) || ((SGI_XP && (MISC_DEVICES && (NET && ((IA64_GENERIC || (IA64_SGI_SN2 || (IA64_SGI_UV || X86_UV))) && (X86_64 && SMP))))) => SGI_GRU)
(MISC_DEVICES && (I2C && SYSFS)) || ~ISL29003
(MISC_DEVICES && ARCH_EP93XX) || ~EP93XX_PWM
(MISC_DEVICES && (X86 && C2PORT)) || (C2PORT_DURAMAR_2150 => ((MISC_DEVICES && (X86 && C2PORT)) && cNo))
(MISC_DEVICES && (X86 && C2PORT)) || (((MISC_DEVICES && (X86 && C2PORT)) && cNo) => C2PORT_DURAMAR_2150)
(MISC_DEVICES && EXPERIMENTAL) || (C2PORT => ((MISC_DEVICES && EXPERIMENTAL) && cNo))
(MISC_DEVICES && EXPERIMENTAL) || (((MISC_DEVICES && EXPERIMENTAL) && cNo) => C2PORT)
(MISC_DEVICES && (I2C && SYSFS)) || ~EEPROM_AT24
(MISC_DEVICES && (SPI && SYSFS)) || ~EEPROM_AT25
(MISC_DEVICES && (I2C && SYSFS)) || ~EEPROM_LEGACY
(MISC_DEVICES && (I2C && EXPERIMENTAL)) || ~EEPROM_MAX6875
MISC_DEVICES || (EEPROM_93CX6 => (((((((RTL8187 && (NETDEVICES && (WLAN && (MAC80211 && (USB && WLAN_80211))))) || (RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI))))) || (ADM8211 && (NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL))))))) || (RTL8180 && (NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL))))))) || (AX88796_93CX6 && (NETDEVICES && (NET_ETHERNET && AX88796)))) || (RT2500PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI))))) || (RT2400PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI))))))
MISC_DEVICES || ((RTL8187 && (NETDEVICES && (WLAN && (MAC80211 && (USB && WLAN_80211))))) => EEPROM_93CX6)
MISC_DEVICES || ((RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => EEPROM_93CX6)
MISC_DEVICES || ((ADM8211 && (NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL)))))) => EEPROM_93CX6)
MISC_DEVICES || ((RTL8180 && (NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL)))))) => EEPROM_93CX6)
MISC_DEVICES || ((AX88796_93CX6 && (NETDEVICES && (NET_ETHERNET && AX88796))) => EEPROM_93CX6)
MISC_DEVICES || ((RT2500PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => EEPROM_93CX6)
MISC_DEVICES || ((RT2400PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => EEPROM_93CX6)
(MISC_DEVICES && CB710_CORE) || ~CB710_DEBUG
CB710_DEBUG_ASSUMPTIONS => (MISC_DEVICES && CB710_CORE)
(MISC_DEVICES && CB710_CORE) => CB710_DEBUG_ASSUMPTIONS
(MISC_DEVICES && PCI) || (CB710_CORE => (MMC_CB710 && (MMC && PCI)))
(MISC_DEVICES && PCI) || ((MMC_CB710 && (MMC && PCI)) => CB710_CORE)
HAVE_IDE => X86
X86 => HAVE_IDE
IDE_XFER_MODE => (((((BLK_DEV_IDE_AU1XXX && (IDE && SOC_AU1200)) || (IDE_TIMINGS && IDE)) || (BLK_DEV_IDEDMA && IDE)) || (BLK_DEV_UMC8672 && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_DTC2278 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))))
(BLK_DEV_IDE_AU1XXX && (IDE && SOC_AU1200)) => IDE_XFER_MODE
(IDE_TIMINGS && IDE) => IDE_XFER_MODE
(BLK_DEV_IDEDMA && IDE) => IDE_XFER_MODE
(BLK_DEV_UMC8672 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_XFER_MODE
(BLK_DEV_DTC2278 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_XFER_MODE
IDE_TIMINGS => ((((((((((((((BLK_DEV_SL82C105 && (IDE && (PCI && (PPC || ARM)))) || (BLK_DEV_IDE_AT91 && (IDE && (ARM && (ARCH_AT91 && (~ARCH_AT91RM9200 && ~ARCH_AT91X40)))))) || (BLK_DEV_ALI14XX && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_AMD74XX && (IDE && (PCI && ~ARM)))) || (BLK_DEV_IDE_PMAC && (IDE && PPC_PMAC))) || (BLK_DEV_CMD64X && (IDE && PCI))) || (BLK_DEV_PALMCHIP_BK3710 && (IDE && ARCH_DAVINCI))) || (BLK_DEV_CMD640 && (IDE && X86))) || (BLK_DEV_IDE_TX4938 && (IDE && SOC_TX4938))) || (BLK_DEV_ALI15X3 && (IDE && PCI))) || (BLK_DEV_QD65XX && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_VIA82CXXX && (IDE && PCI))) || (BLK_DEV_CY82C693 && (IDE && (PCI && ALPHA)))) || (BLK_DEV_HT6560B && (IDE && (ISA && (ALPHA || (X86 || MIPS))))))
(BLK_DEV_SL82C105 && (IDE && (PCI && (PPC || ARM)))) => IDE_TIMINGS
(BLK_DEV_IDE_AT91 && (IDE && (ARM && (ARCH_AT91 && (~ARCH_AT91RM9200 && ~ARCH_AT91X40))))) => IDE_TIMINGS
(BLK_DEV_ALI14XX && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_TIMINGS
(BLK_DEV_AMD74XX && (IDE && (PCI && ~ARM))) => IDE_TIMINGS
(BLK_DEV_IDE_PMAC && (IDE && PPC_PMAC)) => IDE_TIMINGS
(BLK_DEV_CMD64X && (IDE && PCI)) => IDE_TIMINGS
(BLK_DEV_PALMCHIP_BK3710 && (IDE && ARCH_DAVINCI)) => IDE_TIMINGS
(BLK_DEV_CMD640 && (IDE && X86)) => IDE_TIMINGS
(BLK_DEV_IDE_TX4938 && (IDE && SOC_TX4938)) => IDE_TIMINGS
(BLK_DEV_ALI15X3 && (IDE && PCI)) => IDE_TIMINGS
(BLK_DEV_QD65XX && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_TIMINGS
(BLK_DEV_VIA82CXXX && (IDE && PCI)) => IDE_TIMINGS
(BLK_DEV_CY82C693 && (IDE && (PCI && ALPHA))) => IDE_TIMINGS
(BLK_DEV_HT6560B && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_TIMINGS
IDE_ATAPI => (((BLK_DEV_IDECD && IDE) || (BLK_DEV_IDETAPE && IDE)) || (IDE_GD_ATAPI && (IDE && IDE_GD)))
(BLK_DEV_IDECD && IDE) => IDE_ATAPI
(BLK_DEV_IDETAPE && IDE) => IDE_ATAPI
(IDE_GD_ATAPI && (IDE && IDE_GD)) => IDE_ATAPI
IDE_LEGACY => (((((BLK_DEV_ALI14XX && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) || (BLK_DEV_HT6560B && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_QD65XX && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_UMC8672 && (IDE && (ISA && (ALPHA || (X86 || MIPS)))))) || (BLK_DEV_DTC2278 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))))
(BLK_DEV_ALI14XX && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_LEGACY
(BLK_DEV_HT6560B && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_LEGACY
(BLK_DEV_QD65XX && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_LEGACY
(BLK_DEV_UMC8672 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_LEGACY
(BLK_DEV_DTC2278 && (IDE && (ISA && (ALPHA || (X86 || MIPS))))) => IDE_LEGACY
IDE || ~BLK_DEV_IDE_SATA
(IDE && IDE_GD) || (IDE_GD_ATA => (IDE && IDE_GD))
(IDE && IDE_GD) || ((IDE && IDE_GD) => IDE_GD_ATA)
(IDE && IDE_GD) || ~IDE_GD_ATAPI
IDE || (IDE_GD => IDE)
IDE || (IDE => IDE_GD)
(IDE && PCMCIA) || ~BLK_DEV_IDECS
(IDE && (CARDBUS && PCI)) || ~BLK_DEV_DELKIN
(IDE && (BLK_DEV_IDECD && EMBEDDED)) || (BLK_DEV_IDECD_VERBOSE_ERRORS => (IDE && BLK_DEV_IDECD))
(IDE && (BLK_DEV_IDECD && EMBEDDED)) || ((IDE && BLK_DEV_IDECD) => BLK_DEV_IDECD_VERBOSE_ERRORS)
IDE || ~BLK_DEV_IDECD
IDE || ~BLK_DEV_IDETAPE
(IDE && ACPI) || ~BLK_DEV_IDEACPI
IDE || ~IDE_TASK_IOCTL
(IDE && PROC_FS) || (IDE_PROC_FS => (IDE && PROC_FS))
(IDE && PROC_FS) || ((IDE && PROC_FS) => IDE_PROC_FS)
(IDE && (ALPHA || (X86 || (IA64 || (M32R || (MIPS || (ARCH_RPC || ARCH_SHARK))))))) || (IDE_GENERIC => ((IDE && (ALPHA || (X86 || (IA64 || (M32R || (MIPS || (ARCH_RPC || ARCH_SHARK))))))) && (ARM && (ARCH_RPC || ARCH_SHARK))))
(IDE && (ALPHA || (X86 || (IA64 || (M32R || (MIPS || (ARCH_RPC || ARCH_SHARK))))))) || (((IDE && (ALPHA || (X86 || (IA64 || (M32R || (MIPS || (ARCH_RPC || ARCH_SHARK))))))) && (ARM && (ARCH_RPC || ARCH_SHARK))) => IDE_GENERIC)
IDE || ~BLK_DEV_PLATFORM
(IDE && BLK_DEV_CMD640) || ~BLK_DEV_CMD640_ENHANCED
(IDE && X86) || ~BLK_DEV_CMD640
(IDE && PNP) || ~BLK_DEV_IDEPNP
BLK_DEV_IDEDMA_SFF => (((BLK_DEV_IDE_TX4939 && (IDE && SOC_TX4939)) || (BLK_DEV_PALMCHIP_BK3710 && (IDE && ARCH_DAVINCI))) || (BLK_DEV_IDEDMA_PCI && (IDE && PCI)))
(BLK_DEV_IDE_TX4939 && (IDE && SOC_TX4939)) => BLK_DEV_IDEDMA_SFF
(BLK_DEV_PALMCHIP_BK3710 && (IDE && ARCH_DAVINCI)) => BLK_DEV_IDEDMA_SFF
(BLK_DEV_IDEDMA_PCI && (IDE && PCI)) => BLK_DEV_IDEDMA_SFF
BLK_DEV_IDEPCI => ((((BLK_DEV_OPTI621 && (IDE && (PCI && EXPERIMENTAL))) || (BLK_DEV_RZ1000 && (IDE && (PCI && X86)))) || (BLK_DEV_GENERIC && (IDE && PCI))) || (BLK_DEV_IDEDMA_PCI && (IDE && PCI)))
(BLK_DEV_OPTI621 && (IDE && (PCI && EXPERIMENTAL))) => BLK_DEV_IDEPCI
(BLK_DEV_RZ1000 && (IDE && (PCI && X86))) => BLK_DEV_IDEPCI
(BLK_DEV_GENERIC && (IDE && PCI)) => BLK_DEV_IDEPCI
(BLK_DEV_IDEDMA_PCI && (IDE && PCI)) => BLK_DEV_IDEPCI
(PCI && (IDE && BLK_DEV_IDEPCI)) || (IDEPCI_PCIBUS_ORDER => (PCI && (IDE && BLK_DEV_IDEPCI)))
(IDE && (PCI && (BLK_DEV_IDEPCI && (BLK_DEV_AEC62XX || (BLK_DEV_GENERIC || (BLK_DEV_HPT366 || (BLK_DEV_PDC202XX_NEW || (BLK_DEV_PDC202XX_OLD || BLK_DEV_TC86C001)))))))) || ~BLK_DEV_OFFBOARD
(IDE && PCI) || ~BLK_DEV_GENERIC
(IDE && (PCI && EXPERIMENTAL)) || ~BLK_DEV_OPTI621
(IDE && (PCI && X86)) || ~BLK_DEV_RZ1000
BLK_DEV_IDEDMA_PCI => ((((((((((((((((((((((((((((((((BLK_DEV_SL82C105 && (IDE && (PCI && (PPC || ARM)))) || (BLK_DEV_IT8172 && (IDE && PCI))) || (BLK_DEV_JMICRON && (IDE && PCI))) || (BLK_DEV_CMD64X && (IDE && PCI))) || (BLK_DEV_ALI15X3 && (IDE && PCI))) || (BLK_DEV_PIIX && (IDE && PCI))) || (BLK_DEV_ATIIXP && (IDE && (PCI && X86)))) || (BLK_DEV_CS5536 && (IDE && (PCI && X86_32)))) || (BLK_DEV_SVWKS && (IDE && PCI))) || (BLK_DEV_SIIMAGE && (IDE && PCI))) || (BLK_DEV_CELLEB && (IDE && (PCI && PPC_CELLEB)))) || (BLK_DEV_SLC90E66 && (IDE && PCI))) || (BLK_DEV_TC86C001 && (IDE && PCI))) || (BLK_DEV_SC1200 && (IDE && PCI))) || (BLK_DEV_SIS5513 && (IDE && (PCI && X86)))) || (BLK_DEV_PDC202XX_OLD && (IDE && PCI))) || (BLK_DEV_TRM290 && (IDE && PCI))) || (BLK_DEV_TRIFLEX && (IDE && PCI))) || (BLK_DEV_CS5535 && (IDE && (PCI && (X86 && ~X86_64))))) || (BLK_DEV_CS5530 && (IDE && PCI))) || (BLK_DEV_AMD74XX && (IDE && (PCI && ~ARM)))) || (BLK_DEV_IT821X && (IDE && PCI))) || (BLK_DEV_PDC202XX_NEW && (IDE && PCI))) || (BLK_DEV_NS87415 && (IDE && PCI))) || (BLK_DEV_IDE_PMAC && (IDE && PPC_PMAC))) || (BLK_DEV_SGIIOC4 && (IDE && (PCI && ((IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4))))) || (BLK_DEV_IT8213 && (IDE && PCI))) || (BLK_DEV_CS5520 && (IDE && (PCI && EXPERIMENTAL)))) || (BLK_DEV_VIA82CXXX && (IDE && PCI))) || (BLK_DEV_CY82C693 && (IDE && (PCI && ALPHA)))) || (BLK_DEV_AEC62XX && (IDE && PCI))) || (BLK_DEV_HPT366 && (IDE && PCI)))
(BLK_DEV_SL82C105 && (IDE && (PCI && (PPC || ARM)))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_IT8172 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_JMICRON && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CMD64X && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_ALI15X3 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_PIIX && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_ATIIXP && (IDE && (PCI && X86))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CS5536 && (IDE && (PCI && X86_32))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SVWKS && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SIIMAGE && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CELLEB && (IDE && (PCI && PPC_CELLEB))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SLC90E66 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_TC86C001 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SC1200 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SIS5513 && (IDE && (PCI && X86))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_PDC202XX_OLD && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_TRM290 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_TRIFLEX && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CS5535 && (IDE && (PCI && (X86 && ~X86_64)))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CS5530 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_AMD74XX && (IDE && (PCI && ~ARM))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_IT821X && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_PDC202XX_NEW && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_NS87415 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_IDE_PMAC && (IDE && PPC_PMAC)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_SGIIOC4 && (IDE && (PCI && ((IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4)))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_IT8213 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CS5520 && (IDE && (PCI && EXPERIMENTAL))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_VIA82CXXX && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_CY82C693 && (IDE && (PCI && ALPHA))) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_AEC62XX && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(BLK_DEV_HPT366 && (IDE && PCI)) => BLK_DEV_IDEDMA_PCI
(IDE && PCI) || ~BLK_DEV_AEC62XX
(IDE && PCI) || ~BLK_DEV_ALI15X3
(IDE && (PCI && ~ARM)) || ~BLK_DEV_AMD74XX
(IDE && (PCI && X86)) || ~BLK_DEV_ATIIXP
(IDE && PCI) || ~BLK_DEV_CMD64X
(IDE && PCI) || ~BLK_DEV_TRIFLEX
(IDE && (PCI && ALPHA)) || ~BLK_DEV_CY82C693
(IDE && (PCI && EXPERIMENTAL)) || ~BLK_DEV_CS5520
(IDE && PCI) || ~BLK_DEV_CS5530
(IDE && (PCI && (X86 && ~X86_64))) || ~BLK_DEV_CS5535
(IDE && (PCI && X86_32)) || ~BLK_DEV_CS5536
(IDE && PCI) || ~BLK_DEV_HPT366
(IDE && PCI) || ~BLK_DEV_JMICRON
(IDE && PCI) || ~BLK_DEV_SC1200
(IDE && PCI) || ~BLK_DEV_PIIX
(IDE && PCI) || ~BLK_DEV_IT8172
(IDE && PCI) || ~BLK_DEV_IT8213
(IDE && PCI) || ~BLK_DEV_IT821X
(IDE && PCI) || ~BLK_DEV_NS87415
(IDE && PCI) || ~BLK_DEV_PDC202XX_OLD
(IDE && PCI) || ~BLK_DEV_PDC202XX_NEW
(IDE && PCI) || ~BLK_DEV_SVWKS
(IDE && (PCI && ((IA64_SGI_SN2 || IA64_GENERIC) && SGI_IOC4))) || ~BLK_DEV_SGIIOC4
(IDE && PCI) || ~BLK_DEV_SIIMAGE
(IDE && (PCI && X86)) || ~BLK_DEV_SIS5513
(IDE && (PCI && (PPC || ARM))) || ~BLK_DEV_SL82C105
(IDE && PCI) || ~BLK_DEV_SLC90E66
(IDE && PCI) || ~BLK_DEV_TRM290
(IDE && PCI) || ~BLK_DEV_VIA82CXXX
(IDE && PCI) || ~BLK_DEV_TC86C001
(IDE && (PCI && PPC_CELLEB)) || ~BLK_DEV_CELLEB
(IDE && BLK_DEV_IDE_PMAC) || ~BLK_DEV_IDE_PMAC_ATA100FIRST
(IDE && PPC_PMAC) || ~BLK_DEV_IDE_PMAC
(SOC_AU1200 && BLK_DEV_IDE_AU1XXX) || ~BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA
IDE && (SOC_AU1200 && BLK_DEV_IDE_AU1XXX)
(IDE && SOC_AU1200) || ~BLK_DEV_IDE_AU1XXX
(IDE && SOC_TX4938) || ~BLK_DEV_IDE_TX4938
(IDE && SOC_TX4939) || ~BLK_DEV_IDE_TX4939
(IDE && (ARM && (ARCH_AT91 && (~ARCH_AT91RM9200 && ~ARCH_AT91X40)))) || ~BLK_DEV_IDE_AT91
(IDE && BLK_DEV_IDE_ICSIDE) || ~BLK_DEV_IDEDMA_ICS
(IDE && (ARM && ARCH_ACORN)) || ~BLK_DEV_IDE_ICSIDE
(IDE && (ARM && ARCH_ACORN)) || ~BLK_DEV_IDE_RAPIDE
(IDE && H8300) || (IDE_H8300 => (IDE && H8300))
(IDE && H8300) || ((IDE && H8300) => IDE_H8300)
(IDE && AMIGA) || ~BLK_DEV_GAYLE
(IDE && (ZORRO && EXPERIMENTAL)) || ~BLK_DEV_BUDDHA
(IDE && ATARI) || ~BLK_DEV_FALCON_IDE
(IDE && MAC) || ~BLK_DEV_MAC_IDE
(IDE && Q40) || ~BLK_DEV_Q40IDE
(IDE && ARCH_DAVINCI) || ~BLK_DEV_PALMCHIP_BK3710
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_4DRIVES
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_ALI14XX
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_DTC2278
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_HT6560B
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_QD65XX
(IDE && (ISA && (ALPHA || (X86 || MIPS)))) || ~BLK_DEV_UMC8672
BLK_DEV_IDEDMA => (IDE && (BLK_DEV_IDEDMA_SFF || (BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA)))
(IDE && (BLK_DEV_IDEDMA_SFF || (BLK_DEV_IDEDMA_ICS || BLK_DEV_IDE_AU1XXX_MDMA2_DBDMA))) => BLK_DEV_IDEDMA
(HAVE_IDE && BLOCK) || ~IDE
BLOCK || ~RAID_ATTRS
BLOCK || (SCSI => (ATA && (HAS_IOMEM && (BLOCK && ((~M32R && ~M68K) || BROKEN)))))
BLOCK || ((ATA && (HAS_IOMEM && (BLOCK && ((~M32R && ~M68K) || BROKEN)))) => SCSI)
SCSI_DMA => (SCSI && (BLOCK && HAS_DMA))
(SCSI && (BLOCK && HAS_DMA)) => SCSI_DMA
(SCSI && EXPERIMENTAL) || (SCSI_TGT => (SCSI_SRP && (SCSI_LOWLEVEL && (SCSI && PCI))))
(SCSI && EXPERIMENTAL) || ((SCSI_SRP && (SCSI_LOWLEVEL && (SCSI && PCI))) => SCSI_TGT)
SCSI_NETLINK => (SCSI_FC_ATTRS && SCSI)
(SCSI_FC_ATTRS && SCSI) => SCSI_NETLINK
(SCSI && PROC_FS) || (SCSI_PROC_FS => (SCSI && PROC_FS))
(SCSI && PROC_FS) || ((SCSI && PROC_FS) => SCSI_PROC_FS)
SCSI || ~BLK_DEV_SD
SCSI || ~CHR_DEV_ST
SCSI || ~CHR_DEV_OSST
BLK_DEV_SR || ~BLK_DEV_SR_VENDOR
SCSI || ~BLK_DEV_SR
SCSI || ~CHR_DEV_SG
SCSI || ~CHR_DEV_SCH
(SCSI && ENCLOSURE_SERVICES) || ~SCSI_ENCLOSURE
SCSI || ~SCSI_MULTI_LUN
SCSI || ~SCSI_CONSTANTS
SCSI || ~SCSI_LOGGING
SCSI || ~SCSI_SCAN_ASYNC
SCSI_WAIT_SCAN => (SCSI && MODULES)
(SCSI && MODULES) => SCSI_WAIT_SCAN
SCSI || (SCSI_SPI_ATTRS => (((((((((((((((((((((((((((((((((SCSI_CUMANA_1 && (SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI)))) || (MVME16x_SCSI && (SCSI_LOWLEVEL && (MVME16x && SCSI)))) || (FUSION_SPI && (FUSION && (PCI && SCSI)))) || (SCSI_OAK1 && (SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI))))) || (SCSI_SIM710 && (SCSI_LOWLEVEL && ((EISA || MCA) && SCSI)))) || (SUN3_SCSI && (SCSI_LOWLEVEL && (SUN3 && SCSI)))) || (SUN3X_ESP && (SCSI_LOWLEVEL && (SUN3X && SCSI)))) || (ATARI_SCSI && (SCSI_LOWLEVEL && (ATARI && SCSI)))) || (SCSI_A4000T && (SCSI_LOWLEVEL && (AMIGA && (SCSI && EXPERIMENTAL))))) || (SCSI_AIC79XX && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (SCSI_AIC7XXX && (SCSI_LOWLEVEL && ((PCI || EISA) && SCSI)))) || (SCSI_DMX3191D && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (SCSI_SNI_53C710 && (SCSI_LOWLEVEL && (SNI_RM && SCSI)))) || (PCMCIA_AHA152X && (SCSI_LOWLEVEL_PCMCIA && (SCSI && (PCMCIA && ~c64BIT))))) || (SCSI_AHA152X && (SCSI_LOWLEVEL && (ISA && (SCSI && ~c64BIT))))) || (SCSI_T128 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (SCSI_SYM53C8XX_2 && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (SCSI_GENERIC_NCR5380_MMIO && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (SCSI_MAC_ESP && (SCSI_LOWLEVEL && (MAC && SCSI)))) || (SCSI_ZORRO7XX && (SCSI_LOWLEVEL && (ZORRO && (SCSI && EXPERIMENTAL))))) || (JAZZ_ESP && (SCSI_LOWLEVEL && (MACH_JAZZ && SCSI)))) || (SCSI_PAS16 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (SCSI_DTC3280 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (SCSI_ACORNSCSI_3 && (SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)))) || (SCSI_NCR_D700 && (SCSI_LOWLEVEL && (MCA && SCSI)))) || (SCSI_SUNESP && (SCSI_LOWLEVEL && (SBUS && SCSI)))) || (MVME147_SCSI && (SCSI_LOWLEVEL && (MVME147 && SCSI)))) || (BVME6000_SCSI && (SCSI_LOWLEVEL && (BVME6000 && SCSI)))) || (SCSI_NCR_Q720 && (SCSI_LOWLEVEL && (MCA && SCSI)))) || (SCSI_ZALON && (SCSI_LOWLEVEL && (GSC && SCSI)))) || (SCSI_GENERIC_NCR5380 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (MAC_SCSI && (SCSI_LOWLEVEL && (MAC && SCSI)))) || (SCSI_LASI700 && (SCSI_LOWLEVEL && (GSC && SCSI)))))
SCSI || ((SCSI_CUMANA_1 && (SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI)))) => SCSI_SPI_ATTRS)
SCSI || ((MVME16x_SCSI && (SCSI_LOWLEVEL && (MVME16x && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((FUSION_SPI && (FUSION && (PCI && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_OAK1 && (SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI)))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_SIM710 && (SCSI_LOWLEVEL && ((EISA || MCA) && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SUN3_SCSI && (SCSI_LOWLEVEL && (SUN3 && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((ATARI_SCSI && (SCSI_LOWLEVEL && (ATARI && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_A4000T && (SCSI_LOWLEVEL && (AMIGA && (SCSI && EXPERIMENTAL)))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_AIC79XX && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_AIC7XXX && (SCSI_LOWLEVEL && ((PCI || EISA) && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_DMX3191D && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_SNI_53C710 && (SCSI_LOWLEVEL && (SNI_RM && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((PCMCIA_AHA152X && (SCSI_LOWLEVEL_PCMCIA && (SCSI && (PCMCIA && ~c64BIT)))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_AHA152X && (SCSI_LOWLEVEL && (ISA && (SCSI && ~c64BIT)))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_T128 && (SCSI_LOWLEVEL && (ISA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_SYM53C8XX_2 && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_GENERIC_NCR5380_MMIO && (SCSI_LOWLEVEL && (ISA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_MAC_ESP && (SCSI_LOWLEVEL && (MAC && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_ZORRO7XX && (SCSI_LOWLEVEL && (ZORRO && (SCSI && EXPERIMENTAL)))) => SCSI_SPI_ATTRS)
SCSI || ((JAZZ_ESP && (SCSI_LOWLEVEL && (MACH_JAZZ && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_PAS16 && (SCSI_LOWLEVEL && (ISA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_DTC3280 && (SCSI_LOWLEVEL && (ISA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_ACORNSCSI_3 && (SCSI_LOWLEVEL && (ARCH_ACORN && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_NCR_D700 && (SCSI_LOWLEVEL && (MCA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_SUNESP && (SCSI_LOWLEVEL && (SBUS && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((BVME6000_SCSI && (SCSI_LOWLEVEL && (BVME6000 && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_NCR_Q720 && (SCSI_LOWLEVEL && (MCA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_ZALON && (SCSI_LOWLEVEL && (GSC && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_GENERIC_NCR5380 && (SCSI_LOWLEVEL && (ISA && SCSI))) => SCSI_SPI_ATTRS)
SCSI || ((SCSI_LASI700 && (SCSI_LOWLEVEL && (GSC && SCSI))) => SCSI_SPI_ATTRS)
(SCSI && (SCSI_FC_ATTRS && (SCSI_TGT || SCSI_TGT))) || ~SCSI_FC_TGT_ATTRS
SCSI || (SCSI_FC_ATTRS => (((((((ZFCP && (SCSI_LOWLEVEL && (S390 && (QDIO && SCSI)))) || (SCSI_BFA_FC && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (SCSI_IBMVFC && (SCSI_LOWLEVEL && (PPC_PSERIES && SCSI)))) || (SCSI_QLA_FC && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (LIBFC && (SCSI_LOWLEVEL && SCSI))) || (FUSION_FC && (FUSION && (PCI && SCSI)))) || (SCSI_LPFC && (SCSI_LOWLEVEL && (PCI && SCSI)))))
SCSI || ((ZFCP && (SCSI_LOWLEVEL && (S390 && (QDIO && SCSI)))) => SCSI_FC_ATTRS)
SCSI || ((SCSI_BFA_FC && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_FC_ATTRS)
SCSI || ((SCSI_IBMVFC && (SCSI_LOWLEVEL && (PPC_PSERIES && SCSI))) => SCSI_FC_ATTRS)
SCSI || ((SCSI_QLA_FC && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_FC_ATTRS)
SCSI || ((LIBFC && (SCSI_LOWLEVEL && SCSI)) => SCSI_FC_ATTRS)
SCSI || ((FUSION_FC && (FUSION && (PCI && SCSI))) => SCSI_FC_ATTRS)
SCSI || ((SCSI_LPFC && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_FC_ATTRS)
(SCSI && NET) || (SCSI_ISCSI_ATTRS => ((((((SCSI_QLA_ISCSI && (SCSI_LOWLEVEL && (PCI && (SCSI && NET)))) || (INFINIBAND_ISER && (INFINIBAND && (SCSI && (INET && INFINIBAND_ADDR_TRANS))))) || (SCSI_CXGB3_ISCSI && (SCSI_LOWLEVEL && (SCSI && CHELSIO_T3_DEPENDS)))) || (SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI)))) || (ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET)))) || (BE2ISCSI && (SCSI_LOWLEVEL && (PCI && SCSI)))))
(SCSI && NET) || ((SCSI_QLA_ISCSI && (SCSI_LOWLEVEL && (PCI && (SCSI && NET)))) => SCSI_ISCSI_ATTRS)
(SCSI && NET) || ((INFINIBAND_ISER && (INFINIBAND && (SCSI && (INET && INFINIBAND_ADDR_TRANS)))) => SCSI_ISCSI_ATTRS)
(SCSI && NET) || ((SCSI_CXGB3_ISCSI && (SCSI_LOWLEVEL && (SCSI && CHELSIO_T3_DEPENDS))) => SCSI_ISCSI_ATTRS)
(SCSI && NET) || ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) => SCSI_ISCSI_ATTRS)
(SCSI && NET) || ((ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET))) => SCSI_ISCSI_ATTRS)
(SCSI && NET) || ((BE2ISCSI && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_ISCSI_ATTRS)
(SCSI && BLK_DEV_BSG) || (SCSI_SAS_ATTRS => (((SCSI_SAS_LIBSAS && SCSI) || (SCSI_MPT2SAS && (SCSI_LOWLEVEL && (PCI && SCSI)))) || (FUSION_SAS && (FUSION && (PCI && SCSI)))))
(SCSI && BLK_DEV_BSG) || ((SCSI_SAS_LIBSAS && SCSI) => SCSI_SAS_ATTRS)
(SCSI && BLK_DEV_BSG) || ((SCSI_MPT2SAS && (SCSI_LOWLEVEL && (PCI && SCSI))) => SCSI_SAS_ATTRS)
(SCSI && BLK_DEV_BSG) || ((FUSION_SAS && (FUSION && (PCI && SCSI))) => SCSI_SAS_ATTRS)
(SCSI && (SCSI_SAS_LIBSAS && (ATA || ATA))) || ~SCSI_SAS_ATA
(SCSI && SCSI_SAS_LIBSAS) || (SCSI_SAS_HOST_SMP => (SCSI && SCSI_SAS_LIBSAS))
(SCSI && SCSI_SAS_LIBSAS) || ((SCSI && SCSI_SAS_LIBSAS) => SCSI_SAS_HOST_SMP)
(SCSI && SCSI_SAS_LIBSAS) || (SCSI_SAS_LIBSAS_DEBUG => (SCSI && SCSI_SAS_LIBSAS))
(SCSI && SCSI_SAS_LIBSAS) || ((SCSI && SCSI_SAS_LIBSAS) => SCSI_SAS_LIBSAS_DEBUG)
SCSI || (SCSI_SAS_LIBSAS => ((SCSI_AIC94XX && (SCSI_LOWLEVEL && (SCSI && PCI))) || (SCSI_MVSAS && (SCSI_LOWLEVEL && (SCSI && PCI)))))
SCSI || ((SCSI_AIC94XX && (SCSI_LOWLEVEL && (SCSI && PCI))) => SCSI_SAS_LIBSAS)
SCSI || ((SCSI_MVSAS && (SCSI_LOWLEVEL && (SCSI && PCI))) => SCSI_SAS_LIBSAS)
(SCSI && (SCSI_SRP_ATTRS && (SCSI_TGT || SCSI_TGT))) || ~SCSI_SRP_TGT_ATTRS
SCSI || (SCSI_SRP_ATTRS => ((INFINIBAND_SRP && (INFINIBAND && SCSI)) || (SCSI_IBMVSCSI && (SCSI_LOWLEVEL && (SCSI && (PPC_PSERIES || PPC_ISERIES))))))
SCSI || ((INFINIBAND_SRP && (INFINIBAND && SCSI)) => SCSI_SRP_ATTRS)
SCSI || ((SCSI_IBMVSCSI && (SCSI_LOWLEVEL && (SCSI && (PPC_PSERIES || PPC_ISERIES)))) => SCSI_SRP_ATTRS)
(SCSI_LOWLEVEL && (SCSI && INET)) || ~ISCSI_TCP
(SCSI_LOWLEVEL && (SCSI && CHELSIO_T3_DEPENDS)) || ~SCSI_CXGB3_ISCSI
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_BNX2_ISCSI
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~BE2ISCSI
(SCSI_LOWLEVEL && (SGI_HAS_WD93 && SCSI)) || ~SGIWD93_SCSI
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~BLK_DEV_3W_XXXX_RAID
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_3W_9XXX
(SCSI_LOWLEVEL && (ISA && (SCSI && ISA_DMA_API))) || ~SCSI_7000FASST
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_ACARD
(SCSI_LOWLEVEL && (ISA && (SCSI && ~c64BIT))) || ~SCSI_AHA152X
(SCSI_LOWLEVEL && (ISA && (SCSI && ISA_DMA_API))) || ~SCSI_AHA1542
(SCSI_LOWLEVEL && (EISA && SCSI)) || ~SCSI_AHA1740
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_AACRAID
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || ~AIC7XXX_CMDS_PER_DEVICE
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || ~AIC7XXX_RESET_DELAY_MS
(SCSI_LOWLEVEL && (SCSI && (SCSI_AIC7XXX && ~PREVENT_FIRMWARE_BUILD))) || ~AIC7XXX_BUILD_FIRMWARE
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || (AIC7XXX_DEBUG_ENABLE => (SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)))
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) => AIC7XXX_DEBUG_ENABLE)
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || ~AIC7XXX_DEBUG_MASK
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || (AIC7XXX_REG_PRETTY_PRINT => (SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)))
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_AIC7XXX)) => AIC7XXX_REG_PRETTY_PRINT)
(SCSI_LOWLEVEL && ((PCI || EISA) && SCSI)) || ~SCSI_AIC7XXX
(SCSI_LOWLEVEL && ((ISA || (EISA || PCI)) && SCSI)) || ~SCSI_AIC7XXX_OLD
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || ~AIC79XX_CMDS_PER_DEVICE
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || ~AIC79XX_RESET_DELAY_MS
(SCSI_LOWLEVEL && (SCSI && (SCSI_AIC79XX && ~PREVENT_FIRMWARE_BUILD))) || ~AIC79XX_BUILD_FIRMWARE
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || (AIC79XX_DEBUG_ENABLE => (SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)))
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) => AIC79XX_DEBUG_ENABLE)
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || ~AIC79XX_DEBUG_MASK
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || (AIC79XX_REG_PRETTY_PRINT => (SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)))
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_AIC79XX)) => AIC79XX_REG_PRETTY_PRINT)
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_AIC79XX
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC94XX)) || (AIC94XX_DEBUG => (SCSI_LOWLEVEL && (SCSI && SCSI_AIC94XX)))
(SCSI_LOWLEVEL && (SCSI && SCSI_AIC94XX)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_AIC94XX)) => AIC94XX_DEBUG)
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_AIC94XX
(SCSI_LOWLEVEL && (SCSI && SCSI_MVSAS)) || (SCSI_MVSAS_DEBUG => (SCSI_LOWLEVEL && (SCSI && SCSI_MVSAS)))
(SCSI_LOWLEVEL && (SCSI && SCSI_MVSAS)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_MVSAS)) => SCSI_MVSAS_DEBUG)
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_MVSAS
(SCSI_LOWLEVEL && (SCSI && (PCI && VIRT_TO_BUS))) || ~SCSI_DPT_I2O
(SCSI_LOWLEVEL && (SCSI && (VIRT_TO_BUS && (ISA || (EISA || PCI))))) || ~SCSI_ADVANSYS
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_IN2000
(SCSI_LOWLEVEL && (SCSI && (SCSI_ARCMSR && PCIEAER))) || ~SCSI_ARCMSR_AER
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_ARCMSR
(SCSI_LOWLEVEL && (PCI && (SCSI && MEGARAID_MM))) || ~MEGARAID_MAILBOX
(SCSI_LOWLEVEL && (PCI && (SCSI && MEGARAID_NEWGEN))) || ~MEGARAID_MM
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~MEGARAID_NEWGEN
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~MEGARAID_LEGACY
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~MEGARAID_SAS
(SCSI_LOWLEVEL && (PCI && (SCSI && SCSI_MPT2SAS))) || ~SCSI_MPT2SAS_MAX_SGE
(SCSI_LOWLEVEL && (PCI && (SCSI && SCSI_MPT2SAS))) || ~SCSI_MPT2SAS_LOGGING
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_MPT2SAS
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_HPTIOP
(SCSI_LOWLEVEL && (SCSI && (SCSI_BUSLOGIC && (PCI && X86_32)))) || ~SCSI_FLASHPOINT
(SCSI_LOWLEVEL && ((PCI || (ISA || MCA)) && (SCSI && (ISA_DMA_API && VIRT_TO_BUS)))) || ~SCSI_BUSLOGIC
(SCSI_LOWLEVEL && SCSI) || (LIBFC => ((LIBFCOE && (SCSI_LOWLEVEL && SCSI)) || (FCOE_FNIC && (SCSI_LOWLEVEL && (SCSI && (PCI && X86))))))
(SCSI_LOWLEVEL && SCSI) || ((LIBFCOE && (SCSI_LOWLEVEL && SCSI)) => LIBFC)
(SCSI_LOWLEVEL && SCSI) || ((FCOE_FNIC && (SCSI_LOWLEVEL && (SCSI && (PCI && X86)))) => LIBFC)
(SCSI_LOWLEVEL && SCSI) || (LIBFCOE => (FCOE && (SCSI_LOWLEVEL && (SCSI && PCI))))
(SCSI_LOWLEVEL && SCSI) || ((FCOE && (SCSI_LOWLEVEL && (SCSI && PCI))) => LIBFCOE)
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~FCOE
(SCSI_LOWLEVEL && (SCSI && (PCI && X86))) || ~FCOE_FNIC
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_DMX3191D
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_DTC3280
(SCSI_LOWLEVEL && (SCSI && SCSI_EATA)) || ~SCSI_EATA_TAGGED_QUEUE
(SCSI_LOWLEVEL && (SCSI && SCSI_EATA)) || ~SCSI_EATA_LINKED_COMMANDS
(SCSI_LOWLEVEL && (SCSI && SCSI_EATA)) || ~SCSI_EATA_MAX_TAGS
(SCSI_LOWLEVEL && ((ISA || (EISA || PCI)) && (SCSI && ISA_DMA_API))) || ~SCSI_EATA
(SCSI_LOWLEVEL && ((ISA || (EISA || PCI)) && (SCSI && BROKEN))) || ~SCSI_EATA_PIO
(SCSI_LOWLEVEL && ((ISA || PCI) && SCSI)) || ~SCSI_FUTURE_DOMAIN
(SCSI_LOWLEVEL && (MCA_LEGACY && SCSI)) || ~SCSI_FD_MCS
(SCSI_LOWLEVEL && ((ISA || (EISA || PCI)) && (SCSI && ISA_DMA_API))) || ~SCSI_GDTH
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_GENERIC_NCR5380
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_GENERIC_NCR5380_MMIO
(SCSI_LOWLEVEL && (SCSI && SCSI_GENERIC_NCR5380)) || ~SCSI_GENERIC_NCR53C400
(SCSI_LOWLEVEL && (SCSI && SCSI_IBMMCA)) || ~IBMMCA_SCSI_ORDER_STANDARD
(SCSI_LOWLEVEL && (SCSI && SCSI_IBMMCA)) || ~IBMMCA_SCSI_DEV_RESET
(SCSI_LOWLEVEL && (MCA && SCSI)) || ~SCSI_IBMMCA
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_IPS
(SCSI_LOWLEVEL && (SCSI && (PPC_PSERIES || PPC_ISERIES))) || ~SCSI_IBMVSCSI
(SCSI_LOWLEVEL && (SCSI && (PPC_PSERIES && (SCSI_SRP && SCSI_SRP_TGT_ATTRS)))) || ~SCSI_IBMVSCSIS
(SCSI_LOWLEVEL && (SCSI && SCSI_IBMVFC)) || (SCSI_IBMVFC_TRACE => (SCSI_LOWLEVEL && (SCSI && SCSI_IBMVFC)))
(SCSI_LOWLEVEL && (SCSI && SCSI_IBMVFC)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_IBMVFC)) => SCSI_IBMVFC_TRACE)
(SCSI_LOWLEVEL && (PPC_PSERIES && SCSI)) || ~SCSI_IBMVFC
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_INITIO
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_INIA100
(SCSI_LOWLEVEL && (SCSI && PARPORT_PC)) || ~SCSI_PPA
(SCSI_LOWLEVEL && (SCSI && PARPORT_PC)) || ~SCSI_IMM
(SCSI_LOWLEVEL && (SCSI && (SCSI_PPA || SCSI_IMM))) || ~SCSI_IZIP_EPP16
(SCSI_LOWLEVEL && (SCSI && (SCSI_PPA || SCSI_IMM))) || ~SCSI_IZIP_SLOW_CTR
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_NCR53C406A
(SCSI_LOWLEVEL && (MCA && SCSI)) || ~SCSI_NCR_D700
(SCSI_LOWLEVEL && (GSC && SCSI)) || ~SCSI_LASI700
(SCSI_LOWLEVEL && (SNI_RM && SCSI)) || ~SCSI_SNI_53C710
c53C700_LE_ON_BE => ((SCSI_SNI_53C710 && (SCSI_LOWLEVEL && (SNI_RM && SCSI))) || (SCSI_LOWLEVEL && (SCSI && SCSI_LASI700)))
(SCSI_SNI_53C710 && (SCSI_LOWLEVEL && (SNI_RM && SCSI))) => c53C700_LE_ON_BE
(SCSI_LOWLEVEL && (SCSI && SCSI_LASI700)) => c53C700_LE_ON_BE
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_STEX
c53C700_BE_BUS => (SCSI_LOWLEVEL && (SCSI && (SCSI_A4000T || (SCSI_ZORRO7XX || (MVME16x_SCSI || BVME6000_SCSI)))))
(SCSI_LOWLEVEL && (SCSI && (SCSI_A4000T || (SCSI_ZORRO7XX || (MVME16x_SCSI || BVME6000_SCSI))))) => c53C700_BE_BUS
(SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) || ~SCSI_SYM53C8XX_DMA_ADDRESSING_MODE
(SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) || ~SCSI_SYM53C8XX_DEFAULT_TAGS
(SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) || ~SCSI_SYM53C8XX_MAX_TAGS
(SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) || (SCSI_SYM53C8XX_MMIO => (SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)))
(SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_SYM53C8XX_2)) => SCSI_SYM53C8XX_MMIO)
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_SYM53C8XX_2
(SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) || (SCSI_IPR_TRACE => (SCSI_LOWLEVEL && (SCSI && SCSI_IPR)))
(SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) => SCSI_IPR_TRACE)
(SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) || (SCSI_IPR_DUMP => (SCSI_LOWLEVEL && (SCSI && SCSI_IPR)))
(SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) || ((SCSI_LOWLEVEL && (SCSI && SCSI_IPR)) => SCSI_IPR_DUMP)
(SCSI_LOWLEVEL && (PCI && (SCSI && ATA))) || ~SCSI_IPR
(SCSI_LOWLEVEL && (GSC && SCSI)) || ~SCSI_ZALON
(SCSI_LOWLEVEL && (MCA && SCSI)) || ~SCSI_NCR_Q720
(SCSI_LOWLEVEL && (SCSI && (SCSI_ZALON || SCSI_NCR_Q720))) || ~SCSI_NCR53C8XX_DEFAULT_TAGS
(SCSI_LOWLEVEL && (SCSI && (SCSI_ZALON || SCSI_NCR_Q720))) || ~SCSI_NCR53C8XX_MAX_TAGS
(SCSI_LOWLEVEL && (SCSI && (SCSI_ZALON || SCSI_NCR_Q720))) || ~SCSI_NCR53C8XX_SYNC
(SCSI_LOWLEVEL && (SCSI && ((SCSI_ZALON || SCSI_NCR_Q720) && SCSI_NCR53C8XX_DEFAULT_TAGS))) || ~SCSI_NCR53C8XX_NO_DISCONNECT
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_PAS16
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_QLOGIC_FAS
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_QLOGIC_1280
(SCSI_LOWLEVEL && (SBUS && SCSI)) || ~SCSI_QLOGICPTI
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_QLA_FC
(SCSI_LOWLEVEL && (PCI && (SCSI && NET))) || ~SCSI_QLA_ISCSI
(SCSI_LOWLEVEL && (SCSI && (SCSI_LPFC && DEBUG_FS))) || ~SCSI_LPFC_DEBUG_FS
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_LPFC
(SCSI_LOWLEVEL && ((EISA || MCA) && SCSI)) || ~SCSI_SIM710
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_SYM53C416
(SCSI_LOWLEVEL && (PCI && (SCSI && EXPERIMENTAL))) || ~SCSI_DC395x
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_DC390T
(SCSI_LOWLEVEL && (ISA && SCSI)) || ~SCSI_T128
(SCSI_LOWLEVEL && (SCSI && SCSI_U14_34F)) || ~SCSI_U14_34F_TAGGED_QUEUE
(SCSI_LOWLEVEL && (SCSI && SCSI_U14_34F)) || ~SCSI_U14_34F_LINKED_COMMANDS
(SCSI_LOWLEVEL && (SCSI && SCSI_U14_34F)) || ~SCSI_U14_34F_MAX_TAGS
(SCSI_LOWLEVEL && (ISA && (SCSI && ISA_DMA_API))) || ~SCSI_U14_34F
(SCSI_LOWLEVEL && (X86 && (ISA && SCSI))) || ~SCSI_ULTRASTOR
(SCSI_LOWLEVEL && (PCI && (SCSI && ~c64BIT))) || ~SCSI_NSP32
(SCSI_LOWLEVEL && SCSI) || ~SCSI_DEBUG
(SCSI_LOWLEVEL && (SCSI && SCSI_MESH)) || ~SCSI_MESH_SYNC_RATE
(SCSI_LOWLEVEL && (SCSI && SCSI_MESH)) || ~SCSI_MESH_RESET_DELAY_MS
(SCSI_LOWLEVEL && (PPC32 && (PPC_PMAC && SCSI))) || ~SCSI_MESH
(SCSI_LOWLEVEL && (PPC32 && (PPC_PMAC && SCSI))) || ~SCSI_MAC53C94
(SCSI_LOWLEVEL && (SCSI && SCSI_ACORNSCSI_3)) || ~SCSI_ACORNSCSI_TAGGED_QUEUE
(SCSI_LOWLEVEL && (SCSI && SCSI_ACORNSCSI_3)) || ~SCSI_ACORNSCSI_SYNC
(SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)) || ~SCSI_ACORNSCSI_3
(SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)) || ~SCSI_ARXESCSI
(SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)) || ~SCSI_CUMANA_2
(SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)) || ~SCSI_EESOXSCSI
(SCSI_LOWLEVEL && (ARCH_ACORN && SCSI)) || ~SCSI_POWERTECSCSI
(SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI))) || ~SCSI_CUMANA_1
(SCSI_LOWLEVEL && (ARCH_ACORN && (EXPERIMENTAL && SCSI))) || ~SCSI_OAK1
(SCSI_LOWLEVEL && (MACH_JAZZ && SCSI)) || ~JAZZ_ESP
(SCSI_LOWLEVEL && (AMIGA && SCSI)) || ~A3000_SCSI
(SCSI_LOWLEVEL && (ZORRO && SCSI)) || ~A2091_SCSI
(SCSI_LOWLEVEL && (ZORRO && SCSI)) || ~GVP11_SCSI
(SCSI_LOWLEVEL && (AMIGA && (SCSI && EXPERIMENTAL))) || ~SCSI_A4000T
(SCSI_LOWLEVEL && (ZORRO && (SCSI && EXPERIMENTAL))) || ~SCSI_ZORRO7XX
(SCSI_LOWLEVEL && (SCSI && ATARI_SCSI)) || ~ATARI_SCSI_TOSHIBA_DELAY
(SCSI_LOWLEVEL && (SCSI && ATARI_SCSI)) || ~ATARI_SCSI_RESET_BOOT
(SCSI_LOWLEVEL && (ATARI && SCSI)) || ~ATARI_SCSI
(SCSI_LOWLEVEL && (MAC && SCSI)) || ~MAC_SCSI
(SCSI_LOWLEVEL && (MAC && SCSI)) || ~SCSI_MAC_ESP
(SCSI_LOWLEVEL && (MVME147 && SCSI)) || ~MVME147_SCSI
(SCSI_LOWLEVEL && (MVME16x && SCSI)) || ~MVME16x_SCSI
(SCSI_LOWLEVEL && (BVME6000 && SCSI)) || ~BVME6000_SCSI
(SCSI_LOWLEVEL && (SUN3 && SCSI)) || ~SUN3_SCSI
(SCSI_LOWLEVEL && (SUN3X && SCSI)) || ~SUN3X_ESP
(SCSI_LOWLEVEL && (SBUS && SCSI)) || ~SCSI_SUNESP
(SCSI_LOWLEVEL && (S390 && (QDIO && SCSI))) || ~ZFCP
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_PMCRAID
(SCSI_LOWLEVEL && (SCSI && PCI)) || ~SCSI_SRP
(SCSI_LOWLEVEL && (PCI && SCSI)) || ~SCSI_BFA_FC
SCSI || (SCSI_LOWLEVEL => SCSI)
SCSI || (SCSI => SCSI_LOWLEVEL)
(SCSI_LOWLEVEL_PCMCIA && (SCSI && (PCMCIA && ~c64BIT))) || ~PCMCIA_AHA152X
(SCSI_LOWLEVEL_PCMCIA && (SCSI && PCMCIA)) || ~PCMCIA_FDOMAIN
(SCSI_LOWLEVEL_PCMCIA && (SCSI && (PCMCIA && ~c64BIT))) || ~PCMCIA_NINJA_SCSI
(SCSI_LOWLEVEL_PCMCIA && (SCSI && PCMCIA)) || ~PCMCIA_QLOGIC
(SCSI_LOWLEVEL_PCMCIA && (SCSI && PCMCIA)) || ~PCMCIA_SYM53C500
(SCSI && PCMCIA) || ~SCSI_LOWLEVEL_PCMCIA
SCSI_DH || ~SCSI_DH_RDAC
SCSI_DH || ~SCSI_DH_HP_SW
SCSI_DH || ~SCSI_DH_EMC
(SCSI_DH && EXPERIMENTAL) || ~SCSI_DH_ALUA
SCSI || ~SCSI_DH
SCSI_OSD_INITIATOR || ~SCSI_OSD_ULD
SCSI_OSD_INITIATOR || ~SCSI_OSD_DPRINT_SENSE
SCSI_OSD_INITIATOR || ~SCSI_OSD_DEBUG
SCSI || ~SCSI_OSD_INITIATOR
~ATA_NONSTANDARD
ATA || (ATA_VERBOSE_ERROR => ATA)
ATA || (ATA => ATA_VERBOSE_ERROR)
(ATA && (ACPI && PCI)) || (ATA_ACPI => (ATA && (ACPI && PCI)))
(ATA && (ACPI && PCI)) || ((ATA && (ACPI && PCI)) => ATA_ACPI)
ATA || (SATA_PMP => ATA)
ATA || (ATA => SATA_PMP)
(ATA && PCI) || ~SATA_AHCI
(ATA && PCI) || ~SATA_SIL24
(ATA && FSL_SOC) || ~SATA_FSL
(ATA && (ATA_SFF && PCI)) || ~SATA_SVW
(ATA && (ATA_SFF && PCI)) || ~ATA_PIIX
(ATA && ATA_SFF) || ~SATA_MV
(ATA && (ATA_SFF && PCI)) || ~SATA_NV
(ATA && (ATA_SFF && PCI)) || ~PDC_ADMA
(ATA && (ATA_SFF && PCI)) || ~SATA_QSTOR
(ATA && (ATA_SFF && PCI)) || ~SATA_PROMISE
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~SATA_SX4
(ATA && (ATA_SFF && PCI)) || ~SATA_SIL
(ATA && (ATA_SFF && PCI)) || ~SATA_SIS
(ATA && (ATA_SFF && PCI)) || ~SATA_ULI
(ATA && (ATA_SFF && PCI)) || ~SATA_VIA
(ATA && (ATA_SFF && PCI)) || ~SATA_VITESSE
(ATA && (ATA_SFF && PCI)) || ~SATA_INIC162X
(ATA && (ATA_SFF && ATA_ACPI)) || ~PATA_ACPI
(ATA && (ATA_SFF && PCI)) || ~PATA_ALI
(ATA && (ATA_SFF && PCI)) || ~PATA_AMD
(ATA && (ATA_SFF && PCI)) || ~PATA_ARTOP
(ATA && (ATA_SFF && PCI)) || ~PATA_ATP867X
(ATA && (ATA_SFF && (AVR32 && (PLATFORM_AT32AP && EXPERIMENTAL)))) || ~PATA_AT32
(ATA && (ATA_SFF && PCI)) || ~PATA_ATIIXP
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_CMD640_PCI
(ATA && (ATA_SFF && PCI)) || ~PATA_CMD64X
(ATA && (ATA_SFF && PCI)) || ~PATA_CS5520
(ATA && (ATA_SFF && PCI)) || ~PATA_CS5530
(ATA && (ATA_SFF && (PCI && (X86 && (~X86_64 && EXPERIMENTAL))))) || ~PATA_CS5535
(ATA && (ATA_SFF && (PCI && (X86 && ~X86_64)))) || ~PATA_CS5536
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_CYPRESS
(ATA && (ATA_SFF && PCI)) || ~PATA_EFAR
(ATA && (ATA_SFF && PCI)) || ~ATA_GENERIC
(ATA && (ATA_SFF && PCI)) || ~PATA_HPT366
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_HPT37X
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_HPT3X2N
(ATA && (ATA_SFF && PATA_HPT3X3)) || ~PATA_HPT3X3_DMA
(ATA && (ATA_SFF && PCI)) || ~PATA_HPT3X3
(ATA && (ATA_SFF && ISAPNP)) || ~PATA_ISAPNP
(ATA && (ATA_SFF && PCI)) || ~PATA_IT821X
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_IT8213
(ATA && (ATA_SFF && PCI)) || ~PATA_JMICRON
(ATA && (ATA_SFF && (ISA && EXPERIMENTAL))) || ~PATA_LEGACY
(ATA && (ATA_SFF && PCI)) || ~PATA_TRIFLEX
(ATA && (ATA_SFF && PCI)) || ~PATA_MARVELL
(ATA && (ATA_SFF && (PPC_MPC52xx && PPC_BESTCOMM))) || ~PATA_MPC52xx
(ATA && (ATA_SFF && PCI)) || ~PATA_MPIIX
(ATA && (ATA_SFF && PCI)) || ~PATA_OLDPIIX
(ATA && (ATA_SFF && PCI)) || ~PATA_NETCELL
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_NINJA32
(ATA && (ATA_SFF && PCI)) || ~PATA_NS87410
(ATA && (ATA_SFF && PCI)) || ~PATA_NS87415
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_OPTI
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_OPTIDMA
(ATA && (ATA_SFF && MACH_PALMLD)) || ~PATA_PALMLD
(ATA && (ATA_SFF && PCMCIA)) || ~PATA_PCMCIA
(ATA && (ATA_SFF && PCI)) || ~PATA_PDC_OLD
(ATA && (ATA_SFF && ISA)) || ~PATA_QDI
(ATA && (ATA_SFF && (PCI && EXPERIMENTAL))) || ~PATA_RADISYS
(ATA && (ATA_SFF && MIKROTIK_RB532)) || ~PATA_RB532
(ATA && (ATA_SFF && PCI)) || ~PATA_RDC
(ATA && (ATA_SFF && PCI)) || ~PATA_RZ1000
(ATA && (ATA_SFF && PCI)) || ~PATA_SC1200
(ATA && (ATA_SFF && PCI)) || ~PATA_SERVERWORKS
(ATA && (ATA_SFF && PCI)) || ~PATA_PDC2027X
(ATA && (ATA_SFF && PCI)) || ~PATA_SIL680
(ATA && (ATA_SFF && PCI)) || (PATA_SIS => (SATA_SIS && (ATA && (ATA_SFF && PCI))))
(ATA && (ATA_SFF && PCI)) || ((SATA_SIS && (ATA && (ATA_SFF && PCI))) => PATA_SIS)
(ATA && (ATA_SFF && PCI)) || ~PATA_VIA
(ATA && (ATA_SFF && PCI)) || ~PATA_WINBOND
(ATA && (ATA_SFF && (ISA && EXPERIMENTAL))) || ~PATA_WINBOND_VLB
~HAVE_PATA_PLATFORM
(ATA && (ATA_SFF && (EMBEDDED || (PPC || HAVE_PATA_PLATFORM)))) || ~PATA_PLATFORM
(ATA && (ATA_SFF && (ARM && ARCH_AT91))) || ~PATA_AT91
(ATA && (ATA_SFF && (PATA_PLATFORM && PPC_OF))) || ~PATA_OF_PLATFORM
(ATA && (ATA_SFF && (ARM && ARCH_ACORN))) || ~PATA_ICSIDE
(ATA && (ATA_SFF && ARCH_IXP4XX)) || ~PATA_IXP4XX_CF
(ATA && (ATA_SFF && CPU_CAVIUM_OCTEON)) || ~PATA_OCTEON_CF
(ATA && (ATA_SFF && (PCI && PPC_CELLEB))) || ~PATA_SCC
(ATA && (ATA_SFF && PCI)) || ~PATA_SCH
(ATA && (ATA_SFF && (BF542 || (BF548 || BF549)))) || ~PATA_BF54X
ATA || (ATA_SFF => ATA)
ATA || (ATA => ATA_SFF)
(HAS_IOMEM && (BLOCK && ((~M32R && ~M68K) || BROKEN))) || ~ATA
(MD && BLK_DEV_MD) || (MD_AUTODETECT => (MD && BLK_DEV_MD))
(MD && BLK_DEV_MD) || ~MD_LINEAR
(MD && BLK_DEV_MD) || ~MD_RAID0
(MD && BLK_DEV_MD) || ~MD_RAID1
(MD && (BLK_DEV_MD && EXPERIMENTAL)) || ~MD_RAID10
(MD && (MD_RAID456 && (SMP && EXPERIMENTAL))) || ~MULTICORE_RAID456
(MD && BLK_DEV_MD) || ~MD_RAID456
MD || ~BLK_DEV_MD
MD_RAID6_PQ => (MD_RAID456 && (MD && BLK_DEV_MD))
(MD_RAID456 && (MD && BLK_DEV_MD)) => MD_RAID6_PQ
(MD && MD_RAID6_PQ) || ~ASYNC_RAID6_TEST
(MD && BLK_DEV_MD) || ~MD_MULTIPATH
(MD && BLK_DEV_MD) || ~MD_FAULTY
(MD && BLK_DEV_DM) || ~DM_DEBUG
(MD && BLK_DEV_DM) || ~DM_CRYPT
(MD && BLK_DEV_DM) || ~DM_SNAPSHOT
(MD && (DM_MIRROR && (EXPERIMENTAL && NET))) || ~DM_LOG_USERSPACE
(MD && BLK_DEV_DM) || ~DM_MIRROR
(MD && BLK_DEV_DM) || ~DM_ZERO
(MD && DM_MULTIPATH) || ~DM_MULTIPATH_QL
(MD && DM_MULTIPATH) || ~DM_MULTIPATH_ST
(MD && (BLK_DEV_DM && (SCSI_DH || ~SCSI_DH))) || ~DM_MULTIPATH
(MD && (BLK_DEV_DM && EXPERIMENTAL)) || ~DM_DELAY
(MD && (BLK_DEV_DM && EXPERIMENTAL)) || ~DM_UEVENT
MD || ~BLK_DEV_DM
BLOCK || ~MD
(FUSION && (PCI && SCSI)) || ~FUSION_SPI
(FUSION && (PCI && SCSI)) || ~FUSION_FC
(FUSION && (PCI && SCSI)) || ~FUSION_SAS
FUSION || ~FUSION_MAX_SGE
(FUSION && (FUSION_SPI || (FUSION_FC || FUSION_SAS))) || ~FUSION_CTL
(FUSION && (FUSION_FC && NET_FC)) || ~FUSION_LAN
FUSION || ~FUSION_LOGGING
PCI || ~FUSION
FIREWIRE_OHCI_DEBUG => ((PCI || BROKEN) && FIREWIRE_OHCI)
((PCI || BROKEN) && FIREWIRE_OHCI) => FIREWIRE_OHCI_DEBUG
((PCI || BROKEN) && (PCI && FIREWIRE)) || ~FIREWIRE_OHCI
((PCI || BROKEN) && (FIREWIRE && SCSI)) || ~FIREWIRE_SBP2
((PCI || BROKEN) && (FIREWIRE && (INET && EXPERIMENTAL))) || ~FIREWIRE_NET
(PCI || BROKEN) || ~FIREWIRE
((PCI || BROKEN) && (PCI && IEEE1394)) || ~IEEE1394_OHCI1394
((PCI || BROKEN) && (PCI && (IEEE1394 && I2C))) || ~IEEE1394_PCILYNX
((PCI || BROKEN) && (IEEE1394_SBP2 && (VIRT_TO_BUS && EXPERIMENTAL))) || ~IEEE1394_SBP2_PHYS_DMA
((PCI || BROKEN) && (IEEE1394 && SCSI)) || ~IEEE1394_SBP2
IEEE1394_ETH1394_ROM_ENTRY => (IEEE1394_ETH1394 && ((PCI || BROKEN) && (IEEE1394 && (EXPERIMENTAL && INET))))
(IEEE1394_ETH1394 && ((PCI || BROKEN) && (IEEE1394 && (EXPERIMENTAL && INET)))) => IEEE1394_ETH1394_ROM_ENTRY
((PCI || BROKEN) && (IEEE1394 && (EXPERIMENTAL && INET))) || ~IEEE1394_ETH1394
((PCI || BROKEN) && IEEE1394) || ~IEEE1394_RAWIO
((PCI || BROKEN) && (IEEE1394 && IEEE1394_OHCI1394)) || ~IEEE1394_VIDEO1394
((PCI || BROKEN) && (IEEE1394 && IEEE1394_OHCI1394)) || ~IEEE1394_DV1394
((PCI || BROKEN) && IEEE1394) || ~IEEE1394_VERBOSEDEBUG
(PCI || BROKEN) || ~IEEE1394
I2O || (I2O_LCT_NOTIFY_ON_CHANGES => I2O)
I2O || (I2O => I2O_LCT_NOTIFY_ON_CHANGES)
(I2O && (I2O_EXT_ADAPTEC && (c64BIT || HIGHMEM64G))) || (I2O_EXT_ADAPTEC_DMA64 => (I2O && (I2O_EXT_ADAPTEC && (c64BIT || HIGHMEM64G))))
(I2O && (I2O_EXT_ADAPTEC && (c64BIT || HIGHMEM64G))) || ((I2O && (I2O_EXT_ADAPTEC && (c64BIT || HIGHMEM64G))) => I2O_EXT_ADAPTEC_DMA64)
I2O || (I2O_EXT_ADAPTEC => I2O)
I2O || (I2O => I2O_EXT_ADAPTEC)
(I2O && I2O_CONFIG) || (I2O_CONFIG_OLD_IOCTL => (I2O && I2O_CONFIG))
(I2O && I2O_CONFIG) || ((I2O && I2O_CONFIG) => I2O_CONFIG_OLD_IOCTL)
(I2O && VIRT_TO_BUS) || ~I2O_CONFIG
I2O || ~I2O_BUS
(I2O && BLOCK) || ~I2O_BLOCK
(I2O && SCSI) || ~I2O_SCSI
I2O || ~I2O_PROC
PCI || ~I2O
(MACINTOSH_DRIVERS && (ADB && MAC)) || ~ADB_MACII
(MACINTOSH_DRIVERS && (ADB && MAC)) || ~ADB_MACIISI
(MACINTOSH_DRIVERS && (ADB && MAC)) || ~ADB_IOP
(MACINTOSH_DRIVERS && (ADB && MAC)) || ~ADB_PMU68K
(MACINTOSH_DRIVERS && (MAC || (PPC_PMAC && PPC32))) || ~ADB
(MACINTOSH_DRIVERS && ((ADB || PPC_PMAC) && ~PPC_PMAC64)) || ~ADB_CUDA
(MACINTOSH_DRIVERS && ADB_PMU_LED) || ~ADB_PMU_LED_IDE
(MACINTOSH_DRIVERS && ADB_PMU) || ~ADB_PMU_LED
(MACINTOSH_DRIVERS && PPC_PMAC) || ~ADB_PMU
(MACINTOSH_DRIVERS && PPC_PMAC64) || ~PMAC_SMU
(MACINTOSH_DRIVERS && (ADB_PMU && (PM && PPC32))) || ~PMAC_APM_EMU
(MACINTOSH_DRIVERS && (PPC_PMAC && (PPC32 && BLOCK))) || ~PMAC_MEDIABAY
(MACINTOSH_DRIVERS && (PMAC_BACKLIGHT && (BROKEN || ~PPC64))) || ~PMAC_BACKLIGHT_LEGACY
(MACINTOSH_DRIVERS && (ADB_PMU && (FB && (BROKEN || ~PPC64)))) || ~PMAC_BACKLIGHT
(MACINTOSH_DRIVERS && (ADB && (PPC_CHRP && ~PPC_PMAC64))) || ~ADB_MACIO
(MACINTOSH_DRIVERS && (ADB && INPUT)) || ~INPUT_ADBHID
MACINTOSH_DRIVERS || ~MAC_EMUMOUSEBTN
(MACINTOSH_DRIVERS && (I2C && (I2C_POWERMAC && (PPC_PMAC && ~PPC_PMAC64)))) || ~THERM_WINDTUNNEL
(MACINTOSH_DRIVERS && (I2C && (I2C_POWERMAC && (PPC_PMAC && ~PPC_PMAC64)))) || ~THERM_ADT746X
(MACINTOSH_DRIVERS && (I2C && (I2C_POWERMAC && PPC_PMAC64))) || ~THERM_PM72
(MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU)))) || ~WINDFARM_PM81
(MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU)))) || ~WINDFARM_PM91
(MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU))) || ~WINDFARM_PM112
(MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU))) || ~WINDFARM_PM121
(MACINTOSH_DRIVERS && PPC) || ~WINDFARM
(MACINTOSH_DRIVERS && (ADB_CUDA && PPC_PMAC)) || ~ANSLCD
(MACINTOSH_DRIVERS && PPC_PMAC) || ~PMAC_RACKMETER
(PPC || (MAC || X86)) || (MACINTOSH_DRIVERS => ((PPC || (MAC || X86)) && (PPC_PMAC || MAC)))
(PPC || (MAC || X86)) || (((PPC || (MAC || X86)) && (PPC_PMAC || MAC)) => MACINTOSH_DRIVERS)
(NETDEVICES && NET_CLS_ACT) || ~IFB
NETDEVICES || ~DUMMY
(NETDEVICES && (INET && (IPV6 || ~IPV6))) || ~BONDING
(NETDEVICES && EXPERIMENTAL) || ~MACVLAN
NETDEVICES || ~EQUALIZER
NETDEVICES || ~TUN
NETDEVICES || ~VETH
(NETDEVICES && PNP) || ~NET_SB1000
(NETDEVICES && ARCNET) || ~ARCNET_1201
(NETDEVICES && ARCNET) || ~ARCNET_1051
(NETDEVICES && ARCNET) || ~ARCNET_RAW
(NETDEVICES && ARCNET) || ~ARCNET_CAP
(NETDEVICES && ARCNET) || ~ARCNET_COM90xx
(NETDEVICES && ARCNET) || ~ARCNET_COM90xxIO
(NETDEVICES && ARCNET) || ~ARCNET_RIM_I
(NETDEVICES && (ARCNET && (ARCNET_COM20020 && ISA))) || ~ARCNET_COM20020_ISA
(NETDEVICES && (ARCNET && (ARCNET_COM20020 && PCI))) || ~ARCNET_COM20020_PCI
(NETDEVICES && ARCNET) || ~ARCNET_COM20020
(NETDEVICES && (ISA || PCI)) || ~ARCNET
(NETDEVICES && PHYLIB) || ~MARVELL_PHY
(NETDEVICES && PHYLIB) || ~DAVICOM_PHY
(NETDEVICES && PHYLIB) || ~QSEMI_PHY
(NETDEVICES && PHYLIB) || ~LXT_PHY
(NETDEVICES && PHYLIB) || ~CICADA_PHY
(NETDEVICES && PHYLIB) || ~VITESSE_PHY
(NETDEVICES && PHYLIB) || (SMSC_PHY => (SMSC9420 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))))
(NETDEVICES && PHYLIB) || ((SMSC9420 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => SMSC_PHY)
(NETDEVICES && PHYLIB) || ~BROADCOM_PHY
(NETDEVICES && (PHYLIB && BCM63XX)) || ~BCM63XX_PHY
(NETDEVICES && PHYLIB) || ~ICPLUS_PHY
(NETDEVICES && PHYLIB) || ~REALTEK_PHY
(NETDEVICES && PHYLIB) || ~NATIONAL_PHY
(NETDEVICES && PHYLIB) || ~STE10XP
(NETDEVICES && PHYLIB) || ~LSI_ET1011C_PHY
(NETDEVICES && PHYLIB) || ~FIXED_PHY
(NETDEVICES && (PHYLIB && (MDIO_BITBANG && GENERIC_GPIO))) || ~MDIO_GPIO
(NETDEVICES && PHYLIB) || (MDIO_BITBANG => ((SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)))))))) || (FS_ENET_MDIO_FCC && (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))))))
(NETDEVICES && PHYLIB) || ((SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)))))))) => MDIO_BITBANG)
(NETDEVICES && PHYLIB) || ((FS_ENET_MDIO_FCC && (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2)))) => MDIO_BITBANG)
(NETDEVICES && (~S390 && NET_ETHERNET)) || (PHYLIB => (((((((((((((((((((((((((((ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA)))) || (GIANFAR && (NETDEVICES && (NETDEV_1000 && FSL_SOC)))) || (DNET && (NETDEVICES && (NET_ETHERNET && HAS_IOMEM)))) || (SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724))))))))) || (MV643XX_ETH && (NETDEVICES && (NETDEV_1000 && (MV64X60 || (PPC32 || PLAT_ORION)))))) || (TI_DAVINCI_EMAC && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_DAVINCI))))) || (W90P910_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_W90X900))))) || (TC35815 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && MIPS)))))) || (BCM63XX_ENET && (NETDEVICES && (NET_ETHERNET && BCM63XX)))) || (STMMAC_ETH && (NETDEV_1000 && (NETDEVICES && CPU_SUBTYPE_ST40)))) || (FSL_PQ_MDIO && (NETDEVICES && (NETDEV_1000 && FSL_SOC)))) || (MIPS_AU1X00_ENET && (NETDEVICES && (NET_ETHERNET && SOC_AU1X00)))) || (CPMAC && (NETDEVICES && (NET_ETHERNET && (EXPERIMENTAL && AR7))))) || (MACB && (NETDEVICES && (NET_ETHERNET && (AVR32 || (ARCH_AT91SAM9260 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9G20 || (ARCH_AT91SAM9G45 || ARCH_AT91CAP9))))))))) || (BFIN_MAC && (NETDEVICES && (NET_ETHERNET && (BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537))))))))) || (TIGON3 && (NETDEVICES && (NETDEV_1000 && PCI)))) || (NET_DSA && (NET && (EXPERIMENTAL && ~S390)))) || (IXP4XX_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && (ARCH_IXP4XX && (IXP4XX_NPE && IXP4XX_QMGR))))))) || (SMSC911X && (NETDEVICES && (NET_ETHERNET && (ARM || (SUPERH || BLACKFIN)))))) || (SMSC9420 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (SB1250_MAC && (NETDEVICES && (NETDEV_1000 && SIBYTE_SB1xxx_SOC)))) || (S6GMAC && (NETDEVICES && (NETDEV_1000 && XTENSA_VARIANT_S6000)))) || (PASEMI_MAC && (NETDEVICES && (NETDEV_10000 && (PPC_PASEMI && PCI))))) || (UCC_GETH && (NETDEVICES && (NETDEV_1000 && QUICC_ENGINE)))) || (FEC_MPC52xx && (NETDEVICES && (NET_ETHERNET && (PPC_MPC52xx && PPC_BESTCOMM))))) || (FS_ENET && (NETDEVICES && (NET_ETHERNET && (CPM1 || CPM2))))) || (XILINX_LL_TEMAC && (NETDEVICES && (NETDEV_1000 && PPC_DCR_NATIVE)))))
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((GIANFAR && (NETDEVICES && (NETDEV_1000 && FSL_SOC))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((DNET && (NETDEVICES && (NET_ETHERNET && HAS_IOMEM))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)))))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((MV643XX_ETH && (NETDEVICES && (NETDEV_1000 && (MV64X60 || (PPC32 || PLAT_ORION))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((TI_DAVINCI_EMAC && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_DAVINCI)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((W90P910_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_W90X900)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((TC35815 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && MIPS))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((BCM63XX_ENET && (NETDEVICES && (NET_ETHERNET && BCM63XX))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((STMMAC_ETH && (NETDEV_1000 && (NETDEVICES && CPU_SUBTYPE_ST40))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((FSL_PQ_MDIO && (NETDEVICES && (NETDEV_1000 && FSL_SOC))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((MIPS_AU1X00_ENET && (NETDEVICES && (NET_ETHERNET && SOC_AU1X00))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((CPMAC && (NETDEVICES && (NET_ETHERNET && (EXPERIMENTAL && AR7)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((MACB && (NETDEVICES && (NET_ETHERNET && (AVR32 || (ARCH_AT91SAM9260 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9G20 || (ARCH_AT91SAM9G45 || ARCH_AT91CAP9)))))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((BFIN_MAC && (NETDEVICES && (NET_ETHERNET && (BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537)))))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((TIGON3 && (NETDEVICES && (NETDEV_1000 && PCI))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((NET_DSA && (NET && (EXPERIMENTAL && ~S390))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((IXP4XX_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && (ARCH_IXP4XX && (IXP4XX_NPE && IXP4XX_QMGR)))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((SMSC911X && (NETDEVICES && (NET_ETHERNET && (ARM || (SUPERH || BLACKFIN))))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((SMSC9420 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((SB1250_MAC && (NETDEVICES && (NETDEV_1000 && SIBYTE_SB1xxx_SOC))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((S6GMAC && (NETDEVICES && (NETDEV_1000 && XTENSA_VARIANT_S6000))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((PASEMI_MAC && (NETDEVICES && (NETDEV_10000 && (PPC_PASEMI && PCI)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((UCC_GETH && (NETDEVICES && (NETDEV_1000 && QUICC_ENGINE))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((FEC_MPC52xx && (NETDEVICES && (NET_ETHERNET && (PPC_MPC52xx && PPC_BESTCOMM)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((FS_ENET && (NETDEVICES && (NET_ETHERNET && (CPM1 || CPM2)))) => PHYLIB)
(NETDEVICES && (~S390 && NET_ETHERNET)) || ((XILINX_LL_TEMAC && (NETDEVICES && (NETDEV_1000 && PPC_DCR_NATIVE))) => PHYLIB)
(NETDEVICES && NET_ETHERNET) || (MII => ((((((((((((((((((((((((((((((((((((((((((((((((PCMCIA_SMC91C92 && (NETDEVICES && (NET_PCMCIA && PCMCIA))) || (SMC91X && (NETDEVICES && (NET_ETHERNET && (ARM || (REDWOOD_5 || (REDWOOD_6 || (M32R || (SUPERH || (MIPS || (BLACKFIN || MN10300))))))))))) || (c8139TOO && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (VIA_RHINE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (AMD8111_ETH && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (B44 && (NETDEVICES && (NET_ETHERNET && (SSB_POSSIBLE && HAS_DMA))))) || (SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724))))))))) || (USB_PEGASUS && (NETDEVICES && (USB && NET)))) || (ATL1 && (NETDEVICES && (NETDEV_1000 && PCI)))) || (BFIN_MAC && (NETDEVICES && (NET_ETHERNET && (BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537))))))))) || (VORTEX && (NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (PCI || EISA)))))) || (SMSC911X && (NETDEVICES && (NET_ETHERNET && (ARM || (SUPERH || BLACKFIN)))))) || (ARM_KS8695_ETHER && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_KS8695))))) || (R6040 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (ADAPTEC_STARFIRE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (E100 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (KS8851_MLL && (NETDEVICES && (NET_ETHERNET && HAS_IOMEM)))) || (SIS900 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (SMC911X && (NETDEVICES && (NET_ETHERNET && (ARM || SUPERH))))) || (ATL1C && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))))) || (USB_RTL8150 && (NETDEVICES && (USB && (NET && EXPERIMENTAL))))) || (FS_ENET && (NETDEVICES && (NET_ETHERNET && (CPM1 || CPM2))))) || (ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA))))) || (AX88796 && (NETDEVICES && (NET_ETHERNET && (ARM || (MIPS || SUPERH)))))) || (SGI_IOC3_ETH && (NETDEVICES && (NET_ETHERNET && (PCI && SGI_IP27))))) || (JME && (NETDEVICES && (NETDEV_1000 && PCI)))) || (ATL2 && (NETDEVICES && (NET_ETHERNET && PCI)))) || (USB_USBNET && (NETDEVICES && (USB && NET)))) || (VIA_VELOCITY && (NETDEVICES && (NETDEV_1000 && PCI)))) || (c8139CP && (NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && EXPERIMENTAL)))))) || (BCM63XX_ENET && (NETDEVICES && (NET_ETHERNET && BCM63XX)))) || (STMMAC_ETH && (NETDEV_1000 && (NETDEVICES && CPU_SUBTYPE_ST40)))) || (PCNET32 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (OCTEON_ETHERNET && (STAGING && (~STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON)))) || (NET_NETX && (NETDEVICES && (NET_ETHERNET && ARCH_NETX)))) || (FEALNX && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (ARM_AT91_ETHER && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_AT91RM9200))))) || (WINBOND_840 && (NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI))))) || (ATL1E && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))))) || (KS8851 && (NETDEVICES && (NET_ETHERNET && SPI)))) || (DM9000 && (NETDEVICES && (NET_ETHERNET && (ARM || (BLACKFIN || MIPS)))))) || (SIS190 && (NETDEVICES && (NETDEV_1000 && PCI)))) || (R8169 && (NETDEVICES && (NETDEV_1000 && PCI)))) || (IP1000 && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))))) || (EP93XX_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_EP93XX))))) || (HAMACHI && (NETDEVICES && (NETDEV_1000 && PCI)))) || (SUNDANCE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))) || (EPIC100 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))))))
(NETDEVICES && NET_ETHERNET) || ((PCMCIA_SMC91C92 && (NETDEVICES && (NET_PCMCIA && PCMCIA))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SMC91X && (NETDEVICES && (NET_ETHERNET && (ARM || (REDWOOD_5 || (REDWOOD_6 || (M32R || (SUPERH || (MIPS || (BLACKFIN || MN10300)))))))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((c8139TOO && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((VIA_RHINE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((AMD8111_ETH && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((B44 && (NETDEVICES && (NET_ETHERNET && (SSB_POSSIBLE && HAS_DMA)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SH_ETH && (NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724)))))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((USB_PEGASUS && (NETDEVICES && (USB && NET))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ATL1 && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((BFIN_MAC && (NETDEVICES && (NET_ETHERNET && (BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537)))))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((VORTEX && (NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (PCI || EISA))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SMSC911X && (NETDEVICES && (NET_ETHERNET && (ARM || (SUPERH || BLACKFIN))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ARM_KS8695_ETHER && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_KS8695)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((R6040 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ADAPTEC_STARFIRE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((E100 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((KS8851_MLL && (NETDEVICES && (NET_ETHERNET && HAS_IOMEM))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SIS900 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SMC911X && (NETDEVICES && (NET_ETHERNET && (ARM || SUPERH)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ATL1C && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((USB_RTL8150 && (NETDEVICES && (USB && (NET && EXPERIMENTAL)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((FS_ENET && (NETDEVICES && (NET_ETHERNET && (CPM1 || CPM2)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((AX88796 && (NETDEVICES && (NET_ETHERNET && (ARM || (MIPS || SUPERH))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SGI_IOC3_ETH && (NETDEVICES && (NET_ETHERNET && (PCI && SGI_IP27)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((JME && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ATL2 && (NETDEVICES && (NET_ETHERNET && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((USB_USBNET && (NETDEVICES && (USB && NET))) => MII)
(NETDEVICES && NET_ETHERNET) || ((VIA_VELOCITY && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((c8139CP && (NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && EXPERIMENTAL))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((BCM63XX_ENET && (NETDEVICES && (NET_ETHERNET && BCM63XX))) => MII)
(NETDEVICES && NET_ETHERNET) || ((STMMAC_ETH && (NETDEV_1000 && (NETDEVICES && CPU_SUBTYPE_ST40))) => MII)
(NETDEVICES && NET_ETHERNET) || ((PCNET32 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((OCTEON_ETHERNET && (STAGING && (~STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON))) => MII)
(NETDEVICES && NET_ETHERNET) || ((NET_NETX && (NETDEVICES && (NET_ETHERNET && ARCH_NETX))) => MII)
(NETDEVICES && NET_ETHERNET) || ((FEALNX && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ARM_AT91_ETHER && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_AT91RM9200)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((WINBOND_840 && (NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((ATL1E && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((KS8851 && (NETDEVICES && (NET_ETHERNET && SPI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((DM9000 && (NETDEVICES && (NET_ETHERNET && (ARM || (BLACKFIN || MIPS))))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SIS190 && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((R8169 && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((IP1000 && (NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((EP93XX_ETH && (NETDEVICES && (NET_ETHERNET && (ARM && ARCH_EP93XX)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((HAMACHI && (NETDEVICES && (NETDEV_1000 && PCI))) => MII)
(NETDEVICES && NET_ETHERNET) || ((SUNDANCE && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && NET_ETHERNET) || ((EPIC100 && (NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI)))) => MII)
(NETDEVICES && (NET_ETHERNET && (AVR32 || (ARCH_AT91SAM9260 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9G20 || (ARCH_AT91SAM9G45 || ARCH_AT91CAP9))))))) || ~MACB
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_EBSA110))) || ~ARM_AM79C961A
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_ACORN))) || ~ARM_ETHER1
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_ACORN))) || ~ARM_ETHER3
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_ACORN))) || ~ARM_ETHERH
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_AT91RM9200))) || ~ARM_AT91_ETHER
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_KS8695))) || ~ARM_KS8695_ETHER
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_EP93XX))) || ~EP93XX_ETH
(NETDEVICES && (NET_ETHERNET && (ARM && (ARCH_IXP4XX && (IXP4XX_NPE && IXP4XX_QMGR))))) || ~IXP4XX_ETH
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_W90X900))) || ~W90P910_ETH
(NETDEVICES && (NET_ETHERNET && AX88796)) || ~AX88796_93CX6
(NETDEVICES && (NET_ETHERNET && (ARM || (MIPS || SUPERH)))) || ~AX88796
(NETDEVICES && (NET_ETHERNET && MACE)) || ~MACE_AAUI_PORT
(NETDEVICES && (NET_ETHERNET && (PPC_PMAC && PPC32))) || ~MACE
(NETDEVICES && (NET_ETHERNET && (PPC_PMAC && PPC32))) || ~BMAC
(NETDEVICES && (NET_ETHERNET && ZORRO)) || ~ARIADNE
(NETDEVICES && (NET_ETHERNET && ZORRO)) || ~A2065
(NETDEVICES && (NET_ETHERNET && ZORRO)) || ~HYDRA
(NETDEVICES && (NET_ETHERNET && ZORRO)) || ~ZORRO8390
(NETDEVICES && (NET_ETHERNET && AMIGA_PCMCIA)) || ~APNE
(NETDEVICES && (NET_ETHERNET && MAC)) || ~MAC8390
(NETDEVICES && (NET_ETHERNET && MAC)) || ~MAC89x0
(NETDEVICES && (NET_ETHERNET && MAC)) || ~MACSONIC
(NETDEVICES && (NET_ETHERNET && MAC)) || ~MACMACE
(NETDEVICES && (NET_ETHERNET && MVME147)) || ~MVME147_NET
(NETDEVICES && (NET_ETHERNET && MVME16x)) || ~MVME16x_NET
(NETDEVICES && (NET_ETHERNET && BVME6000)) || ~BVME6000_NET
(NETDEVICES && (NET_ETHERNET && ATARI)) || ~ATARILANCE
(NETDEVICES && (NET_ETHERNET && (SUN3 || SUN3X))) || ~SUN3LANCE
(NETDEVICES && (NET_ETHERNET && SUN3)) || ~SUN3_82586
(NETDEVICES && (NET_ETHERNET && DIO)) || ~HPLANCE
(NETDEVICES && (NET_ETHERNET && GSC)) || ~LASI_82596
(NETDEVICES && (NET_ETHERNET && SNI_RM)) || ~SNI_82596
(NETDEVICES && (NET_ETHERNET && MIKROTIK_RB532)) || ~KORINA
(NETDEVICES && (NET_ETHERNET && MACH_JAZZ)) || ~MIPS_JAZZ_SONIC
(NETDEVICES && (NET_ETHERNET && XTENSA_PLATFORM_XT2000)) || ~XTENSA_XT2000_SONIC
(NETDEVICES && (NET_ETHERNET && SOC_AU1X00)) || ~MIPS_AU1X00_ENET
(NETDEVICES && (NET_ETHERNET && (PCI && SGI_IP27))) || ~SGI_IOC3_ETH
(NETDEVICES && (NET_ETHERNET && MIPS_SIM)) || ~MIPS_SIM_NET
(NETDEVICES && (NET_ETHERNET && SGI_IP32)) || ~SGI_O2MACE_ETH
(NETDEVICES && (NET_ETHERNET && SUPERH)) || ~STNIC
(NETDEVICES && (NET_ETHERNET && (SUPERH && (CPU_SUBTYPE_SH7710 || (CPU_SUBTYPE_SH7712 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7619 || CPU_SUBTYPE_SH7724))))))) || ~SH_ETH
(NETDEVICES && (NET_ETHERNET && SBUS)) || ~SUNLANCE
(NETDEVICES && (NET_ETHERNET && (SBUS || PCI))) || ~HAPPYMEAL
(NETDEVICES && (NET_ETHERNET && (SBUS && EXPERIMENTAL))) || ~SUNBMAC
(NETDEVICES && (NET_ETHERNET && SBUS)) || ~SUNQE
(NETDEVICES && (NET_ETHERNET && PCI)) || ~SUNGEM
(NETDEVICES && (NET_ETHERNET && PCI)) || ~CASSINI
(NETDEVICES && (NET_ETHERNET && SUN_LDOMS)) || ~SUNVNET
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && ISA))) || ~EL1
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && ISA))) || ~EL2
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (ISA && ISA_DMA_API)))) || ~ELPLUS
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (ISA && EXPERIMENTAL)))) || ~EL16
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (ISA || (EISA || MCA))))) || ~EL3
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && ((ISA || EISA) && ISA_DMA_API)))) || ~c3C515
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && MCA_LEGACY))) || ~ELMC
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (MCA && MCA_LEGACY)))) || ~ELMC_II
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && (PCI || EISA)))) || ~VORTEX
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_3COM && PCI))) || ~TYPHOON
(NETDEVICES && (NET_ETHERNET && (ISA || (EISA || (MCA || PCI))))) || ~NET_VENDOR_3COM
(NETDEVICES && (NET_ETHERNET && (ISA && ISA_DMA_API))) || ~LANCE
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_SMC && ISA))) || ~WD80x3
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_SMC && MCA))) || ~ULTRAMCA
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_SMC && ISA))) || ~ULTRA
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_SMC && EISA))) || ~ULTRA32
(NETDEVICES && (NET_ETHERNET && (ISA || (MCA || (EISA || MAC))))) || ~NET_VENDOR_SMC
(NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (BF527 || BF537)))) || (BFIN_MAC_USE_L1 => ((BFIN_MAC && (NETDEVICES && (NET_ETHERNET && ((BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537))))) && DMA_UNCACHED_NONE)))) || (NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (BF527 || BF537))))))
(NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (BF527 || BF537)))) || ((BFIN_MAC && (NETDEVICES && (NET_ETHERNET && ((BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537))))) && DMA_UNCACHED_NONE)))) => BFIN_MAC_USE_L1)
(NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (BF527 || BF537)))) || ((NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (BF527 || BF537)))) => BFIN_MAC_USE_L1)
(NETDEVICES && (NET_ETHERNET && BFIN_MAC)) || ~BFIN_TX_DESC_NUM
(NETDEVICES && (NET_ETHERNET && BFIN_MAC)) || ~BFIN_RX_DESC_NUM
(NETDEVICES && (NET_ETHERNET && (BFIN_MAC && EXPERIMENTAL))) || (BFIN_MAC_RMII => (NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (EXPERIMENTAL && BFIN527_EZKIT)))))
(NETDEVICES && (NET_ETHERNET && (BFIN_MAC && EXPERIMENTAL))) || ((NETDEVICES && (NET_ETHERNET && (BFIN_MAC && (EXPERIMENTAL && BFIN527_EZKIT)))) => BFIN_MAC_RMII)
(NETDEVICES && (NET_ETHERNET && (BF516 || (BF518 || (BF526 || (BF527 || (BF536 || BF537))))))) || ~BFIN_MAC
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_SMC && (ISA || (MAC && BROKEN))))) || ~SMC9194
(NETDEVICES && (NET_ETHERNET && (ARM || (REDWOOD_5 || (REDWOOD_6 || (M32R || (SUPERH || (MIPS || (BLACKFIN || MN10300))))))))) || ~SMC91X
(NETDEVICES && (NET_ETHERNET && ARCH_NETX)) || ~NET_NETX
(NETDEVICES && (NET_ETHERNET && (ARM && ARCH_DAVINCI))) || ~TI_DAVINCI_EMAC
(NETDEVICES && (NET_ETHERNET && DM9000)) || ~DM9000_DEBUGLEVEL
(NETDEVICES && (NET_ETHERNET && DM9000)) || ~DM9000_FORCE_SIMPLE_PHY_POLL
(NETDEVICES && (NET_ETHERNET && (ARM || (BLACKFIN || MIPS)))) || ~DM9000
(NETDEVICES && (NET_ETHERNET && ENC28J60)) || ~ENC28J60_WRITEVERIFY
(NETDEVICES && (EXPERIMENTAL && (SPI && NET_ETHERNET))) || ~ENC28J60
(NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA))) || ~ETHOC
(NETDEVICES && (NET_ETHERNET && (ARM || SUPERH))) || ~SMC911X
(NETDEVICES && (NET_ETHERNET && (ARM || (SUPERH || BLACKFIN)))) || ~SMSC911X
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_RACAL && (ISA && (EXPERIMENTAL && BROKEN_ON_SMP))))) || ~NI5010
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_RACAL && ISA))) || ~NI52
(NETDEVICES && (NET_ETHERNET && (NET_VENDOR_RACAL && (ISA && ISA_DMA_API)))) || ~NI65
(NETDEVICES && (NET_ETHERNET && ISA)) || ~NET_VENDOR_RACAL
(NETDEVICES && (NET_ETHERNET && HAS_IOMEM)) || ~DNET
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && DE2104X))) || ~DE2104X_DSL
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && (PCI && EXPERIMENTAL)))) || ~DE2104X
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && (TULIP && EXPERIMENTAL)))) || ~TULIP_MWI
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && TULIP))) || ~TULIP_MMIO
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && TULIP_NAPI))) || ~TULIP_NAPI_HW_MITIGATION
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && TULIP))) || ~TULIP_NAPI
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI))) || ~TULIP
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && (PCI || EISA)))) || ~DE4X5
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI))) || ~WINBOND_840
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI))) || ~DM9102
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && PCI))) || ~ULI526X
(NETDEVICES && (NET_ETHERNET && (NET_TULIP && CARDBUS))) || ~PCMCIA_XIRCOM
(NETDEVICES && (NET_ETHERNET && (PCI || (EISA || CARDBUS)))) || ~NET_TULIP
(NETDEVICES && (NET_ETHERNET && ((ISA || MCA_LEGACY) && EXPERIMENTAL))) || ~AT1700
(NETDEVICES && (NET_ETHERNET && (ISA || (EISA || MCA)))) || ~DEPCA
(NETDEVICES && (NET_ETHERNET && (ISA || (EISA || PCI)))) || ~HP100
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~E2100
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~EWRK3
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~EEXPRESS
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~EEXPRESS_PRO
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~HPLAN_PLUS
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~HPLAN
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~LP486E
(NETDEVICES && (NET_ETHERNET && NET_ISA)) || ~ETH16I
(NETDEVICES && (NET_ETHERNET && ISA)) || ~NET_ISA
(NETDEVICES && (NET_ETHERNET && (NET_ISA || (Q40 || (M32R || MACH_TX49XX))))) || ~NE2000
(NETDEVICES && (NET_ETHERNET && (NET_ISA && (EXPERIMENTAL && ISA_DMA_API)))) || ~ZNET
(NETDEVICES && (NET_ETHERNET && (NET_ISA && EXPERIMENTAL))) || ~SEEQ8005
(NETDEVICES && (NET_ETHERNET && MCA_LEGACY)) || ~NE2_MCA
(NETDEVICES && (NET_ETHERNET && MCA)) || ~IBMLANA
(NETDEVICES && (NET_ETHERNET && PPC_PSERIES)) || ~IBMVETH
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_RXB
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_TXB
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_POLL_WEIGHT
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_RX_COPY_THRESHOLD
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_RX_SKB_HEADROOM
(NETDEVICES && (NET_ETHERNET && IBM_NEW_EMAC)) || ~IBM_NEW_EMAC_DEBUG
(NETDEVICES && (NET_ETHERNET && PPC_DCR)) || ~IBM_NEW_EMAC
~IBM_NEW_EMAC_ZMII
~IBM_NEW_EMAC_RGMII
~IBM_NEW_EMAC_TAH
~IBM_NEW_EMAC_EMAC4
~IBM_NEW_EMAC_NO_FLOW_CTRL
~IBM_NEW_EMAC_MAL_CLR_ICINTSTAT
~IBM_NEW_EMAC_MAL_COMMON_ERR
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~PCNET32
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~AMD8111_ETH
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~ADAPTEC_STARFIRE
(NETDEVICES && (NET_ETHERNET && (NET_PCI && ((ISA || EISA) && EXPERIMENTAL)))) || ~AC3200
(NETDEVICES && (NET_ETHERNET && (NET_PCI && ISA))) || ~APRICOT
(NETDEVICES && (NET_ETHERNET && (ISA || (EISA || PCI)))) || ~NET_PCI
B44_PCI_AUTOSELECT => (NETDEVICES && (NET_ETHERNET && (B44 && SSB_PCIHOST_POSSIBLE)))
(NETDEVICES && (NET_ETHERNET && (B44 && SSB_PCIHOST_POSSIBLE))) => B44_PCI_AUTOSELECT
B44_PCICORE_AUTOSELECT => (NETDEVICES && (NET_ETHERNET && (B44 && SSB_DRIVER_PCICORE_POSSIBLE)))
(NETDEVICES && (NET_ETHERNET && (B44 && SSB_DRIVER_PCICORE_POSSIBLE))) => B44_PCICORE_AUTOSELECT
B44_PCI => (NETDEVICES && (NET_ETHERNET && (B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT)))
(NETDEVICES && (NET_ETHERNET && (B44_PCI_AUTOSELECT && B44_PCICORE_AUTOSELECT))) => B44_PCI
(NETDEVICES && (NET_ETHERNET && (SSB_POSSIBLE && HAS_DMA))) || ~B44
(NETDEVICES && (NET_ETHERNET && (FORCEDETH && EXPERIMENTAL))) || ~FORCEDETH_NAPI
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~FORCEDETH
CS89x0_NONISA_IRQ => (NETDEVICES && (NET_ETHERNET && (CS89x0 && (MACH_IXDP2351 || (ARCH_IXDP2X01 || (ARCH_PNX010X || MACH_MX31ADS))))))
(NETDEVICES && (NET_ETHERNET && (CS89x0 && (MACH_IXDP2351 || (ARCH_IXDP2X01 || (ARCH_PNX010X || MACH_MX31ADS)))))) => CS89x0_NONISA_IRQ
(NETDEVICES && (NET_ETHERNET && (ISA || (EISA || (MACH_IXDP2351 || (ARCH_IXDP2X01 || (ARCH_PNX010X || MACH_MX31ADS))))))) || ~CS89x0
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && MIPS)))) || ~TC35815
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~E100
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (EISA && EXPERIMENTAL)))) || ~LNE390
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~FEALNX
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~NATSEMI
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~NE2K_PCI
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (EISA && EXPERIMENTAL)))) || ~NE3210
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (EISA && EXPERIMENTAL)))) || ~ES3210
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && EXPERIMENTAL)))) || ~c8139CP
(NETDEVICES && (NET_ETHERNET && c8139TOO)) || (c8139TOO_PIO => (NETDEVICES && (NET_ETHERNET && c8139TOO)))
(NETDEVICES && (NET_ETHERNET && c8139TOO)) || ((NETDEVICES && (NET_ETHERNET && c8139TOO)) => c8139TOO_PIO)
(NETDEVICES && (NET_ETHERNET && c8139TOO)) || ~c8139TOO_TUNE_TWISTER
(NETDEVICES && (NET_ETHERNET && c8139TOO)) || ~c8139TOO_8129
(NETDEVICES && (NET_ETHERNET && c8139TOO)) || ~c8139_OLD_RX_RESET
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~c8139TOO
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~R6040
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~SIS900
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~EPIC100
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~SMSC9420
(NETDEVICES && (NET_ETHERNET && SUNDANCE)) || ~SUNDANCE_MMIO
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~SUNDANCE
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI || EISA)))) || ~TLAN
(NETDEVICES && (NET_ETHERNET && HAS_IOMEM)) || ~KS8842
(NETDEVICES && (NET_ETHERNET && SPI)) || ~KS8851
(NETDEVICES && (NET_ETHERNET && HAS_IOMEM)) || ~KS8851_MLL
(NETDEVICES && (NET_ETHERNET && VIA_RHINE)) || ~VIA_RHINE_MMIO
(NETDEVICES && (NET_ETHERNET && (NET_PCI && PCI))) || ~VIA_RHINE
(NETDEVICES && (NET_ETHERNET && (NET_PCI && (PCI && EXPERIMENTAL)))) || ~SC92031
(NETDEVICES && (NET_ETHERNET && (EXPERIMENTAL && AR7))) || ~CPMAC
(NETDEVICES && (NET_ETHERNET && (NET_POCKET && (PARPORT && X86)))) || ~ATP
(NETDEVICES && (NET_ETHERNET && (NET_POCKET && PARPORT))) || ~DE600
(NETDEVICES && (NET_ETHERNET && (NET_POCKET && PARPORT))) || ~DE620
(NETDEVICES && (NET_ETHERNET && PARPORT)) || ~NET_POCKET
(NETDEVICES && (NET_ETHERNET && SGI_HAS_SEEQ)) || ~SGISEEQ
(NETDEVICES && (NET_ETHERNET && MACH_DECSTATION)) || ~DECLANCE
(NETDEVICES && (NET_ETHERNET && M68360)) || ~c68360_ENET
(NETDEVICES && (NET_ETHERNET && FEC)) || ~FEC2
(NETDEVICES && (NET_ETHERNET && (M523x || (M527x || (M5272 || (M528x || (M520x || (M532x || (MACH_MX27 || (ARCH_MX35 || ARCH_MX25)))))))))) || ~FEC
(NETDEVICES && (NET_ETHERNET && FEC_MPC52xx)) || (FEC_MPC52xx_MDIO => (NETDEVICES && (NET_ETHERNET && FEC_MPC52xx)))
(NETDEVICES && (NET_ETHERNET && FEC_MPC52xx)) || ((NETDEVICES && (NET_ETHERNET && FEC_MPC52xx)) => FEC_MPC52xx_MDIO)
(NETDEVICES && (NET_ETHERNET && (PPC_MPC52xx && PPC_BESTCOMM))) || ~FEC_MPC52xx
(NETDEVICES && (NET_ETHERNET && H8300)) || ~NE_H8300
(NETDEVICES && (NET_ETHERNET && PCI)) || ~ATL2
(NETDEVICES && (NET_ETHERNET && (PPC32 || MICROBLAZE))) || ~XILINX_EMACLITE
(NETDEVICES && (NET_ETHERNET && BCM63XX)) || ~BCM63XX_ENET
(NETDEVICES && (NET_ETHERNET && (FS_ENET && (CPM1 || CPM2)))) || (FS_ENET_HAS_SCC => (NETDEVICES && (NET_ETHERNET && (FS_ENET && (CPM1 || CPM2)))))
(NETDEVICES && (NET_ETHERNET && (FS_ENET && (CPM1 || CPM2)))) || ((NETDEVICES && (NET_ETHERNET && (FS_ENET && (CPM1 || CPM2)))) => FS_ENET_HAS_SCC)
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))) || (FS_ENET_HAS_FCC => (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))))
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))) || ((NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))) => FS_ENET_HAS_FCC)
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))) || (FS_ENET_HAS_FEC => (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))))
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))) || ((NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))) => FS_ENET_HAS_FEC)
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))) || (FS_ENET_MDIO_FEC => (FS_ENET_HAS_FEC && (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1)))))
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1))) || ((FS_ENET_HAS_FEC && (NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM1)))) => FS_ENET_MDIO_FEC)
(NETDEVICES && (NET_ETHERNET && (FS_ENET && CPM2))) || ~FS_ENET_MDIO_FCC
(NETDEVICES && (NET_ETHERNET && (CPM1 || CPM2))) || ~FS_ENET
(NETDEVICES && ~UML) || ~NET_ETHERNET
(NETDEVICES && (NETDEV_1000 && ACENIC)) || ~ACENIC_OMIT_TIGON_I
(NETDEVICES && (NETDEV_1000 && PCI)) || ~ACENIC
(NETDEVICES && (NETDEV_1000 && PCI)) || ~DL2K
(NETDEVICES && (NETDEV_1000 && PCI)) || ~E1000
(NETDEVICES && (NETDEV_1000 && (PCI && (~SPARC32 || BROKEN)))) || ~E1000E
(NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))) || ~IP1000
(NETDEVICES && (NETDEV_1000 && (IGB && DCA))) || (IGB_DCA => (NETDEVICES && (NETDEV_1000 && (IGB && DCA))))
(NETDEVICES && (NETDEV_1000 && PCI)) || ~IGB
(NETDEVICES && (NETDEV_1000 && PCI)) || ~IGBVF
(NETDEVICES && (NETDEV_1000 && ARCH_ENP2611)) || ~ENP2611_MSF_NET
(NETDEVICES && (NETDEV_1000 && SBUS)) || ~MYRI_SBUS
(NETDEVICES && (NETDEV_1000 && PCI)) || ~NS83820
(NETDEVICES && (NETDEV_1000 && PCI)) || ~HAMACHI
(NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))) || ~YELLOWFIN
(NETDEVICES && (NETDEV_1000 && (R8169 && VLAN_8021Q))) || ~R8169_VLAN
(NETDEVICES && (NETDEV_1000 && PCI)) || ~R8169
(NETDEVICES && (NETDEV_1000 && SIBYTE_SB1xxx_SOC)) || ~SB1250_MAC
(NETDEVICES && (NETDEV_1000 && PCI)) || ~SIS190
(NETDEVICES && (NETDEV_1000 && (SKGE && DEBUG_FS))) || ~SKGE_DEBUG
(NETDEVICES && (NETDEV_1000 && PCI)) || ~SKGE
(NETDEVICES && (NETDEV_1000 && (SKY2 && DEBUG_FS))) || ~SKY2_DEBUG
(NETDEVICES && (NETDEV_1000 && PCI)) || ~SKY2
(NETDEVICES && (NETDEV_1000 && PCI)) || ~VIA_VELOCITY
(NETDEVICES && (NETDEV_1000 && PCI)) || ~TIGON3
(NETDEVICES && (NETDEV_1000 && PCI)) || (BNX2 => (CNIC && (NETDEVICES && (NETDEV_1000 && PCI))))
(NETDEVICES && (NETDEV_1000 && PCI)) || ((CNIC && (NETDEVICES && (NETDEV_1000 && PCI))) => BNX2)
(NETDEVICES && (NETDEV_1000 && PCI)) || (CNIC => (SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))))
(NETDEVICES && (NETDEV_1000 && PCI)) || ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) => CNIC)
(NETDEVICES && (NETDEV_1000 && (PCI && (PPC_IBM_CELL_BLADE || PPC_CELLEB)))) || ~SPIDER_NET
(NETDEVICES && (NETDEV_1000 && TSI108_BRIDGE)) || ~TSI108_ETH
(NETDEVICES && (NETDEV_1000 && GELIC_WIRELESS)) || ~GELIC_WIRELESS_OLD_PSK_INTERFACE
(NETDEVICES && (NETDEV_1000 && GELIC_NET)) || ~GELIC_WIRELESS
(NETDEVICES && (NETDEV_1000 && PPC_PS3)) || ~GELIC_NET
(NETDEVICES && (NETDEV_1000 && FSL_SOC)) || (FSL_PQ_MDIO => ((GIANFAR && (NETDEVICES && (NETDEV_1000 && FSL_SOC))) || (UCC_GETH && (NETDEVICES && (NETDEV_1000 && QUICC_ENGINE)))))
(NETDEVICES && (NETDEV_1000 && FSL_SOC)) || ((GIANFAR && (NETDEVICES && (NETDEV_1000 && FSL_SOC))) => FSL_PQ_MDIO)
(NETDEVICES && (NETDEV_1000 && FSL_SOC)) || ((UCC_GETH && (NETDEVICES && (NETDEV_1000 && QUICC_ENGINE))) => FSL_PQ_MDIO)
(NETDEVICES && (NETDEV_1000 && FSL_SOC)) || ~GIANFAR
(NETDEVICES && (NETDEV_1000 && UCC_GETH)) || ~UGETH_TX_ON_DEMAND
(NETDEVICES && (NETDEV_1000 && QUICC_ENGINE)) || ~UCC_GETH
(NETDEVICES && (NETDEV_1000 && (MV64X60 || (PPC32 || PLAT_ORION)))) || ~MV643XX_ETH
(NETDEVICES && (NETDEV_1000 && PPC_DCR_NATIVE)) || ~XILINX_LL_TEMAC
(NETDEVICES && (NETDEV_1000 && PCI)) || ~QLA3XXX
(NETDEVICES && (NETDEV_1000 && PCI)) || ~ATL1
(NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))) || ~ATL1E
(NETDEVICES && (NETDEV_1000 && (PCI && EXPERIMENTAL))) || ~ATL1C
(NETDEVICES && (NETDEV_1000 && PCI)) || ~JME
(NETDEVICES && (NETDEV_1000 && XTENSA_VARIANT_S6000)) || ~S6GMAC
(NETDEVICES && (NETDEV_1000 && STMMAC_ETH)) || ~STMMAC_DA
(NETDEVICES && (NETDEV_1000 && (EXPERIMENTAL && (STMMAC_ETH && ~STMMAC_TIMER)))) || ~STMMAC_DUAL_MAC
CPU_SH4 || ~STMMAC_TMU_TIMER
RTC_CLASS || ~STMMAC_RTC_TIMER
NETDEVICES && (NETDEV_1000 && (STMMAC_ETH && STMMAC_TIMER))
(NETDEVICES && (NETDEV_1000 && STMMAC_ETH)) || ~STMMAC_TIMER
(NETDEV_1000 && (NETDEVICES && CPU_SUBTYPE_ST40)) || ~STMMAC_ETH
(NETDEVICES && ~UML) || (NETDEV_1000 => ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) || (NETDEVICES && ~UML)))
(NETDEVICES && ~UML) || ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) => NETDEV_1000)
(NETDEVICES && ~UML) || ((NETDEVICES && ~UML) => NETDEV_1000)
MDIO => (((((CHELSIO_T3 && (NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS))) || (BNX2X && (NETDEVICES && (NETDEV_10000 && PCI)))) || (SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (CHELSIO_T1 && (NETDEVICES && (NETDEV_10000 && PCI)))) || (IXGBE && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))))
(CHELSIO_T3 && (NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS))) => MDIO
(BNX2X && (NETDEVICES && (NETDEV_10000 && PCI))) => MDIO
(SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => MDIO
(CHELSIO_T1 && (NETDEVICES && (NETDEV_10000 && PCI))) => MDIO
(IXGBE && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => MDIO
(NETDEVICES && (NETDEV_10000 && CHELSIO_T1)) || ~CHELSIO_T1_1G
(NETDEVICES && (NETDEV_10000 && PCI)) || ~CHELSIO_T1
CHELSIO_T3_DEPENDS => (NETDEVICES && (NETDEV_10000 && (PCI && INET)))
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) => CHELSIO_T3_DEPENDS
(NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS)) || (CHELSIO_T3 => (SCSI_CXGB3_ISCSI && (SCSI_LOWLEVEL && (SCSI && CHELSIO_T3_DEPENDS))))
(NETDEVICES && (NETDEV_10000 && CHELSIO_T3_DEPENDS)) || ((SCSI_CXGB3_ISCSI && (SCSI_LOWLEVEL && (SCSI && CHELSIO_T3_DEPENDS))) => CHELSIO_T3)
(NETDEVICES && (NETDEV_10000 && (IBMEBUS && (INET && SPARSEMEM)))) || ~EHEA
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~ENIC
(NETDEVICES && (NETDEV_10000 && (IXGBE && DCA))) || (IXGBE_DCA => (NETDEVICES && (NETDEV_10000 && (IXGBE && DCA))))
(NETDEVICES && (NETDEV_10000 && (IXGBE && DCB))) || ~IXGBE_DCB
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~IXGBE
(NETDEVICES && (NETDEV_10000 && PCI)) || ~IXGB
(NETDEVICES && (NETDEV_10000 && PCI)) || ~S2IO
(NETDEVICES && (NETDEV_10000 && VXGE)) || ~VXGE_DEBUG_TRACE_ALL
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~VXGE
(NETDEVICES && (NETDEV_10000 && (MYRI10GE && DCA))) || (MYRI10GE_DCA => (NETDEVICES && (NETDEV_10000 && (MYRI10GE && DCA))))
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~MYRI10GE
(NETDEVICES && (NETDEV_10000 && PCI)) || ~NETXEN_NIC
(NETDEVICES && (NETDEV_10000 && PCI)) || ~NIU
(NETDEVICES && (NETDEV_10000 && (PPC_PASEMI && PCI))) || ~PASEMI_MAC
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~MLX4_EN
MLX4_CORE => ((MLX4_INFINIBAND && INFINIBAND) || (MLX4_EN && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))))
(MLX4_INFINIBAND && INFINIBAND) => MLX4_CORE
(MLX4_EN && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => MLX4_CORE
(NETDEVICES && (NETDEV_10000 && (MLX4_CORE && EMBEDDED))) || (MLX4_DEBUG => (NETDEVICES && (NETDEV_10000 && MLX4_CORE)))
(NETDEVICES && (NETDEV_10000 && (MLX4_CORE && EMBEDDED))) || ((NETDEVICES && (NETDEV_10000 && MLX4_CORE)) => MLX4_DEBUG)
(NETDEVICES && (NETDEV_10000 && PCI)) || ~TEHUTI
(NETDEVICES && (NETDEV_10000 && PCI)) || ~BNX2X
(NETDEVICES && (NETDEV_10000 && PCI)) || ~QLGE
(NETDEVICES && (NETDEV_10000 && (SFC && MTD))) || (SFC_MTD => (NETDEVICES && (NETDEV_10000 && (SFC && MTD))))
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~SFC
(NETDEVICES && (NETDEV_10000 && (PCI && INET))) || ~BE2NET
(NETDEVICES && ~UML) || (NETDEV_10000 => (NETDEVICES && ~UML))
(NETDEVICES && ~UML) || ((NETDEVICES && ~UML) => NETDEV_10000)
(NETDEVICES && (TR && (ISA || MCA))) || ~IBMTR
(NETDEVICES && (TR && PCI)) || ~IBMOL
(NETDEVICES && (TR && (PCI && ~c64BIT))) || ~IBMLS
(NETDEVICES && (TR && PCI)) || ~c3C359
(NETDEVICES && (TR && (TMS380TR && PCI))) || ~TMSPCI
(NETDEVICES && (TR && (TMS380TR && ISA))) || ~SKISA
(NETDEVICES && (TR && (TMS380TR && ISA))) || ~PROTEON
(NETDEVICES && (TR && (TMS380TR && PCI))) || ~ABYSS
(NETDEVICES && (TR && (TMS380TR && MCA))) || ~MADGEMC
(NETDEVICES && (TR && (PCI || ((ISA && ISA_DMA_API) || MCA)))) || ~TMS380TR
(NETDEVICES && (TR && ((ISA || MCA_LEGACY) && (BROKEN || ~c64BIT)))) || ~SMCTR
(NETDEVICES && (~UML && (PCI || (ISA || (MCA || CCW))))) || ~TR
(NETDEVICES && (WLAN && (INET && WLAN_PRE80211))) || ~STRIP
(NETDEVICES && (WLAN && (ISA && (~c64BIT && WLAN_PRE80211)))) || ~ARLAN
(NETDEVICES && (WLAN && (ISA && WLAN_PRE80211))) || ~WAVELAN
(NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211))) || ~PCMCIA_WAVELAN
(NETDEVICES && (WLAN && (PCMCIA && WLAN_PRE80211))) || ~PCMCIA_NETWAVE
(WLAN && NETDEVICES) || ~WLAN_PRE80211
(NETDEVICES && (WLAN && (PCMCIA && WLAN_80211))) || ~PCMCIA_RAYCS
(NETDEVICES && (WLAN && (LIBERTAS && USB))) || ~LIBERTAS_USB
(NETDEVICES && (WLAN && (LIBERTAS && PCMCIA))) || ~LIBERTAS_CS
(NETDEVICES && (WLAN && (LIBERTAS && MMC))) || ~LIBERTAS_SDIO
(NETDEVICES && (WLAN && (LIBERTAS && SPI))) || ~LIBERTAS_SPI
(NETDEVICES && (WLAN && LIBERTAS)) || ~LIBERTAS_DEBUG
(NETDEVICES && (WLAN && WLAN_80211)) || ~LIBERTAS
(NETDEVICES && (WLAN && (LIBERTAS_THINFIRM && USB))) || ~LIBERTAS_THINFIRM_USB
(NETDEVICES && (WLAN && (WLAN_80211 && MAC80211))) || ~LIBERTAS_THINFIRM
(NETDEVICES && (WLAN && (ISA_DMA_API && (WLAN_80211 && (PCI || BROKEN))))) || ~AIRO
(NETDEVICES && (WLAN && (ATMEL && PCI))) || ~PCI_ATMEL
(NETDEVICES && (WLAN && (ATMEL && PCMCIA))) || ~PCMCIA_ATMEL
(NETDEVICES && (WLAN && ((PCI || PCMCIA) && WLAN_80211))) || ~ATMEL
(NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && USB)))) || ~AT76C50X_USB
(NETDEVICES && (WLAN && (PCMCIA && ((BROKEN || ~M32R) && WLAN_80211)))) || ~AIRO_CS
(NETDEVICES && (WLAN && (EXPERIMENTAL && (PCMCIA && WLAN_80211)))) || ~PCMCIA_WL3501
(NETDEVICES && (WLAN && (PCI && (EXPERIMENTAL && WLAN_80211)))) || ~PRISM54
(NETDEVICES && (WLAN && (USB && WLAN_80211))) || ~USB_ZD1201
(NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211))))) || ~USB_NET_RNDIS_WLAN
(NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL))))) || ~RTL8180
RTL8187_LEDS => (NETDEVICES && (WLAN && (RTL8187 && (MAC80211_LEDS && (LEDS_CLASS || LEDS_CLASS)))))
(NETDEVICES && (WLAN && (MAC80211 && (USB && WLAN_80211)))) || ~RTL8187
(NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL))))) || ~ADM8211
(NETDEVICES && (WLAN && (MAC80211 && WLAN_80211))) || ~MAC80211_HWSIM
(NETDEVICES && (WLAN && (MAC80211 && (PCI && (WLAN_80211 && EXPERIMENTAL))))) || ~MWL8K
(NETDEVICES && (WLAN && (P54_COMMON && USB))) || ~P54_USB
(NETDEVICES && (WLAN && (P54_COMMON && PCI))) || ~P54_PCI
(NETDEVICES && (WLAN && (P54_COMMON && (SPI_MASTER && GENERIC_HARDIRQS)))) || ~P54_SPI
P54_LEDS => (NETDEVICES && (WLAN && (P54_COMMON && (MAC80211_LEDS && (LEDS_CLASS || LEDS_CLASS)))))
(NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))) || ~P54_COMMON
(NETDEVICES && (WLAN && (ATH_COMMON && ATH5K))) || ~ATH5K_DEBUG
(NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211))))) || ~ATH5K
(NETDEVICES && (WLAN && (ATH_COMMON && ATH9K))) || ~ATH9K_DEBUG
(NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211))))) || ~ATH9K
AR9170_LEDS => (NETDEVICES && (WLAN && (ATH_COMMON && (AR9170_USB && (MAC80211_LEDS && (LEDS_CLASS || LEDS_CLASS))))))
(NETDEVICES && (WLAN && (ATH_COMMON && (USB && (MAC80211 && WLAN_80211))))) || ~AR9170_USB
(NETDEVICES && (WLAN && (WLAN_80211 && CFG80211))) || ~ATH_COMMON
(NETDEVICES && (WLAN && IPW2100)) || ~IPW2100_MONITOR
(NETDEVICES && (WLAN && IPW2100)) || ~IPW2100_DEBUG
(NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))) || ~IPW2100
(NETDEVICES && (WLAN && IPW2200_MONITOR)) || (IPW2200_RADIOTAP => (IPW2200_PROMISCUOUS && (NETDEVICES && (WLAN && IPW2200_MONITOR))))
(NETDEVICES && (WLAN && IPW2200_MONITOR)) || ((IPW2200_PROMISCUOUS && (NETDEVICES && (WLAN && IPW2200_MONITOR))) => IPW2200_RADIOTAP)
(NETDEVICES && (WLAN && IPW2200_MONITOR)) || ~IPW2200_PROMISCUOUS
(NETDEVICES && (WLAN && IPW2200)) || ~IPW2200_MONITOR
(NETDEVICES && (WLAN && (IPW2200 && EXPERIMENTAL))) || ~IPW2200_QOS
(NETDEVICES && (WLAN && IPW2200)) || ~IPW2200_DEBUG
(NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))) || ~IPW2200
LIBIPW => ((IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) || (IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))))
(IPW2200 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIBIPW
(IPW2100 && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => LIBIPW
(NETDEVICES && (WLAN && LIBIPW)) || ~LIBIPW_DEBUG
(NETDEVICES && (WLAN && IWLWIFI)) || (IWLWIFI_LEDS => (NETDEVICES && (WLAN && IWLWIFI)))
(NETDEVICES && (WLAN && IWLWIFI)) || ((NETDEVICES && (WLAN && IWLWIFI)) => IWLWIFI_LEDS)
(NETDEVICES && (WLAN && IWLWIFI)) || ~IWLWIFI_SPECTRUM_MEASUREMENT
(NETDEVICES && (WLAN && (IWLWIFI && (IWLWIFI_DEBUG && MAC80211_DEBUGFS)))) || ~IWLWIFI_DEBUGFS
(NETDEVICES && (WLAN && IWLWIFI)) || ~IWLWIFI_DEBUG
(NETDEVICES && (WLAN && IWLAGN)) || ~IWL4965
(NETDEVICES && (WLAN && IWLAGN)) || ~IWL5000
(NETDEVICES && (WLAN && IWLWIFI)) || ~IWLAGN
(NETDEVICES && (WLAN && IWL3945)) || ~IWL3945_SPECTRUM_MEASUREMENT
(NETDEVICES && (WLAN && IWLWIFI)) || ~IWL3945
(NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))) || ~IWLWIFI
(NETDEVICES && (WLAN && HOSTAP_FIRMWARE)) || ~HOSTAP_FIRMWARE_NVRAM
(NETDEVICES && (WLAN && HOSTAP)) || ~HOSTAP_FIRMWARE
(NETDEVICES && (WLAN && (PCI && HOSTAP))) || ~HOSTAP_PLX
(NETDEVICES && (WLAN && (PCI && HOSTAP))) || ~HOSTAP_PCI
(NETDEVICES && (WLAN && (PCMCIA && HOSTAP))) || ~HOSTAP_CS
(NETDEVICES && (WLAN && WLAN_80211)) || ~HOSTAP
B43_PCI_AUTOSELECT => (NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE)))
(NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE))) => B43_PCI_AUTOSELECT
B43_PCICORE_AUTOSELECT => (NETDEVICES && (WLAN && (B43 && SSB_DRIVER_PCICORE_POSSIBLE)))
(NETDEVICES && (WLAN && (B43 && SSB_DRIVER_PCICORE_POSSIBLE))) => B43_PCICORE_AUTOSELECT
(NETDEVICES && (WLAN && (B43 && SSB_PCMCIAHOST_POSSIBLE))) || ~B43_PCMCIA
(NETDEVICES && (WLAN && (B43 && (SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL)))) || ~B43_SDIO
B43_PIO => (NETDEVICES && (WLAN && (B43 && (B43_SDIO || (B43_PCMCIA || B43_FORCE_PIO)))))
(NETDEVICES && (WLAN && (B43 && (B43_SDIO || (B43_PCMCIA || B43_FORCE_PIO))))) => B43_PIO
(NETDEVICES && (WLAN && (B43 && (EXPERIMENTAL && BROKEN)))) || ~B43_NPHY
(NETDEVICES && (WLAN && (B43 && EXPERIMENTAL))) || (B43_PHY_LP => (NETDEVICES && (WLAN && (B43 && EXPERIMENTAL))))
(NETDEVICES && (WLAN && (B43 && EXPERIMENTAL))) || ((NETDEVICES && (WLAN && (B43 && EXPERIMENTAL))) => B43_PHY_LP)
B43_LEDS => (NETDEVICES && (WLAN && (B43 && (MAC80211_LEDS && (LEDS_CLASS || LEDS_CLASS)))))
B43_HWRNG => (NETDEVICES && (WLAN && (B43 && (HW_RANDOM || HW_RANDOM))))
(NETDEVICES && (WLAN && (B43 && B43_DEBUG))) || ~B43_FORCE_PIO
(NETDEVICES && (WLAN && B43)) || ~B43_DEBUG
(NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))) || ~B43
B43LEGACY_PCI_AUTOSELECT => (NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE)))
(NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE))) => B43LEGACY_PCI_AUTOSELECT
B43LEGACY_PCICORE_AUTOSELECT => (NETDEVICES && (WLAN && (B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE)))
(NETDEVICES && (WLAN && (B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE))) => B43LEGACY_PCICORE_AUTOSELECT
B43LEGACY_LEDS => (NETDEVICES && (WLAN && (B43LEGACY && (MAC80211_LEDS && (LEDS_CLASS || LEDS_CLASS)))))
B43LEGACY_HWRNG => (NETDEVICES && (WLAN && (B43LEGACY && (HW_RANDOM || HW_RANDOM))))
(NETDEVICES && (WLAN && B43LEGACY)) || (B43LEGACY_DEBUG => (NETDEVICES && (WLAN && B43LEGACY)))
(NETDEVICES && (WLAN && B43LEGACY)) || ((NETDEVICES && (WLAN && B43LEGACY)) => B43LEGACY_DEBUG)
B43LEGACY_DMA => (B43LEGACY_DMA_MODE || B43LEGACY_DMA_AND_PIO_MODE)
B43LEGACY_DMA_MODE => B43LEGACY_DMA
B43LEGACY_DMA_AND_PIO_MODE => B43LEGACY_DMA
B43LEGACY_PIO => (B43LEGACY_PIO_MODE || B43LEGACY_DMA_AND_PIO_MODE)
B43LEGACY_PIO_MODE => B43LEGACY_PIO
B43LEGACY_DMA_AND_PIO_MODE => B43LEGACY_PIO
NETDEVICES && (WLAN && B43LEGACY)
(NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))) || ~B43LEGACY
(NETDEVICES && (WLAN && ZD1211RW)) || ~ZD1211RW_DEBUG
(NETDEVICES && (WLAN && (USB && (MAC80211 && (WLAN_80211 && EXPERIMENTAL))))) || ~ZD1211RW
(NETDEVICES && (WLAN && (RT2X00 && PCI))) || ~RT2400PCI
(NETDEVICES && (WLAN && (RT2X00 && PCI))) || ~RT2500PCI
(NETDEVICES && (WLAN && (RT2X00 && PCI))) || ~RT61PCI
(NETDEVICES && (WLAN && (RT2X00 && USB))) || ~RT2500USB
(NETDEVICES && (WLAN && (RT2X00 && USB))) || ~RT73USB
(NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL)))) || ~RT2800USB
RT2X00_LIB_PCI => (((RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) || (RT2500PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI))))) || (RT2400PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))))
(RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => RT2X00_LIB_PCI
(RT2500PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => RT2X00_LIB_PCI
(RT2400PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => RT2X00_LIB_PCI
RT2X00_LIB_USB => (((RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL))))) || (RT2500USB && (NETDEVICES && (WLAN && (RT2X00 && USB))))) || (RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))))
(RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL))))) => RT2X00_LIB_USB
(RT2500USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))) => RT2X00_LIB_USB
(RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))) => RT2X00_LIB_USB
RT2X00_LIB => ((RT2X00_LIB_PCI && (NETDEVICES && (WLAN && RT2X00))) || (RT2X00_LIB_USB && (NETDEVICES && (WLAN && RT2X00))))
(RT2X00_LIB_PCI && (NETDEVICES && (WLAN && RT2X00))) => RT2X00_LIB
(RT2X00_LIB_USB && (NETDEVICES && (WLAN && RT2X00))) => RT2X00_LIB
RT2X00_LIB_HT => (RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL)))))
(RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL))))) => RT2X00_LIB_HT
RT2X00_LIB_FIRMWARE => (((RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) || (RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL)))))) || (RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))))
(RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => RT2X00_LIB_FIRMWARE
(RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL))))) => RT2X00_LIB_FIRMWARE
(RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))) => RT2X00_LIB_FIRMWARE
RT2X00_LIB_CRYPTO => ((((RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) || (RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL)))))) || (RT2500USB && (NETDEVICES && (WLAN && (RT2X00 && USB))))) || (RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))))
(RT61PCI && (NETDEVICES && (WLAN && (RT2X00 && PCI)))) => RT2X00_LIB_CRYPTO
(RT2800USB && (NETDEVICES && (WLAN && (RT2X00 && (USB && EXPERIMENTAL))))) => RT2X00_LIB_CRYPTO
(RT2500USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))) => RT2X00_LIB_CRYPTO
(RT73USB && (NETDEVICES && (WLAN && (RT2X00 && USB)))) => RT2X00_LIB_CRYPTO
RT2X00_LIB_LEDS => (NETDEVICES && (WLAN && (RT2X00 && ((RT2X00_LIB && LEDS_CLASS) || (RT2X00_LIB && LEDS_CLASS)))))
(NETDEVICES && (WLAN && (RT2X00 && (RT2X00_LIB && MAC80211_DEBUGFS)))) || ~RT2X00_LIB_DEBUGFS
(NETDEVICES && (WLAN && (RT2X00 && RT2X00_LIB))) || ~RT2X00_DEBUG
(NETDEVICES && (WLAN && (MAC80211 && WLAN_80211))) || ~RT2X00
(NETDEVICES && (WLAN && HERMES)) || (HERMES_CACHE_FW_ON_INIT => (NETDEVICES && (WLAN && HERMES)))
(NETDEVICES && (WLAN && HERMES)) || ((NETDEVICES && (WLAN && HERMES)) => HERMES_CACHE_FW_ON_INIT)
(NETDEVICES && (WLAN && (PPC_PMAC && HERMES))) || ~APPLE_AIRPORT
(NETDEVICES && (WLAN && (PCI && HERMES))) || ~PLX_HERMES
(NETDEVICES && (WLAN && (PCI && HERMES))) || ~TMD_HERMES
(NETDEVICES && (WLAN && (PCI && HERMES))) || ~NORTEL_HERMES
(NETDEVICES && (WLAN && (PCI && HERMES))) || ~PCI_HERMES
(NETDEVICES && (WLAN && (PCMCIA && HERMES))) || ~PCMCIA_HERMES
(NETDEVICES && (WLAN && (PCMCIA && HERMES))) || ~PCMCIA_SPECTRUM
(NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211)))) || ~HERMES
(NETDEVICES && (WLAN && (WL1251 && SPI_MASTER))) || ~WL1251_SPI
(NETDEVICES && (WLAN && (WL1251 && MMC))) || ~WL1251_SDIO
(NETDEVICES && (WLAN && (WL12XX && GENERIC_HARDIRQS))) || ~WL1251
(NETDEVICES && (WLAN && (WL12XX && (SPI_MASTER && GENERIC_HARDIRQS)))) || ~WL1271
(NETDEVICES && (WLAN && (MAC80211 && (WLAN_80211 && EXPERIMENTAL)))) || ~WL12XX
(NETDEVICES && (WLAN && (IWM && DEBUG_FS))) || ~IWM_DEBUG
(NETDEVICES && (WLAN && (MMC && (WLAN_80211 && (EXPERIMENTAL && CFG80211))))) || ~IWM
(WLAN && NETDEVICES) || ~WLAN_80211
(NETDEVICES && ~S390) || (WLAN => (NETDEVICES && ~S390))
(NETDEVICES && ~S390) || ((NETDEVICES && ~S390) => WLAN)
WIMAX_I2400M => ((WIMAX_I2400M_USB && (NETDEVICES && (WIMAX && USB))) || (WIMAX_I2400M_SDIO && (NETDEVICES && (WIMAX && MMC))))
(WIMAX_I2400M_USB && (NETDEVICES && (WIMAX && USB))) => WIMAX_I2400M
(WIMAX_I2400M_SDIO && (NETDEVICES && (WIMAX && MMC))) => WIMAX_I2400M
(NETDEVICES && (WIMAX && USB)) || ~WIMAX_I2400M_USB
(NETDEVICES && (WIMAX && MMC)) || ~WIMAX_I2400M_SDIO
(NETDEVICES && (WIMAX && WIMAX_I2400M)) || ~WIMAX_I2400M_DEBUG_LEVEL
(NETDEVICES && (USB && (NET && EXPERIMENTAL))) || ~USB_CATC
(NETDEVICES && (USB && NET)) || ~USB_KAWETH
(NETDEVICES && (USB && NET)) || ~USB_PEGASUS
(NETDEVICES && (USB && (NET && EXPERIMENTAL))) || ~USB_RTL8150
(NETDEVICES && (USB && (NET && USB_USBNET))) || (USB_NET_AX8817X => (NETDEVICES && (USB && (NET && USB_USBNET))))
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((NETDEVICES && (USB && (NET && USB_USBNET))) => USB_NET_AX8817X)
(NETDEVICES && (USB && (NET && USB_USBNET))) || (USB_NET_CDCETHER => ((((USB_NET_ZAURUS && (NETDEVICES && (USB && (NET && USB_USBNET)))) || (USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211))))))) || (USB_NET_RNDIS_HOST && (NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL)))))) || (NETDEVICES && (USB && (NET && USB_USBNET)))))
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((USB_NET_ZAURUS && (NETDEVICES && (USB && (NET && USB_USBNET)))) => USB_NET_CDCETHER)
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))) => USB_NET_CDCETHER)
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((USB_NET_RNDIS_HOST && (NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL))))) => USB_NET_CDCETHER)
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((NETDEVICES && (USB && (NET && USB_USBNET))) => USB_NET_CDCETHER)
(NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL)))) || ~USB_NET_CDC_EEM
(NETDEVICES && (USB && (NET && USB_USBNET))) || ~USB_NET_DM9601
(NETDEVICES && (USB && (NET && USB_USBNET))) || ~USB_NET_SMSC95XX
(NETDEVICES && (USB && (NET && USB_USBNET))) || ~USB_NET_GL620A
(NETDEVICES && (USB && (NET && USB_USBNET))) || (USB_NET_NET1080 => (NETDEVICES && (USB && (NET && USB_USBNET))))
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((NETDEVICES && (USB && (NET && USB_USBNET))) => USB_NET_NET1080)
(NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL)))) || ~USB_NET_PLUSB
(NETDEVICES && (USB && (NET && USB_USBNET))) || ~USB_NET_MCS7830
(NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL)))) || (USB_NET_RNDIS_HOST => (USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))))
(NETDEVICES && (USB && (NET && (USB_USBNET && EXPERIMENTAL)))) || ((USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))) => USB_NET_RNDIS_HOST)
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || ~USB_ALI_M5632
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || ~USB_AN2720
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || (USB_BELKIN => (NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))))
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || ((NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) => USB_BELKIN)
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || (USB_ARMLINUX => (NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))))
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || ((NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) => USB_ARMLINUX)
(NETDEVICES && (USB && (NET && USB_NET_CDC_SUBSET))) || ~USB_EPSON2888
(NETDEVICES && (USB && (NET && (USB_NET_CDC_SUBSET && EXPERIMENTAL)))) || ~USB_KC2190
(NETDEVICES && (USB && (NET && USB_USBNET))) || (USB_NET_CDC_SUBSET => (NETDEVICES && (USB && (NET && USB_USBNET))))
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((NETDEVICES && (USB && (NET && USB_USBNET))) => USB_NET_CDC_SUBSET)
(NETDEVICES && (USB && (NET && USB_USBNET))) || (USB_NET_ZAURUS => (NETDEVICES && (USB && (NET && USB_USBNET))))
(NETDEVICES && (USB && (NET && USB_USBNET))) || ((NETDEVICES && (USB && (NET && USB_USBNET))) => USB_NET_ZAURUS)
(NETDEVICES && (USB && NET)) || (USB_USBNET => (USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))))
(NETDEVICES && (USB && NET)) || ((USB_NET_RNDIS_WLAN && (NETDEVICES && (WLAN && (USB && (WLAN_80211 && (EXPERIMENTAL && CFG80211)))))) => USB_USBNET)
(NETDEVICES && (NET && (USB && RFKILL))) || ~USB_HSO
(NETDEVICES && (USB && (NET && USB_USBNET))) || ~USB_NET_INT51X1
(NETDEVICES && (USB && (NET && PHONET))) || ~USB_CDC_PHONET
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_3C589
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_3C574
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_FMVJ18X
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_PCNET
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_NMCLAN
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_SMC91C92
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_XIRC2PS
(NETDEVICES && (NET_PCMCIA && PCMCIA)) || ~PCMCIA_AXNET
(NETDEVICES && (NET_PCMCIA && (PCMCIA && ARCNET_COM20020))) || ~ARCNET_COM20020_CS
(NETDEVICES && (NET_PCMCIA && (PCMCIA && TR))) || ~PCMCIA_IBMTR
(NETDEVICES && PCMCIA) || ~NET_PCMCIA
(NETDEVICES && (WAN && (ISA && (ISA_DMA_API && (INET && HDLC))))) || ~HOSTESS_SV11
(NETDEVICES && (WAN && (ISA && (ISA_DMA_API && HDLC)))) || ~COSA
(NETDEVICES && (WAN && (PCI && (VIRT_TO_BUS && HDLC)))) || ~LANMEDIA
(NETDEVICES && (WAN && (ISA && (ISA_DMA_API && (INET && HDLC))))) || ~SEALEVEL_4021
(NETDEVICES && (WAN && HDLC)) || ~HDLC_RAW
(NETDEVICES && (WAN && HDLC)) || ~HDLC_RAW_ETH
(NETDEVICES && (WAN && HDLC)) || ~HDLC_CISCO
(NETDEVICES && (WAN && HDLC)) || ~HDLC_FR
(NETDEVICES && (WAN && HDLC)) || ~HDLC_PPP
(NETDEVICES && (WAN && (HDLC && ((LAPB && HDLC) || LAPB)))) || ~HDLC_X25
(NETDEVICES && (WAN && (HDLC && PCI))) || ~PCI200SYN
(NETDEVICES && (WAN && (WANXL && ~PREVENT_FIRMWARE_BUILD))) || ~WANXL_BUILD_FIRMWARE
(NETDEVICES && (WAN && (HDLC && PCI))) || ~WANXL
(NETDEVICES && (WAN && (PC300 && (PPP_MULTILINK && (PPP_SYNC_TTY && HDLC_PPP))))) || ~PC300_MLPPP
(NETDEVICES && (WAN && (HDLC && (PCI && BROKEN)))) || ~PC300
(NETDEVICES && (WAN && (HDLC && PCI))) || ~PC300TOO
(NETDEVICES && (WAN && (HDLC && ISA))) || ~N2
(NETDEVICES && (WAN && (HDLC && ISA))) || ~C101
(NETDEVICES && (WAN && (HDLC && PCI))) || ~FARSYNC
(NETDEVICES && (WAN && DSCC4)) || ~DSCC4_PCISYNC
(NETDEVICES && (WAN && DSCC4)) || ~DSCC4_PCI_RST
(NETDEVICES && (WAN && (HDLC && PCI))) || ~DSCC4
(NETDEVICES && (WAN && (HDLC && (ARM && (ARCH_IXP4XX && (IXP4XX_NPE && IXP4XX_QMGR)))))) || ~IXP4XX_HSS
(NETDEVICES && WAN) || ~HDLC
(NETDEVICES && (WAN && DLCI)) || ~DLCI_MAX
(NETDEVICES && (WAN && (DLCI && ISA))) || ~SDLA
(NETDEVICES && WAN) || ~DLCI
(NETDEVICES && (WAN && CYCLADES_SYNC)) || ~CYCLOMX_X25
(NETDEVICES && (WAN && (WAN_ROUTER_DRIVERS && (PCI || ISA)))) || ~CYCLADES_SYNC
(NETDEVICES && (WAN && WAN_ROUTER)) || ~WAN_ROUTER_DRIVERS
(NETDEVICES && (WAN && (LAPB && X25))) || ~LAPBETHER
(NETDEVICES && (WAN && (LAPB && X25))) || ~X25_ASY
(NETDEVICES && (WAN && SBNI)) || ~SBNI_MULTILINE
(NETDEVICES && (WAN && X86)) || ~SBNI
NETDEVICES || ~WAN
(ATM_DRIVERS && (NETDEVICES && ATM)) || ~ATM_DUMMY
(ATM_DRIVERS && (NETDEVICES && (ATM && INET))) || ~ATM_TCP
(ATM_DRIVERS && (NETDEVICES && (PCI && ATM))) || ~ATM_LANAI
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI))) || ~ATM_ENI_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_TX_16W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_TX_8W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_TX_4W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_TX_2W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_RX_16W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_RX_8W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_RX_4W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI_TUNE_BURST))) || ~ATM_ENI_BURST_RX_2W
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ENI))) || ~ATM_ENI_TUNE_BURST
(ATM_DRIVERS && (NETDEVICES && (ATM && PCI))) || ~ATM_ENI
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS)))) || ~ATM_FIRESTREAM
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_ZATM))) || ~ATM_ZATM_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS)))) || ~ATM_ZATM
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_NICSTAR))) || ~ATM_NICSTAR_USE_SUNI
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_NICSTAR))) || ~ATM_NICSTAR_USE_IDT77105
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && (~c64BIT && VIRT_TO_BUS))))) || ~ATM_NICSTAR
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_IDT77252))) || ~ATM_IDT77252_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_IDT77252))) || ~ATM_IDT77252_RCV_ALL
ATM_IDT77252_USE_SUNI => (ATM_DRIVERS && (NETDEVICES && (ATM && ATM_IDT77252)))
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_IDT77252))) => ATM_IDT77252_USE_SUNI
(ATM_DRIVERS && (NETDEVICES && (ATM && PCI))) || ~ATM_IDT77252
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_AMBASSADOR))) || ~ATM_AMBASSADOR_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS)))) || ~ATM_AMBASSADOR
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_HORIZON))) || ~ATM_HORIZON_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS)))) || ~ATM_HORIZON
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_IA))) || ~ATM_IA_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && PCI))) || ~ATM_IA
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_FORE200E))) || ~ATM_FORE200E_USE_TASKLET
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_FORE200E))) || ~ATM_FORE200E_TX_RETRY
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_FORE200E))) || ~ATM_FORE200E_DEBUG
(ATM_DRIVERS && (NETDEVICES && (ATM && (PCI || SBUS)))) || ~ATM_FORE200E
(ATM_DRIVERS && (NETDEVICES && (ATM && ATM_HE))) || ~ATM_HE_USE_SUNI
(ATM_DRIVERS && (NETDEVICES && (ATM && PCI))) || ~ATM_HE
(ATM_DRIVERS && (NETDEVICES && (ATM && PCI))) || ~ATM_SOLOS
(NETDEVICES && ATM) || (ATM_DRIVERS => (NETDEVICES && ATM))
(NETDEVICES && ATM) || ((NETDEVICES && ATM) => ATM_DRIVERS)
(NETDEVICES && IEEE802154_DRIVERS) || ~IEEE802154_FAKEHARD
(NETDEVICES && IEEE802154) || (IEEE802154_DRIVERS => (NETDEVICES && IEEE802154))
(NETDEVICES && IEEE802154) || ((NETDEVICES && IEEE802154) => IEEE802154_DRIVERS)
(S390 && (CCW && (NETDEVICES && (NET_ETHERNET || (TR || FDDI))))) || ~LCS
(S390 && (CCW && NETDEVICES)) || ~CTCM
(S390 && (IUCV && NETDEVICES)) || ~NETIUCV
(NETDEVICES && (S390 && IUCV)) || ~SMSGIUCV
(S390 && (CCW && NETDEVICES)) || ~CLAW
(NETDEVICES && (S390 && QETH)) || ~QETH_L2
(NETDEVICES && (S390 && QETH)) || ~QETH_L3
(S390 && (CCW && (NETDEVICES && (IP_MULTICAST && QDIO)))) || ~QETH
QETH_IPV6 => (NETDEVICES && (S390 && (QETH_L3 || (QETH_L3 && IPV6))))
CCWGROUP => ((NETDEVICES && S390) && (LCS || (CTCM || QETH)))
((NETDEVICES && S390) && (LCS || (CTCM || QETH))) => CCWGROUP
(NETDEVICES && XEN) || (XEN_NETDEV_FRONTEND => (NETDEVICES && XEN))
(NETDEVICES && XEN) || ((NETDEVICES && XEN) => XEN_NETDEV_FRONTEND)
(NETDEVICES && PPC_ISERIES) || ~ISERIES_VETH
(NETDEVICES && RIONET) || ~RIONET_TX_SIZE
(NETDEVICES && RIONET) || ~RIONET_RX_SIZE
(NETDEVICES && RAPIDIO) || ~RIONET
(NETDEVICES && (DEFXX && (PCI || EISA))) || (DEFXX_MMIO => (NETDEVICES && DEFXX))
(NETDEVICES && (DEFXX && (PCI || EISA))) || ((NETDEVICES && DEFXX) => DEFXX_MMIO)
(NETDEVICES && (FDDI && (PCI || (EISA || TC)))) || ~DEFXX
(NETDEVICES && (FDDI && PCI)) || ~SKFP
(NETDEVICES && (PCI || (EISA || TC))) || ~FDDI
(NETDEVICES && ROADRUNNER) || ~ROADRUNNER_LARGE_RINGS
(NETDEVICES && (HIPPI && PCI)) || ~ROADRUNNER
(NETDEVICES && (EXPERIMENTAL && (INET && PCI))) || ~HIPPI
(NETDEVICES && PARPORT) || ~PLIP
(NETDEVICES && (PPP && EXPERIMENTAL)) || ~PPP_MULTILINK
(NETDEVICES && PPP) || ~PPP_FILTER
(NETDEVICES && PPP) || ~PPP_ASYNC
(NETDEVICES && PPP) || ~PPP_SYNC_TTY
(NETDEVICES && PPP) || ~PPP_DEFLATE
(NETDEVICES && PPP) || ~PPP_BSDCOMP
(NETDEVICES && (PPP && EXPERIMENTAL)) || ~PPP_MPPE
(NETDEVICES && (EXPERIMENTAL && PPP)) || ~PPPOE
(NETDEVICES && (ATM && PPP)) || ~PPPOATM
(NETDEVICES && (EXPERIMENTAL && (PPP && INET))) || ~PPPOL2TP
NETDEVICES || (PPP => (IPWIRELESS && (HOTPLUG && (PCMCIA && NETDEVICES))))
NETDEVICES || ((IPWIRELESS && (HOTPLUG && (PCMCIA && NETDEVICES))) => PPP)
(NETDEVICES && SLIP) || ~SLIP_COMPRESSED
NETDEVICES || ~SLIP
SLHC => (((SLIP_COMPRESSED && (NETDEVICES && SLIP)) || (PPP && NETDEVICES)) || (ISDN_PPP && (ISDN && (ISDN_I4L && INET))))
(SLIP_COMPRESSED && (NETDEVICES && SLIP)) => SLHC
(PPP && NETDEVICES) => SLHC
(ISDN_PPP && (ISDN && (ISDN_I4L && INET))) => SLHC
(NETDEVICES && SLIP) || ~SLIP_SMART
(NETDEVICES && SLIP) || ~SLIP_MODE_SLIP6
(NETDEVICES && (SCSI && PCI)) || ~NET_FC
(NETDEVICES && (NETCONSOLE && (SYSFS && EXPERIMENTAL))) || ~NETCONSOLE_DYNAMIC
(NETDEVICES && EXPERIMENTAL) || ~NETCONSOLE
NETPOLL => (NETDEVICES && NETCONSOLE)
(NETDEVICES && NETCONSOLE) => NETPOLL
(NETDEVICES && NETPOLL) || ~NETPOLL_TRAP
NET_POLL_CONTROLLER => (NETDEVICES && NETPOLL)
(NETDEVICES && NETPOLL) => NET_POLL_CONTROLLER
(NETDEVICES && (EXPERIMENTAL && VIRTIO)) || ~VIRTIO_NET
(NETDEVICES && (PCI && (X86 && INET))) || ~VMXNET3
NET || (NETDEVICES => ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) || (NET && UML)))
NET || ((SCSI_BNX2_ISCSI && (SCSI_LOWLEVEL && (SCSI && PCI))) => NETDEVICES)
NET || ((NET && UML) => NETDEVICES)
ISDN || (ISDN_I4L => (MISDN_NETJET && (ISDN && (MISDN && PCI))))
ISDN || ((MISDN_NETJET && (ISDN && (MISDN && PCI))) => ISDN_I4L)
(ISDN && MISDN) || ~MISDN_DSP
(ISDN && MISDN) || ~MISDN_L1OIP
(ISDN && (MISDN && PCI)) || ~MISDN_HFCPCI
(ISDN && (MISDN && (MISDN_HFCMULTI && c8xx))) || (MISDN_HFCMULTI_8xx => ((ISDN && (MISDN && (MISDN_HFCMULTI && c8xx))) && c8xx))
(ISDN && (MISDN && (MISDN_HFCMULTI && c8xx))) || (((ISDN && (MISDN && (MISDN_HFCMULTI && c8xx))) && c8xx) => MISDN_HFCMULTI_8xx)
(ISDN && ((PCI || c8xx) && MISDN)) || ~MISDN_HFCMULTI
(ISDN && (MISDN && USB)) || ~MISDN_HFCUSB
(ISDN && (MISDN && PCI)) || ~MISDN_AVMFRITZ
(ISDN && (MISDN && PCI)) || ~MISDN_SPEEDFAX
(ISDN && (MISDN && PCI)) || ~MISDN_INFINEON
(ISDN && (MISDN && PCI)) || ~MISDN_W6692
(ISDN && (MISDN && PCI)) || ~MISDN_NETJET
MISDN_IPAC => ((((MISDN_INFINEON && (ISDN && (MISDN && PCI))) || (MISDN_SPEEDFAX && (ISDN && (MISDN && PCI)))) || (MISDN_AVMFRITZ && (ISDN && (MISDN && PCI)))) || (MISDN_NETJET && (ISDN && (MISDN && PCI))))
(MISDN_INFINEON && (ISDN && (MISDN && PCI))) => MISDN_IPAC
(MISDN_SPEEDFAX && (ISDN && (MISDN && PCI))) => MISDN_IPAC
(MISDN_AVMFRITZ && (ISDN && (MISDN && PCI))) => MISDN_IPAC
(MISDN_NETJET && (ISDN && (MISDN && PCI))) => MISDN_IPAC
MISDN_ISAR => (MISDN_SPEEDFAX && (ISDN && (MISDN && PCI)))
(MISDN_SPEEDFAX && (ISDN && (MISDN && PCI))) => MISDN_ISAR
ISDN || ~MISDN
(ISDN && (ISDN_I4L && ISDN_PPP)) || ~ISDN_PPP_VJ
(ISDN && (ISDN_I4L && ISDN_PPP)) || ~ISDN_MPP
(ISDN && (ISDN_I4L && ISDN_PPP)) || ~IPPP_FILTER
(ISDN && (ISDN_I4L && ISDN_PPP)) || ~ISDN_PPP_BSDCOMP
(ISDN && (ISDN_I4L && INET)) || ~ISDN_PPP
(ISDN && (ISDN_I4L && ISDN_AUDIO)) || ~ISDN_TTY_FAX
(ISDN && ISDN_I4L) || ~ISDN_AUDIO
(ISDN && (ISDN_I4L && X25)) || ~ISDN_X25
(ISDN && (ISDN_I4L && BROKEN_ON_SMP)) || ~ISDN_DRV_LOOP
(ISDN && ISDN_I4L) || ~ISDN_DIVERSION
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_EURO))) || ~DE_AOC
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_EURO))) || ~HISAX_NO_SENDCOMPLETE
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_EURO))) || ~HISAX_NO_LLC
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_EURO))) || ~HISAX_NO_KEYPAD
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_EURO
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_1TR6
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_NI1
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_MAX_CARDS
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_16_0
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_16_3
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && (PCI_LEGACY && (BROKEN || (~SPARC && (~PPC && (~PARISC && (~M68K && ((~MIPS || CPU_LITTLE_ENDIAN) && ~FRV))))))))))) || ~HISAX_TELESPCI
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_S0BOX
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_AVM_A1
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (BROKEN || ~PPC64)))) || ~HISAX_FRITZPCI
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || (HISAX_AVM_A1_PCMCIA => (ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_AVM_A1_CS))))
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ((ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && HISAX_AVM_A1_CS))) => HISAX_AVM_A1_PCMCIA)
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_ELSA
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_IX1MICROR2
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_DIEHLDIVA
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_ASUSCOM
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_TELEINT
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_HFCS
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_SEDLBAUER
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_SPORTSTER
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_MIC
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && (PCI_LEGACY && (BROKEN || (~SPARC && (~PPC && (~PARISC && (~M68K && ((~MIPS || CPU_LITTLE_ENDIAN) && ~FRV))))))))))) || ~HISAX_NETJET
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && (PCI_LEGACY && (BROKEN || (~SPARC && (~PPC && (~PARISC && (~M68K && ((~MIPS || CPU_LITTLE_ENDIAN) && ~FRV))))))))))) || ~HISAX_NETJET_U
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_NICCY
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_ISURF
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && ISA))) || ~HISAX_HSTSAPHIR
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && PCI_LEGACY)))) || ~HISAX_BKM_A4T
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && PCI_LEGACY)))) || ~HISAX_SCT_QUADRO
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_GAZEL
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && (PCI_LEGACY && (BROKEN || (~SPARC && (~PPC && (~PARISC && (~M68K && ((~MIPS || CPU_LITTLE_ENDIAN) && ~FRV))))))))))) || ~HISAX_HFC_PCI
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && PCI_LEGACY)))) || ~HISAX_W6692
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_HFC_SX
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (HISAX_NETJET && (PCI && (PCI_LEGACY && (BROKEN || (~SPARC && (~PPC && (~PARISC && (~M68K && ((~MIPS || CPU_LITTLE_ENDIAN) && ~FRV)))))))))))) || ~HISAX_ENTERNOW_PCI
(ISDN && (ISDN_I4L && ISDN_DRV_HISAX)) || ~HISAX_DEBUG
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCMCIA && HISAX_SEDLBAUER)))) || ~HISAX_SEDLBAUER_CS
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCMCIA && HISAX_ELSA)))) || ~HISAX_ELSA_CS
(ISDN && (ISDN_I4L && (PCMCIA && ISDN_DRV_HISAX))) || ~HISAX_AVM_A1_CS
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCMCIA && HISAX_16_3)))) || ~HISAX_TELES_CS
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL)))) || ~HISAX_ST5481
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL)))) || ~HISAX_HFCUSB
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && EXPERIMENTAL))) || ~HISAX_HFC4S8S
(ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (PCI && (PCI_LEGACY && EXPERIMENTAL))))) || ~HISAX_FRITZ_PCIPNP
(ISDN && ISDN_I4L) || ~ISDN_DRV_HISAX
(ISDN && (ISDN_I4L && ISA)) || ~ISDN_DRV_ICN
(ISDN && (ISDN_I4L && (ISA && (BROKEN || X86)))) || ~ISDN_DRV_PCBIT
(ISDN && (ISDN_I4L && ISA)) || ~ISDN_DRV_SC
(ISDN && (ISDN_I4L && ISA)) || ~ISDN_DRV_ACT2000
(ISDN && (ISDN_I4L && (HYSDN && ISDN_CAPI))) || ~HYSDN_CAPI
(ISDN && (ISDN_I4L && (PROC_FS && PCI))) || ~HYSDN
ISDN_HDLC => ((HISAX_ST5481 && (ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL))))) || (MISDN_NETJET && (ISDN && (MISDN && PCI))))
(HISAX_ST5481 && (ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL))))) => ISDN_HDLC
(MISDN_NETJET && (ISDN && (MISDN && PCI))) => ISDN_HDLC
(ISDN && ISDN_CAPI) || (ISDN_DRV_AVMB1_VERBOSE_REASON => (ISDN && ISDN_CAPI))
(ISDN && ISDN_CAPI) || ((ISDN && ISDN_CAPI) => ISDN_DRV_AVMB1_VERBOSE_REASON)
(ISDN && ISDN_CAPI) || (CAPI_TRACE => (ISDN && ISDN_CAPI))
(ISDN && ISDN_CAPI) || ((ISDN && ISDN_CAPI) => CAPI_TRACE)
(ISDN && (ISDN_CAPI && EXPERIMENTAL)) || ~ISDN_CAPI_MIDDLEWARE
ISDN_CAPI_CAPIFS => ((ISDN && (ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL)) && ISDN_CAPI_CAPI20)
((ISDN && (ISDN_CAPI && ISDN_CAPI_CAPIFS_BOOL)) && ISDN_CAPI_CAPI20) => ISDN_CAPI_CAPIFS
(ISDN && (ISDN_CAPI && (ISDN_CAPI_MIDDLEWARE && ISDN_CAPI_CAPI20))) || ~ISDN_CAPI_CAPIFS_BOOL
(ISDN && ISDN_CAPI) || ~ISDN_CAPI_CAPI20
(ISDN && (ISDN_CAPI && ISDN_I4L)) || ~ISDN_CAPI_CAPIDRV
(ISDN && (ISDN_CAPI && (CAPI_AVM && ISA))) || ~ISDN_DRV_AVMB1_B1ISA
(ISDN && (ISDN_CAPI && (CAPI_AVM && ISDN_DRV_AVMB1_B1PCI))) || ~ISDN_DRV_AVMB1_B1PCIV4
(ISDN && (ISDN_CAPI && (CAPI_AVM && PCI))) || ~ISDN_DRV_AVMB1_B1PCI
(ISDN && (ISDN_CAPI && (CAPI_AVM && ISA))) || ~ISDN_DRV_AVMB1_T1ISA
(ISDN && (ISDN_CAPI && (CAPI_AVM && (ISDN_DRV_AVMB1_B1PCMCIA && PCMCIA)))) || ~ISDN_DRV_AVMB1_AVM_CS
(ISDN && (ISDN_CAPI && CAPI_AVM)) || ~ISDN_DRV_AVMB1_B1PCMCIA
(ISDN && (ISDN_CAPI && (CAPI_AVM && PCI))) || ~ISDN_DRV_AVMB1_T1PCI
(ISDN && (ISDN_CAPI && (CAPI_AVM && PCI))) || ~ISDN_DRV_AVMB1_C4
(ISDN && ISDN_CAPI) || ~CAPI_AVM
(ISDN && (ISDN_CAPI && (CAPI_EICON && ISDN_DIVAS))) || ~ISDN_DIVAS_BRIPCI
(ISDN && (ISDN_CAPI && (CAPI_EICON && ISDN_DIVAS))) || ~ISDN_DIVAS_PRIPCI
(ISDN && (ISDN_CAPI && (CAPI_EICON && ISDN_DIVAS))) || ~ISDN_DIVAS_DIVACAPI
(ISDN && (ISDN_CAPI && (CAPI_EICON && ISDN_DIVAS))) || ~ISDN_DIVAS_USERIDI
(ISDN && (ISDN_CAPI && (CAPI_EICON && ISDN_DIVAS))) || ~ISDN_DIVAS_MAINT
(ISDN && (ISDN_CAPI && (CAPI_EICON && (PROC_FS && PCI)))) || ~ISDN_DIVAS
(ISDN && ISDN_CAPI) || ~CAPI_EICON
ISDN || ~ISDN_CAPI
(ISDN && (ISDN_DRV_GIGASET && USB)) || ~GIGASET_BASE
(ISDN && (ISDN_DRV_GIGASET && USB)) || ~GIGASET_M105
(ISDN && ISDN_DRV_GIGASET) || ~GIGASET_M101
(ISDN && ISDN_DRV_GIGASET) || ~GIGASET_DEBUG
(ISDN && ISDN_I4L) || ~ISDN_DRV_GIGASET
(NET && ~S390) || ~ISDN
(PHONE && (PHONE_IXJ && PCMCIA)) || ~PHONE_IXJ_PCMCIA
(PHONE && (ISA || PCI)) || ~PHONE_IXJ
HAS_IOMEM || ~PHONE
(~S390 && INPUT) || (INPUT_FF_MEMLESS => (((((((((THRUSTMASTER_FF && (HID_SUPPORT && (HID && HID_THRUSTMASTER))) || (SMARTJOYPLUS_FF && (HID_SUPPORT && (HID && HID_SMARTJOYPLUS)))) || (GREENASIA_FF && (HID_SUPPORT && (HID && HID_GREENASIA)))) || (JOYSTICK_XPAD_FF && (~S390 && (INPUT_JOYSTICK && (JOYSTICK_XPAD && INPUT))))) || (ZEROPLUS_FF && (HID_SUPPORT && (HID && HID_ZEROPLUS)))) || (DRAGONRISE_FF && (HID_SUPPORT && (HID && HID_DRAGONRISE)))) || (LOGIRUMBLEPAD2_FF && (HID_SUPPORT && (HID && HID_LOGITECH)))) || (LOGITECH_FF && (HID_SUPPORT && (HID && HID_LOGITECH)))) || (PANTHERLORD_FF && (HID_SUPPORT && (HID && HID_PANTHERLORD)))))
(~S390 && INPUT) || ((THRUSTMASTER_FF && (HID_SUPPORT && (HID && HID_THRUSTMASTER))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((SMARTJOYPLUS_FF && (HID_SUPPORT && (HID && HID_SMARTJOYPLUS))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((GREENASIA_FF && (HID_SUPPORT && (HID && HID_GREENASIA))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((JOYSTICK_XPAD_FF && (~S390 && (INPUT_JOYSTICK && (JOYSTICK_XPAD && INPUT)))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((ZEROPLUS_FF && (HID_SUPPORT && (HID && HID_ZEROPLUS))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((DRAGONRISE_FF && (HID_SUPPORT && (HID && HID_DRAGONRISE))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((LOGIRUMBLEPAD2_FF && (HID_SUPPORT && (HID && HID_LOGITECH))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((LOGITECH_FF && (HID_SUPPORT && (HID && HID_LOGITECH))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || ((PANTHERLORD_FF && (HID_SUPPORT && (HID && HID_PANTHERLORD))) => INPUT_FF_MEMLESS)
(~S390 && INPUT) || (INPUT_POLLDEV => ((((((((((((((INPUT_SGI_BTNS && (~S390 && (INPUT && (INPUT_MISC && (SGI_IP22 || SGI_IP32))))) || (MOUSE_GPIO && (~S390 && (INPUT && (INPUT_MOUSE && GENERIC_GPIO))))) || (SENSORS_AMS && (HWMON && (PPC_PMAC && (~PPC64 && (INPUT && (((ADB_PMU && I2C) || ((ADB_PMU && ~I2C) || I2C)) && EXPERIMENTAL))))))) || (INPUT_RB532_BUTTON && (~S390 && (INPUT && (INPUT_MISC && (MIKROTIK_RB532 && (GPIOLIB && GENERIC_GPIO))))))) || (INPUT_APANEL && (~S390 && (INPUT && (INPUT_MISC && (X86 && (I2C && LEDS_CLASS))))))) || (SENSORS_APPLESMC && (HWMON && (INPUT && X86)))) || (SENSORS_LIS3_SPI && (HWMON && (~ACPI && (SPI_MASTER && INPUT))))) || (INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64)))))) || (SENSORS_HDAPS && (HWMON && (INPUT && X86)))) || (SENSORS_LIS3LV02D && (HWMON && (ACPI && INPUT)))) || (KEYBOARD_HP6XX && (~S390 && (INPUT && (INPUT_KEYBOARD && SH_HP6XX))))) || (KEYBOARD_AAED2000 && (~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000))))) || (ACPI_TOSHIBA && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || (INPUT_COBALT_BTNS && (~S390 && (INPUT && (INPUT_MISC && MIPS_COBALT))))))
(~S390 && INPUT) || ((INPUT_SGI_BTNS && (~S390 && (INPUT && (INPUT_MISC && (SGI_IP22 || SGI_IP32))))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((MOUSE_GPIO && (~S390 && (INPUT && (INPUT_MOUSE && GENERIC_GPIO)))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((INPUT_RB532_BUTTON && (~S390 && (INPUT && (INPUT_MISC && (MIKROTIK_RB532 && (GPIOLIB && GENERIC_GPIO)))))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((INPUT_APANEL && (~S390 && (INPUT && (INPUT_MISC && (X86 && (I2C && LEDS_CLASS)))))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((SENSORS_APPLESMC && (HWMON && (INPUT && X86))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((SENSORS_LIS3_SPI && (HWMON && (~ACPI && (SPI_MASTER && INPUT)))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64))))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((SENSORS_HDAPS && (HWMON && (INPUT && X86))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((SENSORS_LIS3LV02D && (HWMON && (ACPI && INPUT))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((KEYBOARD_HP6XX && (~S390 && (INPUT && (INPUT_KEYBOARD && SH_HP6XX)))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((KEYBOARD_AAED2000 && (~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000)))) => INPUT_POLLDEV)
(~S390 && INPUT) || ((INPUT_COBALT_BTNS && (~S390 && (INPUT && (INPUT_MISC && MIPS_COBALT)))) => INPUT_POLLDEV)
(~S390 && (INPUT && INPUT_MOUSEDEV)) || (INPUT_MOUSEDEV_PSAUX => (~S390 && (INPUT && INPUT_MOUSEDEV)))
(~S390 && (INPUT && INPUT_MOUSEDEV)) || ((~S390 && (INPUT && INPUT_MOUSEDEV)) => INPUT_MOUSEDEV_PSAUX)
(~S390 && (INPUT && INPUT_MOUSEDEV)) || ~INPUT_MOUSEDEV_SCREEN_X
(~S390 && (INPUT && INPUT_MOUSEDEV)) || ~INPUT_MOUSEDEV_SCREEN_Y
(~S390 && (INPUT && EMBEDDED)) || (INPUT_MOUSEDEV => (~S390 && INPUT))
(~S390 && (INPUT && EMBEDDED)) || ((~S390 && INPUT) => INPUT_MOUSEDEV)
(~S390 && INPUT) || ~INPUT_JOYDEV
(~S390 && INPUT) || ~INPUT_EVDEV
(~S390 && INPUT) || ~INPUT_EVBUG
(~S390 && (INPUT && (APM_EMULATION && EMBEDDED))) || ~INPUT_APMPOWER
(~S390 && (INPUT && XEN_FBDEV_FRONTEND)) || (XEN_KBDDEV_FRONTEND => (~S390 && (INPUT && XEN_FBDEV_FRONTEND)))
(~S390 && (INPUT && XEN_FBDEV_FRONTEND)) || ((~S390 && (INPUT && XEN_FBDEV_FRONTEND)) => XEN_KBDDEV_FRONTEND)
(~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000))) || (KEYBOARD_AAED2000 => (~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000))))
(~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && MACH_AAED2000))) => KEYBOARD_AAED2000)
(~S390 && (INPUT && (INPUT_KEYBOARD && I2C))) || ~KEYBOARD_ADP5588
(~S390 && (INPUT && (INPUT_KEYBOARD && AMIGA))) || ~KEYBOARD_AMIGA
ATARI_KBD_CORE => ((KEYBOARD_ATARI && (~S390 && (INPUT && (INPUT_KEYBOARD && ATARI)))) || (MOUSE_ATARI && (~S390 && (INPUT && (INPUT_MOUSE && ATARI)))))
(KEYBOARD_ATARI && (~S390 && (INPUT && (INPUT_KEYBOARD && ATARI)))) => ATARI_KBD_CORE
(MOUSE_ATARI && (~S390 && (INPUT && (INPUT_MOUSE && ATARI)))) => ATARI_KBD_CORE
(~S390 && (INPUT && (INPUT_KEYBOARD && ATARI))) || ~KEYBOARD_ATARI
(~S390 && (INPUT && (INPUT_KEYBOARD && KEYBOARD_ATKBD_HP_KEYCODES))) || ~KEYBOARD_ATKBD_RDI_KEYCODES
(~S390 && (INPUT && (INPUT_KEYBOARD && (PARISC && KEYBOARD_ATKBD)))) || (KEYBOARD_ATKBD_HP_KEYCODES => (~S390 && (INPUT && (INPUT_KEYBOARD && (PARISC && KEYBOARD_ATKBD)))))
(~S390 && (INPUT && (INPUT_KEYBOARD && (PARISC && KEYBOARD_ATKBD)))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && (PARISC && KEYBOARD_ATKBD)))) => KEYBOARD_ATKBD_HP_KEYCODES)
(~S390 && (INPUT && (INPUT_KEYBOARD && (EMBEDDED || ~X86)))) || (KEYBOARD_ATKBD => (~S390 && (INPUT && INPUT_KEYBOARD)))
(~S390 && (INPUT && (INPUT_KEYBOARD && (EMBEDDED || ~X86)))) || ((~S390 && (INPUT && INPUT_KEYBOARD)) => KEYBOARD_ATKBD)
(~S390 && (INPUT && (INPUT_KEYBOARD && (I2C && EXPERIMENTAL)))) || ~QT2160
(~S390 && (INPUT && (INPUT_KEYBOARD && (BF54x && ~BF544)))) || ~KEYBOARD_BFIN
(~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) || (KEYBOARD_CORGI => (~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))))
(~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) => KEYBOARD_CORGI)
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_LKKBD
(~S390 && (INPUT && (INPUT_KEYBOARD && ARCH_EP93XX))) || ~KEYBOARD_EP93XX
(~S390 && (INPUT && (INPUT_KEYBOARD && GENERIC_GPIO))) || ~KEYBOARD_GPIO
(~S390 && (INPUT && (INPUT_KEYBOARD && GENERIC_GPIO))) || ~KEYBOARD_MATRIX
(~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) || (KEYBOARD_HIL_OLD => (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))))
(~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) => KEYBOARD_HIL_OLD)
(~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) || (KEYBOARD_HIL => (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))))
(~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))) => KEYBOARD_HIL)
(~S390 && (INPUT && (INPUT_KEYBOARD && SH_HP6XX))) || ~KEYBOARD_HP6XX
(~S390 && (INPUT && (INPUT_KEYBOARD && (SA1100_JORNADA720_SSP && SA1100_SSP)))) || ~KEYBOARD_HP7XX
(~S390 && (INPUT && (INPUT_KEYBOARD && (I2C && LEDS_CLASS)))) || ~KEYBOARD_LM8323
(~S390 && (INPUT && (INPUT_KEYBOARD && SHARP_LOCOMO))) || ~KEYBOARD_LOCOMO
(~S390 && (INPUT && (INPUT_KEYBOARD && (SH_DREAMCAST && MAPLE)))) || ~KEYBOARD_MAPLE
(~S390 && (INPUT && (INPUT_KEYBOARD && I2C))) || ~KEYBOARD_MAX7359
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_NEWTON
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_OPENCORES
(~S390 && (INPUT && (INPUT_KEYBOARD && (PXA27x || PXA3xx)))) || ~KEYBOARD_PXA27x
(~S390 && (INPUT && (INPUT_KEYBOARD && (CPU_PXA930 || CPU_PXA935)))) || ~KEYBOARD_PXA930_ROTARY
(~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) || (KEYBOARD_SPITZ => (~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))))
(~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && PXA_SHARPSL))) => KEYBOARD_SPITZ)
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_STOWAWAY
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_SUNKBD
(~S390 && (INPUT && (INPUT_KEYBOARD && SUPERH))) || ~KEYBOARD_SH_KEYSC
(~S390 && (INPUT && (INPUT_KEYBOARD && (ARCH_OMAP1 || ARCH_OMAP2)))) || ~KEYBOARD_OMAP
(~S390 && (INPUT && (INPUT_KEYBOARD && TWL4030_CORE))) || ~KEYBOARD_TWL4030
(~S390 && (INPUT && (INPUT_KEYBOARD && KEYBOARD_TOSA))) || ~KEYBOARD_TOSA_USE_EXT_KEYCODES
(~S390 && (INPUT && (INPUT_KEYBOARD && MACH_TOSA))) || (KEYBOARD_TOSA => (~S390 && (INPUT && (INPUT_KEYBOARD && MACH_TOSA))))
(~S390 && (INPUT && (INPUT_KEYBOARD && MACH_TOSA))) || ((~S390 && (INPUT && (INPUT_KEYBOARD && MACH_TOSA))) => KEYBOARD_TOSA)
(~S390 && (INPUT && INPUT_KEYBOARD)) || ~KEYBOARD_XTKBD
(~S390 && (INPUT && (INPUT_KEYBOARD && ARCH_W90X900))) || ~KEYBOARD_W90P910
(~S390 && (INPUT && (EMBEDDED || ~X86))) || (INPUT_KEYBOARD => (~S390 && INPUT))
(~S390 && (INPUT && (EMBEDDED || ~X86))) || ((~S390 && INPUT) => INPUT_KEYBOARD)
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || (MOUSE_PS2_ALPS => (~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))))
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) => MOUSE_PS2_ALPS)
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || (MOUSE_PS2_LOGIPS2PP => (~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))))
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) => MOUSE_PS2_LOGIPS2PP)
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || (MOUSE_PS2_SYNAPTICS => (~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))))
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) => MOUSE_PS2_SYNAPTICS)
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && (X86 && EMBEDDED))))) || (MOUSE_PS2_LIFEBOOK => (~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && X86)))))
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && (X86 && EMBEDDED))))) || ((~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && X86)))) => MOUSE_PS2_LIFEBOOK)
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || (MOUSE_PS2_TRACKPOINT => (~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))))
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) => MOUSE_PS2_TRACKPOINT)
(~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) || ~MOUSE_PS2_ELANTECH
(~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) || ~MOUSE_PS2_SENTELIC
(~S390 && (INPUT && (INPUT_MOUSE && MOUSE_PS2))) || ~MOUSE_PS2_TOUCHKIT
(~S390 && (INPUT && (INPUT_MOUSE && (MOUSE_PS2 && OLPC)))) || ~MOUSE_PS2_OLPC
(~S390 && (INPUT && INPUT_MOUSE)) || (MOUSE_PS2 => (~S390 && (INPUT && INPUT_MOUSE)))
(~S390 && (INPUT && INPUT_MOUSE)) || ((~S390 && (INPUT && INPUT_MOUSE)) => MOUSE_PS2)
(~S390 && (INPUT && INPUT_MOUSE)) || ~MOUSE_SERIAL
(~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD))) || ~MOUSE_APPLETOUCH
(~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD))) || ~MOUSE_BCM5974
(~S390 && (INPUT && (INPUT_MOUSE && MOUSE_INPORT))) || ~MOUSE_ATIXL
(~S390 && (INPUT && (INPUT_MOUSE && ISA))) || ~MOUSE_INPORT
(~S390 && (INPUT && (INPUT_MOUSE && ISA))) || ~MOUSE_LOGIBM
(~S390 && (INPUT && (INPUT_MOUSE && ISA))) || ~MOUSE_PC110PAD
(~S390 && (INPUT && (INPUT_MOUSE && AMIGA))) || ~MOUSE_AMIGA
(~S390 && (INPUT && (INPUT_MOUSE && ATARI))) || ~MOUSE_ATARI
(~S390 && (INPUT && (INPUT_MOUSE && ARCH_ACORN))) || ~MOUSE_RISCPC
(~S390 && (INPUT && INPUT_MOUSE)) || ~MOUSE_VSXXXAA
(~S390 && (INPUT && (INPUT_MOUSE && GENERIC_GPIO))) || ~MOUSE_GPIO
(~S390 && (INPUT && (INPUT_MOUSE && (CPU_PXA930 || CPU_PXA935)))) || ~MOUSE_PXA930_TRKBALL
(~S390 && (INPUT && (INPUT_MOUSE && MAPLE))) || ~MOUSE_MAPLE
(~S390 && (INPUT && (INPUT_MOUSE && I2C))) || ~MOUSE_SYNAPTICS_I2C
(~S390 && INPUT) || (INPUT_MOUSE => (~S390 && INPUT))
(~S390 && INPUT) || ((~S390 && INPUT) => INPUT_MOUSE)
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_ANALOG
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_A3D
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_ADI
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_COBRA
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_GF2K
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_GRIP
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_GRIP_MP
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_GUILLEMOT
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_INTERACT
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_SIDEWINDER
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_TMDC
(~S390 && (INPUT && (INPUT_JOYSTICK && (JOYSTICK_IFORCE && ((JOYSTICK_IFORCE || USB) && USB))))) || ~JOYSTICK_IFORCE_USB
(~S390 && (INPUT && (INPUT_JOYSTICK && (JOYSTICK_IFORCE && ((JOYSTICK_IFORCE || SERIO) && SERIO))))) || ~JOYSTICK_IFORCE_232
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_IFORCE
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_WARRIOR
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_MAGELLAN
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_SPACEORB
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_SPACEBALL
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_STINGER
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_TWIDJOY
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_ZHENHUA
(~S390 && (INPUT && (INPUT_JOYSTICK && PARPORT))) || ~JOYSTICK_DB9
(~S390 && (INPUT && (INPUT_JOYSTICK && PARPORT))) || ~JOYSTICK_GAMECON
(~S390 && (INPUT && (INPUT_JOYSTICK && PARPORT))) || ~JOYSTICK_TURBOGRAFX
(~S390 && (INPUT && (INPUT_JOYSTICK && AMIGA))) || ~JOYSTICK_AMIGA
(~S390 && (INPUT && INPUT_JOYSTICK)) || ~JOYSTICK_JOYDUMP
(~S390 && (INPUT_JOYSTICK && (JOYSTICK_XPAD && INPUT))) || ~JOYSTICK_XPAD_FF
(~S390 && (INPUT && (INPUT_JOYSTICK && (JOYSTICK_XPAD && (LEDS_CLASS || LEDS_CLASS))))) || ~JOYSTICK_XPAD_LEDS
(~S390 && (INPUT && (INPUT_JOYSTICK && USB_ARCH_HAS_HCD))) || ~JOYSTICK_XPAD
(~S390 && (INPUT && (INPUT_JOYSTICK && (HIGH_RES_TIMERS && PARPORT)))) || ~JOYSTICK_WALKERA0701
(~S390 && (INPUT && (INPUT_JOYSTICK && MAPLE))) || ~JOYSTICK_MAPLE
(~S390 && INPUT) || ~INPUT_JOYSTICK
(~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))) || ~TABLET_USB_ACECAD
(~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))) || ~TABLET_USB_AIPTEK
(~S390 && (INPUT_TABLET && (USB && INPUT))) || ~TABLET_USB_GTCO
(~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))) || ~TABLET_USB_KBTAB
(~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))) || ~TABLET_USB_WACOM
(~S390 && INPUT) || ~INPUT_TABLET
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (SPI_MASTER && (~HWMON || HWMON))))) || ~TOUCHSCREEN_ADS7846
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && SPI_MASTER))) || ~TOUCHSCREEN_AD7877
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C))) || ~TOUCHSCREEN_AD7879_I2C
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (SPI_MASTER && ~TOUCHSCREEN_AD7879_I2C)))) || ~TOUCHSCREEN_AD7879_SPI
TOUCHSCREEN_AD7879 => ((TOUCHSCREEN_AD7879_I2C && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C)))) || (TOUCHSCREEN_AD7879_SPI && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && (SPI_MASTER && ~TOUCHSCREEN_AD7879_I2C))))))
(TOUCHSCREEN_AD7879_I2C && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C)))) => TOUCHSCREEN_AD7879
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && SA1100_BITSY))) || ~TOUCHSCREEN_BITSY
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && PXA_SHARPSL))) || (TOUCHSCREEN_CORGI => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && PXA_SHARPSL))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && PXA_SHARPSL))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && PXA_SHARPSL))) => TOUCHSCREEN_CORGI)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && PMIC_DA903X))) || (TOUCHSCREEN_DA9034 => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && PMIC_DA903X))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && PMIC_DA903X))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && PMIC_DA903X))) => TOUCHSCREEN_DA9034)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C))) || ~TOUCHSCREEN_EETI
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_FUJITSU
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_GUNZE
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_ELO
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_WACOM_W8001
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C))) || ~TOUCHSCREEN_MCS5000
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_MTOUCH
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_INEXIO
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_MK712
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (SH_HP6XX && SH_ADC)))) || ~TOUCHSCREEN_HP600
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && SA1100_JORNADA720_SSP))) || ~TOUCHSCREEN_HP7XX
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && ISA))) || ~TOUCHSCREEN_HTCPEN
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_PENMOUNT
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (SH_MIGOR && I2C)))) || ~TOUCHSCREEN_MIGOR
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_TOUCHRIGHT
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_TOUCHWIN
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && ARCH_AT91SAM9RL))) || ~TOUCHSCREEN_ATMEL_TSADCC
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (AC97_BUS && UCB1400_CORE)))) || ~TOUCHSCREEN_UCB1400
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || (TOUCHSCREEN_WM9705 => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) => TOUCHSCREEN_WM9705)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || (TOUCHSCREEN_WM9712 => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) => TOUCHSCREEN_WM9712)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || (TOUCHSCREEN_WM9713 => ((TOUCHSCREEN_WM97XX_ZYLONITE && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_WM97XX && MACH_ZYLONITE))))) || (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX)))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || ((TOUCHSCREEN_WM97XX_ZYLONITE && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_WM97XX && MACH_ZYLONITE))))) => TOUCHSCREEN_WM9713)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_WM97XX))) => TOUCHSCREEN_WM9713)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_WM97XX && (AVR32 || ARCH_AT91))))) || ~TOUCHSCREEN_WM97XX_ATMEL
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_WM97XX && ARCH_PXA)))) || ~TOUCHSCREEN_WM97XX_MAINSTONE
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_WM97XX && MACH_ZYLONITE)))) || ~TOUCHSCREEN_WM97XX_ZYLONITE
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && AC97_BUS))) || ~TOUCHSCREEN_WM97XX
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_EGALAX => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_EGALAX)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_PANJIT => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_PANJIT)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_3M => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_3M)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_ITM => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_ITM)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_ETURBO => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_ETURBO)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_GUNZE => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_GUNZE)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_DMC_TSC10 => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_DMC_TSC10)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_IRTOUCH => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_IRTOUCH)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_IDEALTEK => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_IDEALTEK)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_GENERAL_TOUCH => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_GENERAL_TOUCH)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_GOTOP => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_GOTOP)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || (TOUCHSCREEN_USB_JASTEC => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && (TOUCHSCREEN_USB_COMPOSITE && EMBEDDED)))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_JASTEC)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) || (TOUCHSCREEN_USB_E2I => (~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))))
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) || ((~S390 && (INPUT && (INPUT_TOUCHSCREEN && TOUCHSCREEN_USB_COMPOSITE))) => TOUCHSCREEN_USB_E2I)
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD))) || ~TOUCHSCREEN_USB_COMPOSITE
(~S390 && (INPUT && INPUT_TOUCHSCREEN)) || ~TOUCHSCREEN_TOUCHIT213
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && I2C))) || ~TOUCHSCREEN_TSC2007
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && HAVE_CLK))) || ~TOUCHSCREEN_W90X900
(~S390 && (INPUT && (INPUT_TOUCHSCREEN && EZX_PCAP))) || ~TOUCHSCREEN_PCAP
(~S390 && INPUT) || ~INPUT_TOUCHSCREEN
(~S390 && (INPUT && (INPUT_MISC && PCSPKR_PLATFORM))) || ~INPUT_PCSPKR
(~S390 && (INPUT && (INPUT_MISC && (PCI && SPARC64)))) || ~INPUT_SPARCSPKR
(~S390 && (INPUT && (INPUT_MISC && M68K))) || ~INPUT_M68K_BEEP
(~S390 && (INPUT && (INPUT_MISC && (X86 && (I2C && LEDS_CLASS))))) || ~INPUT_APANEL
(~S390 && (INPUT && (INPUT_MISC && ARCH_IXP4XX))) || ~INPUT_IXP4XX_BEEPER
(~S390 && (INPUT && (INPUT_MISC && MIPS_COBALT))) || ~INPUT_COBALT_BTNS
(~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64)))) || ~INPUT_WISTRON_BTNS
(~S390 && (INPUT && (INPUT_MISC && (X86 && ACPI)))) || ~INPUT_ATLAS_BTNS
(~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))) || ~INPUT_ATI_REMOTE
(~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))) || ~INPUT_ATI_REMOTE2
(~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))) || ~INPUT_KEYSPAN_REMOTE
(~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))) || ~INPUT_POWERMATE
(~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))) || ~INPUT_YEALINK
(~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))) || ~INPUT_CM109
(~S390 && (INPUT && (INPUT_MISC && TWL4030_CORE))) || ~INPUT_TWL4030_PWRBUTTON
(~S390 && (INPUT && INPUT_MISC)) || ~INPUT_UINPUT
(~S390 && (INPUT && (INPUT_MISC && (SGI_IP22 || SGI_IP32)))) || ~INPUT_SGI_BTNS
(~S390 && (INPUT && (INPUT_MISC && (X86 && PNP)))) || ~INPUT_WINBOND_CIR
(~S390 && (INPUT && (INPUT_MISC && ((GSC || HP300) && SERIO)))) || ~HP_SDC_RTC
(~S390 && (INPUT && (INPUT_MISC && MFD_PCF50633))) || ~INPUT_PCF50633_PMU
(~S390 && (INPUT && (INPUT_MISC && (GPIOLIB && GENERIC_GPIO)))) || ~INPUT_GPIO_ROTARY_ENCODER
(~S390 && (INPUT && (INPUT_MISC && (MIKROTIK_RB532 && (GPIOLIB && GENERIC_GPIO))))) || ~INPUT_RB532_BUTTON
(~S390 && (INPUT && (INPUT_MISC && MFD_DM355EVM_MSP))) || ~INPUT_DM355EVM
(~S390 && (INPUT && (INPUT_MISC && (BF54x || BF52x)))) || ~INPUT_BFIN_ROTARY
(~S390 && (INPUT && (INPUT_MISC && MFD_WM831X))) || ~INPUT_WM831X_ON
(~S390 && (INPUT && (INPUT_MISC && EZX_PCAP))) || ~INPUT_PCAP
(~S390 && INPUT) || ~INPUT_MISC
(~S390 && EMBEDDED) || (INPUT => ((((MAC_EMUMOUSEBTN && MACINTOSH_DRIVERS) || (DRM_I915 && (AGP_INTEL && ACPI))) || (VT && ~S390)) || ~S390))
(~S390 && EMBEDDED) || ((MAC_EMUMOUSEBTN && MACINTOSH_DRIVERS) => INPUT)
(~S390 && EMBEDDED) || ((DRM_I915 && (AGP_INTEL && ACPI)) => INPUT)
(~S390 && EMBEDDED) || ((VT && ~S390) => INPUT)
(~S390 && EMBEDDED) || (~S390 => INPUT)
(~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && (~BLACKFIN && (EMBEDDED || ~X86))))))) || (SERIO_I8042 => (((MOUSE_PS2 && (~S390 && (INPUT && (INPUT_MOUSE && X86)))) || (KEYBOARD_ATKBD && (~S390 && (INPUT && (INPUT_KEYBOARD && X86))))) || (~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && ~BLACKFIN)))))))
(~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && (~BLACKFIN && (EMBEDDED || ~X86))))))) || ((MOUSE_PS2 && (~S390 && (INPUT && (INPUT_MOUSE && X86)))) => SERIO_I8042)
(~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && (~BLACKFIN && (EMBEDDED || ~X86))))))) || ((KEYBOARD_ATKBD && (~S390 && (INPUT && (INPUT_KEYBOARD && X86)))) => SERIO_I8042)
(~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && (~BLACKFIN && (EMBEDDED || ~X86))))))) || ((~S390 && (SERIO && (~PARISC && ((~ARM || (ARCH_SHARK || FOOTBRIDGE_HOST)) && (~M68K && ~BLACKFIN))))) => SERIO_I8042)
(~S390 && SERIO) || (SERIO_SERPORT => ((I2C_TAOS_EVM && (I2C && EXPERIMENTAL)) || (~S390 && SERIO)))
(~S390 && SERIO) || ((I2C_TAOS_EVM && (I2C && EXPERIMENTAL)) => SERIO_SERPORT)
(~S390 && SERIO) || ((~S390 && SERIO) => SERIO_SERPORT)
(~S390 && (SERIO && X86)) || ~SERIO_CT82C710
(~S390 && (SERIO && Q40)) || ~SERIO_Q40KBD
(~S390 && (SERIO && PARPORT)) || ~SERIO_PARKBD
(~S390 && (SERIO && ARCH_ACORN)) || (SERIO_RPCKBD => (~S390 && (SERIO && ARCH_ACORN)))
(~S390 && (SERIO && ARCH_ACORN)) || ((~S390 && (SERIO && ARCH_ACORN)) => SERIO_RPCKBD)
(~S390 && (SERIO && AVR32)) || ~SERIO_AT32PSIF
(~S390 && (SERIO && ARM_AMBA)) || ~SERIO_AMBAKMI
(~S390 && (SERIO && SA1111)) || ~SERIO_SA1111
(~S390 && (SERIO && GSC)) || (SERIO_GSCPS2 => (((KEYBOARD_ATKBD && (~S390 && (INPUT && (INPUT_KEYBOARD && GSC)))) || (MOUSE_PS2 && (~S390 && (INPUT && (INPUT_MOUSE && GSC))))) || (~S390 && (SERIO && GSC))))
(~S390 && (SERIO && GSC)) || ((KEYBOARD_ATKBD && (~S390 && (INPUT && (INPUT_KEYBOARD && GSC)))) => SERIO_GSCPS2)
(~S390 && (SERIO && GSC)) || ((MOUSE_PS2 && (~S390 && (INPUT && (INPUT_MOUSE && GSC)))) => SERIO_GSCPS2)
(~S390 && (SERIO && GSC)) || ((~S390 && (SERIO && GSC)) => SERIO_GSCPS2)
(~S390 && (SERIO && HP_SDC)) || (HIL_MLC => (KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300))))))
(~S390 && (SERIO && HP_SDC)) || ((KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300))))) => HIL_MLC)
(~S390 && ((GSC || HP300) && SERIO)) || (HP_SDC => (((HP_SDC_RTC && (~S390 && (INPUT && (INPUT_MISC && ((GSC || HP300) && SERIO))))) || (KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))))) || (~S390 && ((GSC || HP300) && SERIO))))
(~S390 && ((GSC || HP300) && SERIO)) || ((HP_SDC_RTC && (~S390 && (INPUT && (INPUT_MISC && ((GSC || HP300) && SERIO))))) => HP_SDC)
(~S390 && ((GSC || HP300) && SERIO)) || ((KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300))))) => HP_SDC)
(~S390 && ((GSC || HP300) && SERIO)) || ((~S390 && ((GSC || HP300) && SERIO)) => HP_SDC)
(~S390 && (SERIO && PCI)) || ~SERIO_PCIPS2
(~S390 && (SERIO && SGI_IP32)) || ~SERIO_MACEPS2
(~S390 && (SERIO && ((SERIO_I8042 || ~SERIO_I8042) && EMBEDDED))) || (SERIO_LIBPS2 => ((MOUSE_PS2 && (~S390 && (INPUT && INPUT_MOUSE))) || (KEYBOARD_ATKBD && (~S390 && (INPUT && INPUT_KEYBOARD)))))
(~S390 && (SERIO && ((SERIO_I8042 || ~SERIO_I8042) && EMBEDDED))) || ((MOUSE_PS2 && (~S390 && (INPUT && INPUT_MOUSE))) => SERIO_LIBPS2)
(~S390 && (SERIO && ((SERIO_I8042 || ~SERIO_I8042) && EMBEDDED))) || ((KEYBOARD_ATKBD && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO_LIBPS2)
(~S390 && SERIO) || ~SERIO_RAW
(~S390 && (SERIO && (PPC || MICROBLAZE))) || ~SERIO_XILINX_XPS_PS2
(~S390 && (EMBEDDED || ~X86)) || (SERIO => ((((((((((((((((((((((((((((((TOUCHSCREEN_GUNZE && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) || (KEYBOARD_NEWTON && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (JOYSTICK_MAGELLAN && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (TOUCHSCREEN_ELO && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (KEYBOARD_XTKBD && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (KEYBOARD_SUNKBD && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (KEYBOARD_ATKBD && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (JOYSTICK_TWIDJOY && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (MOUSE_PS2 && (~S390 && (INPUT && INPUT_MOUSE)))) || (TOUCHSCREEN_FUJITSU && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (JOYSTICK_WARRIOR && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_SPACEBALL && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (TOUCHSCREEN_TOUCHWIN && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300)))))) || (TOUCHSCREEN_MTOUCH && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (TOUCHSCREEN_TOUCHRIGHT && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (KEYBOARD_STOWAWAY && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (TOUCHSCREEN_BITSY && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && SA1100_BITSY))))) || (JOYSTICK_STINGER && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (MOUSE_SERIAL && (~S390 && (INPUT && INPUT_MOUSE)))) || (KEYBOARD_LKKBD && (~S390 && (INPUT && INPUT_KEYBOARD)))) || (TOUCHSCREEN_INEXIO && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (I2C_TAOS_EVM && (I2C && EXPERIMENTAL))) || (TOUCHSCREEN_TOUCHIT213 && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (JOYSTICK_SPACEORB && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (MOUSE_VSXXXAA && (~S390 && (INPUT && INPUT_MOUSE)))) || (TOUCHSCREEN_WACOM_W8001 && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (TOUCHSCREEN_PENMOUNT && (~S390 && (INPUT && INPUT_TOUCHSCREEN)))) || (JOYSTICK_ZHENHUA && (~S390 && (INPUT && INPUT_JOYSTICK)))) || ~S390))
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_GUNZE && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_NEWTON && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_MAGELLAN && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_ELO && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_XTKBD && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_SUNKBD && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_ATKBD && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_TWIDJOY && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((MOUSE_PS2 && (~S390 && (INPUT && INPUT_MOUSE))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_FUJITSU && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_WARRIOR && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_SPACEBALL && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_TOUCHWIN && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_HIL && (~S390 && (INPUT && (INPUT_KEYBOARD && (GSC || HP300))))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_MTOUCH && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_TOUCHRIGHT && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_STOWAWAY && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_BITSY && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && SA1100_BITSY)))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_STINGER && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((MOUSE_SERIAL && (~S390 && (INPUT && INPUT_MOUSE))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((KEYBOARD_LKKBD && (~S390 && (INPUT && INPUT_KEYBOARD))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_INEXIO && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((I2C_TAOS_EVM && (I2C && EXPERIMENTAL)) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_TOUCHIT213 && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_SPACEORB && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((MOUSE_VSXXXAA && (~S390 && (INPUT && INPUT_MOUSE))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_WACOM_W8001 && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((TOUCHSCREEN_PENMOUNT && (~S390 && (INPUT && INPUT_TOUCHSCREEN))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || ((JOYSTICK_ZHENHUA && (~S390 && (INPUT && INPUT_JOYSTICK))) => SERIO)
(~S390 && (EMBEDDED || ~X86)) || (~S390 => SERIO)
(~S390 && GAMEPORT) || ~GAMEPORT_NS558
(~S390 && GAMEPORT) || ~GAMEPORT_L4
(~S390 && (GAMEPORT && PCI)) || ~GAMEPORT_EMU10K1
(~S390 && (GAMEPORT && PCI)) || ~GAMEPORT_FM801
~S390 || (GAMEPORT => ((((((((((((JOYSTICK_TMDC && (~S390 && (INPUT && INPUT_JOYSTICK))) || (JOYSTICK_GRIP && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_JOYDUMP && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_A3D && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_GF2K && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_GUILLEMOT && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_INTERACT && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_SIDEWINDER && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_ADI && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_COBRA && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_ANALOG && (~S390 && (INPUT && INPUT_JOYSTICK)))) || (JOYSTICK_GRIP_MP && (~S390 && (INPUT && INPUT_JOYSTICK)))))
~S390 || ((JOYSTICK_TMDC && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_GRIP && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_JOYDUMP && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_A3D && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_GF2K && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_GUILLEMOT && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_INTERACT && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_SIDEWINDER && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_ADI && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_COBRA && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_ANALOG && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
~S390 || ((JOYSTICK_GRIP_MP && (~S390 && (INPUT && INPUT_JOYSTICK))) => GAMEPORT)
(VT && EMBEDDED) || (CONSOLE_TRANSLATIONS => VT)
(VT && EMBEDDED) || (VT => CONSOLE_TRANSLATIONS)
(VT && EMBEDDED) || (VT_CONSOLE => VT)
(VT && EMBEDDED) || (VT => VT_CONSOLE)
HW_CONSOLE => (VT && (~S390 && ~UML))
(VT && (~S390 && ~UML)) => HW_CONSOLE
HW_CONSOLE || (VT_HW_CONSOLE_BINDING => (FB_PS3 && (HAS_IOMEM && (FB && (PS3_PS3AV && FRAMEBUFFER_CONSOLE)))))
HW_CONSOLE || ((FB_PS3 && (HAS_IOMEM && (FB && (PS3_PS3AV && FRAMEBUFFER_CONSOLE)))) => VT_HW_CONSOLE_BINDING)
(~S390 && EMBEDDED) || (VT => ((FB_STI && (HAS_IOMEM && (FB && PARISC))) || ~S390))
(~S390 && EMBEDDED) || ((FB_STI && (HAS_IOMEM && (FB && PARISC))) => VT)
(~S390 && EMBEDDED) || (~S390 => VT)
BFIN_JTAG_COMM || ~BFIN_JTAG_COMM_CONSOLE
BLACKFIN || ~BFIN_JTAG_COMM
(SERIAL_NONSTANDARD && (ISA || (EISA || PCI))) || ~COMPUTONE
(SERIAL_NONSTANDARD && (ISA || (EISA || PCI))) || ~ROCKETPORT
(EXPERIMENTAL && CYCLADES) || ~CYZ_INTR
(SERIAL_NONSTANDARD && (PCI || ISA)) || ~CYCLADES
(SERIAL_NONSTANDARD && (ISA || (EISA || PCI))) || ~DIGIEPCA
(SERIAL_NONSTANDARD && (ISA && (ISA_DMA_API && BROKEN))) || ~ESPSERIAL
(SERIAL_NONSTANDARD && (ISA || (EISA || PCI))) || ~MOXA_INTELLIO
(SERIAL_NONSTANDARD && (PCI || (EISA || ISA))) || ~MOXA_SMARTIO
(SERIAL_NONSTANDARD && PCI) || ~ISI
(SERIAL_NONSTANDARD && (PCI && ISA_DMA_API)) || ~SYNCLINK
(SERIAL_NONSTANDARD && PCI) || ~SYNCLINKMP
(SERIAL_NONSTANDARD && PCI) || ~SYNCLINK_GT
SERIAL_NONSTANDARD || ~N_HDLC
SERIAL_NONSTANDARD || ~RISCOM8
SERIAL_NONSTANDARD || ~SPECIALIX
(SERIAL_NONSTANDARD && ((PCI || (EISA || ISA)) && BROKEN)) || ~SX
RIO || ~RIO_OLDPCI
(SERIAL_NONSTANDARD && BROKEN) || ~RIO
(STALDRV && (ISA || (EISA || PCI))) || ~STALLION
(STALDRV && (ISA || (EISA || PCI))) || ~ISTALLION
SERIAL_NONSTANDARD || ~STALDRV
HAS_IOMEM || ~SERIAL_NONSTANDARD
(PCI && EXPERIMENTAL) || ~NOZOMI
(EXPERIMENTAL && (ZORRO && BROKEN)) || ~A2232
(IA64_SGI_SN2 || IA64_GENERIC) || ~SGI_SNSC
SGI_TIOCX || ~SGI_MBCS
(IA64_SGI_SN2 || IA64_GENERIC) || ~SGI_TIOCX
(HAS_IOMEM && SERIAL_8250) || ~SERIAL_8250_CONSOLE
HAS_IOMEM || (SERIAL_8250 => (MWAVE && X86))
HAS_IOMEM || ((MWAVE && X86) => SERIAL_8250)
FIX_EARLYCON_MEM => (HAS_IOMEM && X86)
(HAS_IOMEM && X86) => FIX_EARLYCON_MEM
SERIAL_8250_GSC => ((HAS_IOMEM && (SERIAL_8250 && GSC)) && SERIAL_8250)
((HAS_IOMEM && (SERIAL_8250 && GSC)) && SERIAL_8250) => SERIAL_8250_GSC
(HAS_IOMEM && (SERIAL_8250 && (PCI && EMBEDDED))) || (SERIAL_8250_PCI => ((HAS_IOMEM && (SERIAL_8250 && PCI)) && SERIAL_8250))
(HAS_IOMEM && (SERIAL_8250 && (PCI && EMBEDDED))) || (((HAS_IOMEM && (SERIAL_8250 && PCI)) && SERIAL_8250) => SERIAL_8250_PCI)
(HAS_IOMEM && (SERIAL_8250 && (PNP && EMBEDDED))) || (SERIAL_8250_PNP => ((HAS_IOMEM && (SERIAL_8250 && PNP)) && SERIAL_8250))
(HAS_IOMEM && (SERIAL_8250 && (PNP && EMBEDDED))) || (((HAS_IOMEM && (SERIAL_8250 && PNP)) && SERIAL_8250) => SERIAL_8250_PNP)
SERIAL_8250_HP300 => ((HAS_IOMEM && (SERIAL_8250 && HP300)) && SERIAL_8250)
((HAS_IOMEM && (SERIAL_8250 && HP300)) && SERIAL_8250) => SERIAL_8250_HP300
(HAS_IOMEM && (PCMCIA && SERIAL_8250)) || ~SERIAL_8250_CS
(HAS_IOMEM && SERIAL_8250) || ~SERIAL_8250_NR_UARTS
(HAS_IOMEM && SERIAL_8250) || ~SERIAL_8250_RUNTIME_UARTS
(HAS_IOMEM && (SERIAL_8250 && (ISA && SERIAL_8250_MANY_PORTS))) || ~SERIAL_8250_FOURPORT
(HAS_IOMEM && (SERIAL_8250 && (ISA && SERIAL_8250_MANY_PORTS))) || ~SERIAL_8250_ACCENT
(HAS_IOMEM && (SERIAL_8250 && (ISA && SERIAL_8250_MANY_PORTS))) || ~SERIAL_8250_BOCA
(HAS_IOMEM && (SERIAL_8250 && (ISA && SERIAL_8250_MANY_PORTS))) || ~SERIAL_8250_EXAR_ST16C554
(HAS_IOMEM && (SERIAL_8250 && (ISA && SERIAL_8250_MANY_PORTS))) || ~SERIAL_8250_HUB6
(HAS_IOMEM && (SERIAL_8250_EXTENDED && ~IA64)) || ~SERIAL_8250_MANY_PORTS
(HAS_IOMEM && SERIAL_8250_EXTENDED) || (SERIAL_8250_SHARE_IRQ => (SERIAL_8250_RM9K && (HAS_IOMEM && (SERIAL_8250 && SERIAL_RM9000))))
(HAS_IOMEM && SERIAL_8250_EXTENDED) || ((SERIAL_8250_RM9K && (HAS_IOMEM && (SERIAL_8250 && SERIAL_RM9000))) => SERIAL_8250_SHARE_IRQ)
(HAS_IOMEM && SERIAL_8250_EXTENDED) || ~SERIAL_8250_DETECT_IRQ
(HAS_IOMEM && SERIAL_8250_EXTENDED) || ~SERIAL_8250_RSA
(HAS_IOMEM && SERIAL_8250) || ~SERIAL_8250_EXTENDED
(HAS_IOMEM && (SERIAL_8250 && MCA)) || ~SERIAL_8250_MCA
(HAS_IOMEM && (ARCH_ACORN && SERIAL_8250)) || ~SERIAL_8250_ACORN
(HAS_IOMEM && (SERIAL_8250 && SOC_AU1X00)) || ~SERIAL_8250_AU1X00
(HAS_IOMEM && (SERIAL_8250 && SERIAL_RM9000)) || ~SERIAL_8250_RM9K
(HAS_IOMEM && SERIAL_AMBA_PL010) || ~SERIAL_AMBA_PL010_CONSOLE
(HAS_IOMEM && (ARM_AMBA && (BROKEN || ~ARCH_VERSATILE))) || ~SERIAL_AMBA_PL010
(HAS_IOMEM && SERIAL_AMBA_PL011) || ~SERIAL_AMBA_PL011_CONSOLE
(HAS_IOMEM && ARM_AMBA) || ~SERIAL_AMBA_PL011
(HAS_IOMEM && SERIAL_SB1250_DUART) || (SERIAL_SB1250_DUART_CONSOLE => (HAS_IOMEM && SERIAL_SB1250_DUART))
(HAS_IOMEM && SIBYTE_SB1xxx_SOC) || (SERIAL_SB1250_DUART => (HAS_IOMEM && SIBYTE_SB1xxx_SOC))
(HAS_IOMEM && SERIAL_ATMEL) || ~SERIAL_ATMEL_CONSOLE
(HAS_IOMEM && SERIAL_ATMEL) || (SERIAL_ATMEL_PDC => (HAS_IOMEM && SERIAL_ATMEL))
(HAS_IOMEM && SERIAL_ATMEL) || ((HAS_IOMEM && SERIAL_ATMEL) => SERIAL_ATMEL_PDC)
(HAS_IOMEM && SERIAL_ATMEL) || ~SERIAL_ATMEL_TTYAT
(HAS_IOMEM && ((ARM && ARCH_AT91) || AVR32)) || ~SERIAL_ATMEL
(HAS_IOMEM && SERIAL_KS8695) || ~SERIAL_KS8695_CONSOLE
(HAS_IOMEM && ARCH_KS8695) || ~SERIAL_KS8695
(HAS_IOMEM && SERIAL_CLPS711X) || ~SERIAL_CLPS711X_CONSOLE
(HAS_IOMEM && (ARM && ARCH_CLPS711X)) || ~SERIAL_CLPS711X
(HAS_IOMEM && (ARM && PLAT_S3C)) || ~SERIAL_SAMSUNG
~SERIAL_SAMSUNG_UARTS
(HAS_IOMEM && (SERIAL_SAMSUNG && DEBUG_LL)) || ~SERIAL_SAMSUNG_DEBUG
(HAS_IOMEM && SERIAL_SAMSUNG) || ~SERIAL_SAMSUNG_CONSOLE
(HAS_IOMEM && (ARM && (SERIAL_SAMSUNG && CPU_S3C2400))) || (SERIAL_S3C2400 => (HAS_IOMEM && (ARM && (SERIAL_SAMSUNG && CPU_S3C2400))))
(HAS_IOMEM && (ARM && (SERIAL_SAMSUNG && CPU_S3C2400))) || ((HAS_IOMEM && (ARM && (SERIAL_SAMSUNG && CPU_S3C2400))) => SERIAL_S3C2400)
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2410)) || (SERIAL_S3C2410 => (HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2410)))
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2410)) || ((HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2410)) => SERIAL_S3C2410)
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2412)) || (SERIAL_S3C2412 => (HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2412)))
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2412)) || ((HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C2412)) => SERIAL_S3C2412)
(HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442))) || (SERIAL_S3C2440 => ((HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440))) || (~HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440)) && (HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2442))))))
(HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442))) || ((HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440))) => SERIAL_S3C2440)
(HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C2440 || CPU_S3C2442))) || ((~HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2440)) && (HAS_IOMEM && (SERIAL_SAMSUNG && ((CPU_S3C2440 || CPU_S3C2442) && CPU_S3C2442)))) => SERIAL_S3C2440)
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C24A0)) || (SERIAL_S3C24A0 => (HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C24A0)))
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C24A0)) || ((HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S3C24A0)) => SERIAL_S3C24A0)
(HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410))) || (SERIAL_S3C6400 => (HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410))))
(HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410))) || ((HAS_IOMEM && (SERIAL_SAMSUNG && (CPU_S3C6400 || CPU_S3C6410))) => SERIAL_S3C6400)
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S5PC100)) || (SERIAL_S5PC100 => (HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S5PC100)))
(HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S5PC100)) || ((HAS_IOMEM && (SERIAL_SAMSUNG && CPU_S5PC100)) => SERIAL_S5PC100)
(HAS_IOMEM && SPI) || ~SERIAL_MAX3100
(HAS_IOMEM && SERIAL_DZ) || (SERIAL_DZ_CONSOLE => (HAS_IOMEM && SERIAL_DZ))
(HAS_IOMEM && SERIAL_DZ) || ((HAS_IOMEM && SERIAL_DZ) => SERIAL_DZ_CONSOLE)
(HAS_IOMEM && (MACH_DECSTATION && c32BIT)) || (SERIAL_DZ => (HAS_IOMEM && (MACH_DECSTATION && c32BIT)))
(HAS_IOMEM && (MACH_DECSTATION && c32BIT)) || ((HAS_IOMEM && (MACH_DECSTATION && c32BIT)) => SERIAL_DZ)
(HAS_IOMEM && SERIAL_ZS) || (SERIAL_ZS_CONSOLE => (HAS_IOMEM && SERIAL_ZS))
(HAS_IOMEM && MACH_DECSTATION) || (SERIAL_ZS => (HAS_IOMEM && MACH_DECSTATION))
(HAS_IOMEM && MACH_DECSTATION) || ((HAS_IOMEM && MACH_DECSTATION) => SERIAL_ZS)
(HAS_IOMEM && SERIAL_21285) || ~SERIAL_21285_CONSOLE
(HAS_IOMEM && (ARM && FOOTBRIDGE)) || ~SERIAL_21285
(HAS_IOMEM && SERIAL_MPSC) || ~SERIAL_MPSC_CONSOLE
(HAS_IOMEM && (PPC32 && MV64X60)) || ~SERIAL_MPSC
(HAS_IOMEM && SERIAL_PXA) || ~SERIAL_PXA_CONSOLE
(HAS_IOMEM && (ARCH_PXA || ARCH_MMP)) || ~SERIAL_PXA
(HAS_IOMEM && SERIAL_SA1100) || ~SERIAL_SA1100_CONSOLE
(HAS_IOMEM && (ARM && ARCH_SA1100)) || ~SERIAL_SA1100
(HAS_IOMEM && SERIAL_BFIN) || ~SERIAL_BFIN_CONSOLE
(~DMA_UNCACHED_NONE && ~KGDB_SERIAL_CONSOLE) || ~SERIAL_BFIN_DMA
HAS_IOMEM && SERIAL_BFIN
(HAS_IOMEM && (BFIN_UART0_CTSRTS && ~BF548)) || ~UART0_CTS_PIN
(HAS_IOMEM && (BFIN_UART0_CTSRTS && ~BF548)) || ~UART0_RTS_PIN
(HAS_IOMEM && SERIAL_BFIN_UART0) || ~BFIN_UART0_CTSRTS
(HAS_IOMEM && SERIAL_BFIN) || (SERIAL_BFIN_UART0 => (SERIAL_BFIN && (HAS_IOMEM && (BLACKFIN && (BF531 || (BF532 || (BF533 || BF561)))))))
(HAS_IOMEM && SERIAL_BFIN) || ((SERIAL_BFIN && (HAS_IOMEM && (BLACKFIN && (BF531 || (BF532 || (BF533 || BF561)))))) => SERIAL_BFIN_UART0)
(HAS_IOMEM && (BFIN_UART1_CTSRTS && ~BF548)) || ~UART1_CTS_PIN
(HAS_IOMEM && (BFIN_UART1_CTSRTS && ~BF548)) || ~UART1_RTS_PIN
(HAS_IOMEM && SERIAL_BFIN_UART1) || ~BFIN_UART1_CTSRTS
(HAS_IOMEM && (SERIAL_BFIN && (~BF531 && (~BF532 && (~BF533 && ~BF561))))) || ~SERIAL_BFIN_UART1
(HAS_IOMEM && (BFIN_UART2_CTSRTS && ~BF548)) || ~UART2_CTS_PIN
(HAS_IOMEM && (BFIN_UART2_CTSRTS && ~BF548)) || ~UART2_RTS_PIN
(HAS_IOMEM && SERIAL_BFIN_UART2) || ~BFIN_UART2_CTSRTS
(HAS_IOMEM && (SERIAL_BFIN && (BF54x || (BF538 || BF539)))) || ~SERIAL_BFIN_UART2
(HAS_IOMEM && (BFIN_UART3_CTSRTS && ~BF548)) || ~UART3_CTS_PIN
(HAS_IOMEM && (BFIN_UART3_CTSRTS && ~BF548)) || ~UART3_RTS_PIN
(HAS_IOMEM && SERIAL_BFIN_UART3) || ~BFIN_UART3_CTSRTS
(HAS_IOMEM && (SERIAL_BFIN && BF54x)) || ~SERIAL_BFIN_UART3
(HAS_IOMEM && BLACKFIN) || ~SERIAL_BFIN
(HAS_IOMEM && SERIAL_IMX) || ~SERIAL_IMX_CONSOLE
(HAS_IOMEM && (ARM && (ARCH_IMX || ARCH_MXC))) || ~SERIAL_IMX
(HAS_IOMEM && SERIAL_UARTLITE) || ~SERIAL_UARTLITE_CONSOLE
(HAS_IOMEM && (PPC32 || (MICROBLAZE || MFD_TIMBERDALE))) || ~SERIAL_UARTLITE
SERIAL_SUNCORE => (HAS_IOMEM && SPARC)
(HAS_IOMEM && SPARC) => SERIAL_SUNCORE
(HAS_IOMEM && SERIAL_SUNZILOG) || ~SERIAL_SUNZILOG_CONSOLE
(HAS_IOMEM && SPARC) || ~SERIAL_SUNZILOG
(HAS_IOMEM && SERIAL_SUNSU) || ~SERIAL_SUNSU_CONSOLE
(HAS_IOMEM && (SPARC && PCI)) || ~SERIAL_SUNSU
(HAS_IOMEM && SERIAL_MUX) || (SERIAL_MUX_CONSOLE => (HAS_IOMEM && SERIAL_MUX))
(HAS_IOMEM && GSC) || (SERIAL_MUX => (HAS_IOMEM && GSC))
(HAS_IOMEM && GSC) || ((HAS_IOMEM && GSC) => SERIAL_MUX)
(HAS_IOMEM && (PARISC && (~SERIAL_MUX && VT))) || ~PDC_CONSOLE
(HAS_IOMEM && SERIAL_SUNSAB) || ~SERIAL_SUNSAB_CONSOLE
(HAS_IOMEM && (SPARC && PCI)) || ~SERIAL_SUNSAB
(HAS_IOMEM && SPARC64) || ~SERIAL_SUNHV
(HAS_IOMEM && SERIAL_IP22_ZILOG) || ~SERIAL_IP22_ZILOG_CONSOLE
(HAS_IOMEM && SGI_HAS_ZILOG) || ~SERIAL_IP22_ZILOG
(HAS_IOMEM && SERIAL_SH_SCI) || ~SERIAL_SH_SCI_NR_UARTS
(HAS_IOMEM && SERIAL_SH_SCI) || ~SERIAL_SH_SCI_CONSOLE
(HAS_IOMEM && (SUPERH || H8300)) || ~SERIAL_SH_SCI
(HAS_IOMEM && SERIAL_PNX8XXX) || ~SERIAL_PNX8XXX_CONSOLE
(HAS_IOMEM && (MIPS && (SOC_PNX8550 || SOC_PNX833X))) || ~SERIAL_PNX8XXX
SERIAL_CORE => ((((((((((((((((((((((((((((((((((((((((((((SERIAL_SGI_IOC3 && (HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3))) || (SERIAL_MCF && (HAS_IOMEM && COLDFIRE))) || (SERIAL_DZ && (HAS_IOMEM && (MACH_DECSTATION && c32BIT)))) || (SERIAL_MPSC && (HAS_IOMEM && (PPC32 && MV64X60)))) || (SERIAL_ICOM && (HAS_IOMEM && (PCI && (PPC_ISERIES || PPC_PSERIES))))) || (SERIAL_PNX8XXX && (HAS_IOMEM && (MIPS && (SOC_PNX8550 || SOC_PNX833X))))) || (SERIAL_MPC52xx && (HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)))) || (SERIAL_TXX9 && (HAS_IOMEM && HAS_TXX9_SERIAL))) || (SERIAL_CPM && (HAS_IOMEM && (CPM2 || c8xx)))) || (SERIAL_JSM && (HAS_IOMEM && PCI))) || (SERIAL_M32R_SIO && (HAS_IOMEM && M32R))) || (SERIAL_VR41XX && (HAS_IOMEM && CPU_VR41XX))) || (SERIAL_21285 && (HAS_IOMEM && (ARM && FOOTBRIDGE)))) || (SERIAL_UARTLITE && (HAS_IOMEM && (PPC32 || (MICROBLAZE || MFD_TIMBERDALE))))) || (SERIAL_BCM63XX && (HAS_IOMEM && BCM63XX))) || (SERIAL_SAMSUNG && (HAS_IOMEM && (ARM && PLAT_S3C)))) || (SERIAL_BFIN && (HAS_IOMEM && BLACKFIN))) || (SERIAL_SB1250_DUART && (HAS_IOMEM && SIBYTE_SB1xxx_SOC))) || (SERIAL_ZS && (HAS_IOMEM && MACH_DECSTATION))) || (SERIAL_LH7A40X && (HAS_IOMEM && (ARM && ARCH_LH7A40X)))) || (SERIAL_ATMEL && (HAS_IOMEM && ((ARM && ARCH_AT91) || AVR32)))) || (SERIAL_SH_SCI && (HAS_IOMEM && (SUPERH || H8300)))) || (SERIAL_AMBA_PL011 && (HAS_IOMEM && ARM_AMBA))) || (SERIAL_MAX3100 && (HAS_IOMEM && SPI))) || (SERIAL_SC26XX && (HAS_IOMEM && SNI_RM))) || (SERIAL_CLPS711X && (HAS_IOMEM && (ARM && ARCH_CLPS711X)))) || (SERIAL_PXA && (HAS_IOMEM && (ARCH_PXA || ARCH_MMP)))) || (SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR)))) || (SERIAL_QE && (HAS_IOMEM && QUICC_ENGINE))) || (SERIAL_8250 && HAS_IOMEM)) || (SERIAL_AMBA_PL010 && (HAS_IOMEM && (ARM_AMBA && (BROKEN || ~ARCH_VERSATILE))))) || (SERIAL_IP22_ZILOG && (HAS_IOMEM && SGI_HAS_ZILOG))) || (SERIAL_NETX && (HAS_IOMEM && (ARM && ARCH_NETX)))) || (SERIAL_KS8695 && (HAS_IOMEM && ARCH_KS8695))) || (SERIAL_IMX && (HAS_IOMEM && (ARM && (ARCH_IMX || ARCH_MXC))))) || (SERIAL_SA1100 && (HAS_IOMEM && (ARM && ARCH_SA1100)))) || (SERIAL_SGI_L1_CONSOLE && (HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)))) || (SERIAL_SGI_IOC4 && (HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4)))) || (SERIAL_PMACZILOG && (HAS_IOMEM && (PPC_OF && PPC_PMAC)))) || (SERIAL_SUNCORE && (HAS_IOMEM && SPARC))) || (SERIAL_TIMBERDALE && (HAS_IOMEM && MFD_TIMBERDALE))) || (SERIAL_BFIN_SPORT && (HAS_IOMEM && (BLACKFIN && EXPERIMENTAL)))) || (SERIAL_MSM && (HAS_IOMEM && (ARM && ARCH_MSM)))) || (SERIAL_MUX && (HAS_IOMEM && GSC)))
(SERIAL_SGI_IOC3 && (HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3))) => SERIAL_CORE
(SERIAL_MCF && (HAS_IOMEM && COLDFIRE)) => SERIAL_CORE
(SERIAL_DZ && (HAS_IOMEM && (MACH_DECSTATION && c32BIT))) => SERIAL_CORE
(SERIAL_MPSC && (HAS_IOMEM && (PPC32 && MV64X60))) => SERIAL_CORE
(SERIAL_ICOM && (HAS_IOMEM && (PCI && (PPC_ISERIES || PPC_PSERIES)))) => SERIAL_CORE
(SERIAL_PNX8XXX && (HAS_IOMEM && (MIPS && (SOC_PNX8550 || SOC_PNX833X)))) => SERIAL_CORE
(SERIAL_MPC52xx && (HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x))) => SERIAL_CORE
(SERIAL_TXX9 && (HAS_IOMEM && HAS_TXX9_SERIAL)) => SERIAL_CORE
(SERIAL_CPM && (HAS_IOMEM && (CPM2 || c8xx))) => SERIAL_CORE
(SERIAL_JSM && (HAS_IOMEM && PCI)) => SERIAL_CORE
(SERIAL_M32R_SIO && (HAS_IOMEM && M32R)) => SERIAL_CORE
(SERIAL_VR41XX && (HAS_IOMEM && CPU_VR41XX)) => SERIAL_CORE
(SERIAL_21285 && (HAS_IOMEM && (ARM && FOOTBRIDGE))) => SERIAL_CORE
(SERIAL_UARTLITE && (HAS_IOMEM && (PPC32 || (MICROBLAZE || MFD_TIMBERDALE)))) => SERIAL_CORE
(SERIAL_BCM63XX && (HAS_IOMEM && BCM63XX)) => SERIAL_CORE
(SERIAL_SAMSUNG && (HAS_IOMEM && (ARM && PLAT_S3C))) => SERIAL_CORE
(SERIAL_BFIN && (HAS_IOMEM && BLACKFIN)) => SERIAL_CORE
(SERIAL_ZS && (HAS_IOMEM && MACH_DECSTATION)) => SERIAL_CORE
(SERIAL_LH7A40X && (HAS_IOMEM && (ARM && ARCH_LH7A40X))) => SERIAL_CORE
(SERIAL_ATMEL && (HAS_IOMEM && ((ARM && ARCH_AT91) || AVR32))) => SERIAL_CORE
(SERIAL_SH_SCI && (HAS_IOMEM && (SUPERH || H8300))) => SERIAL_CORE
(SERIAL_AMBA_PL011 && (HAS_IOMEM && ARM_AMBA)) => SERIAL_CORE
(SERIAL_MAX3100 && (HAS_IOMEM && SPI)) => SERIAL_CORE
(SERIAL_SC26XX && (HAS_IOMEM && SNI_RM)) => SERIAL_CORE
(SERIAL_CLPS711X && (HAS_IOMEM && (ARM && ARCH_CLPS711X))) => SERIAL_CORE
(SERIAL_PXA && (HAS_IOMEM && (ARCH_PXA || ARCH_MMP))) => SERIAL_CORE
(SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR))) => SERIAL_CORE
(SERIAL_QE && (HAS_IOMEM && QUICC_ENGINE)) => SERIAL_CORE
(SERIAL_8250 && HAS_IOMEM) => SERIAL_CORE
(SERIAL_AMBA_PL010 && (HAS_IOMEM && (ARM_AMBA && (BROKEN || ~ARCH_VERSATILE)))) => SERIAL_CORE
(SERIAL_IP22_ZILOG && (HAS_IOMEM && SGI_HAS_ZILOG)) => SERIAL_CORE
(SERIAL_NETX && (HAS_IOMEM && (ARM && ARCH_NETX))) => SERIAL_CORE
(SERIAL_KS8695 && (HAS_IOMEM && ARCH_KS8695)) => SERIAL_CORE
(SERIAL_IMX && (HAS_IOMEM && (ARM && (ARCH_IMX || ARCH_MXC)))) => SERIAL_CORE
(SERIAL_SA1100 && (HAS_IOMEM && (ARM && ARCH_SA1100))) => SERIAL_CORE
(SERIAL_SGI_L1_CONSOLE && (HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2))) => SERIAL_CORE
(SERIAL_SGI_IOC4 && (HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4))) => SERIAL_CORE
(SERIAL_PMACZILOG && (HAS_IOMEM && (PPC_OF && PPC_PMAC))) => SERIAL_CORE
(SERIAL_SUNCORE && (HAS_IOMEM && SPARC)) => SERIAL_CORE
(SERIAL_TIMBERDALE && (HAS_IOMEM && MFD_TIMBERDALE)) => SERIAL_CORE
(SERIAL_BFIN_SPORT && (HAS_IOMEM && (BLACKFIN && EXPERIMENTAL))) => SERIAL_CORE
(SERIAL_MSM && (HAS_IOMEM && (ARM && ARCH_MSM))) => SERIAL_CORE
(SERIAL_MUX && (HAS_IOMEM && GSC)) => SERIAL_CORE
SERIAL_CORE_CONSOLE => (((((((((((((((((((((((((((((((((((((SERIAL_MUX_CONSOLE && (HAS_IOMEM && SERIAL_MUX)) || (SERIAL_AMBA_PL010_CONSOLE && (HAS_IOMEM && SERIAL_AMBA_PL010))) || (SERIAL_LH7A40X_CONSOLE && (HAS_IOMEM && SERIAL_LH7A40X))) || (SERIAL_MPSC_CONSOLE && (HAS_IOMEM && SERIAL_MPSC))) || (SERIAL_PMACZILOG_CONSOLE && (HAS_IOMEM && SERIAL_PMACZILOG))) || (SERIAL_CLPS711X_CONSOLE && (HAS_IOMEM && SERIAL_CLPS711X))) || (SERIAL_UARTLITE_CONSOLE && (HAS_IOMEM && SERIAL_UARTLITE))) || (SERIAL_MPC52xx_CONSOLE && (HAS_IOMEM && SERIAL_MPC52xx))) || (SERIAL_PXA_CONSOLE && (HAS_IOMEM && SERIAL_PXA))) || (SERIAL_IP22_ZILOG_CONSOLE && (HAS_IOMEM && SERIAL_IP22_ZILOG))) || (SERIAL_SA1100_CONSOLE && (HAS_IOMEM && SERIAL_SA1100))) || (SERIAL_AMBA_PL011_CONSOLE && (HAS_IOMEM && SERIAL_AMBA_PL011))) || (SERIAL_BFIN_CONSOLE && (HAS_IOMEM && SERIAL_BFIN))) || (SERIAL_ZS_CONSOLE && (HAS_IOMEM && SERIAL_ZS))) || (SERIAL_KS8695_CONSOLE && (HAS_IOMEM && SERIAL_KS8695))) || (SERIAL_MSM_CONSOLE && (HAS_IOMEM && SERIAL_MSM))) || (SERIAL_SC26XX_CONSOLE && (HAS_IOMEM && SERIAL_SC26XX))) || (SERIAL_CPM_CONSOLE && (HAS_IOMEM && SERIAL_CPM))) || (SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR)))) || (SERIAL_OF_PLATFORM_NWPSERIAL_CONSOLE && (HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL))) || (SERIAL_TXX9_CONSOLE && (HAS_IOMEM && SERIAL_TXX9))) || (SERIAL_ATMEL_CONSOLE && (HAS_IOMEM && SERIAL_ATMEL))) || (SERIAL_8250_CONSOLE && (HAS_IOMEM && SERIAL_8250))) || (SERIAL_DZ_CONSOLE && (HAS_IOMEM && SERIAL_DZ))) || (SERIAL_SB1250_DUART_CONSOLE && (HAS_IOMEM && SERIAL_SB1250_DUART))) || (SERIAL_SGI_L1_CONSOLE && (HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)))) || (SERIAL_IMX_CONSOLE && (HAS_IOMEM && SERIAL_IMX))) || (SERIAL_PNX8XXX_CONSOLE && (HAS_IOMEM && SERIAL_PNX8XXX))) || (SERIAL_M32R_SIO_CONSOLE && (HAS_IOMEM && SERIAL_M32R_SIO))) || (SERIAL_SUNCORE && (HAS_IOMEM && SPARC))) || (SERIAL_SAMSUNG_CONSOLE && (HAS_IOMEM && SERIAL_SAMSUNG))) || (SERIAL_MCF_CONSOLE && (HAS_IOMEM && SERIAL_MCF))) || (SERIAL_BCM63XX_CONSOLE && (HAS_IOMEM && SERIAL_BCM63XX))) || (SERIAL_21285_CONSOLE && (HAS_IOMEM && SERIAL_21285))) || (SERIAL_SH_SCI_CONSOLE && (HAS_IOMEM && SERIAL_SH_SCI))) || (SERIAL_VR41XX_CONSOLE && (HAS_IOMEM && SERIAL_VR41XX))) || (SERIAL_NETX_CONSOLE && (HAS_IOMEM && SERIAL_NETX)))
(SERIAL_MPSC_CONSOLE && (HAS_IOMEM && SERIAL_MPSC)) => SERIAL_CORE_CONSOLE
(SERIAL_PXA_CONSOLE && (HAS_IOMEM && SERIAL_PXA)) => SERIAL_CORE_CONSOLE
(SERIAL_SA1100_CONSOLE && (HAS_IOMEM && SERIAL_SA1100)) => SERIAL_CORE_CONSOLE
(SERIAL_KS8695_CONSOLE && (HAS_IOMEM && SERIAL_KS8695)) => SERIAL_CORE_CONSOLE
(SERIAL_MSM_CONSOLE && (HAS_IOMEM && SERIAL_MSM)) => SERIAL_CORE_CONSOLE
(SERIAL_SC26XX_CONSOLE && (HAS_IOMEM && SERIAL_SC26XX)) => SERIAL_CORE_CONSOLE
(SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR))) => SERIAL_CORE_CONSOLE
(SERIAL_TXX9_CONSOLE && (HAS_IOMEM && SERIAL_TXX9)) => SERIAL_CORE_CONSOLE
(SERIAL_ATMEL_CONSOLE && (HAS_IOMEM && SERIAL_ATMEL)) => SERIAL_CORE_CONSOLE
(SERIAL_DZ_CONSOLE && (HAS_IOMEM && SERIAL_DZ)) => SERIAL_CORE_CONSOLE
(SERIAL_SGI_L1_CONSOLE && (HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2))) => SERIAL_CORE_CONSOLE
(SERIAL_IMX_CONSOLE && (HAS_IOMEM && SERIAL_IMX)) => SERIAL_CORE_CONSOLE
(SERIAL_PNX8XXX_CONSOLE && (HAS_IOMEM && SERIAL_PNX8XXX)) => SERIAL_CORE_CONSOLE
(SERIAL_M32R_SIO_CONSOLE && (HAS_IOMEM && SERIAL_M32R_SIO)) => SERIAL_CORE_CONSOLE
(SERIAL_SUNCORE && (HAS_IOMEM && SPARC)) => SERIAL_CORE_CONSOLE
(SERIAL_MCF_CONSOLE && (HAS_IOMEM && SERIAL_MCF)) => SERIAL_CORE_CONSOLE
CONSOLE_POLL => (KGDB_SERIAL_CONSOLE && KGDB)
(KGDB_SERIAL_CONSOLE && KGDB) => CONSOLE_POLL
(HAS_IOMEM && SERIAL_68328) || ~SERIAL_68328_RTS_CTS
(HAS_IOMEM && (M68328 || (M68EZ328 || M68VZ328))) || ~SERIAL_68328
(HAS_IOMEM && SERIAL_MCF) || ~SERIAL_MCF_BAUDRATE
(HAS_IOMEM && SERIAL_MCF) || ~SERIAL_MCF_CONSOLE
(HAS_IOMEM && COLDFIRE) || ~SERIAL_MCF
(HAS_IOMEM && M68360) || ~SERIAL_68360_SMC
(HAS_IOMEM && M68360) || ~SERIAL_68360_SCC
SERIAL_68360 => (HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC))
(HAS_IOMEM && (SERIAL_68360_SMC || SERIAL_68360_SCC)) => SERIAL_68360
(HAS_IOMEM && SERIAL_PMACZILOG) || ~SERIAL_PMACZILOG_TTYS
(HAS_IOMEM && SERIAL_PMACZILOG) || ~SERIAL_PMACZILOG_CONSOLE
(HAS_IOMEM && (PPC_OF && PPC_PMAC)) || ~SERIAL_PMACZILOG
(HAS_IOMEM && SERIAL_LH7A40X) || ~SERIAL_LH7A40X_CONSOLE
(HAS_IOMEM && (ARM && ARCH_LH7A40X)) || ~SERIAL_LH7A40X
(HAS_IOMEM && SERIAL_CPM) || ~SERIAL_CPM_CONSOLE
(HAS_IOMEM && (CPM2 || c8xx)) || ~SERIAL_CPM
(HAS_IOMEM && (IA64_GENERIC || IA64_SGI_SN2)) || ~SERIAL_SGI_L1_CONSOLE
(HAS_IOMEM && SERIAL_MPC52xx_CONSOLE) || ~SERIAL_MPC52xx_CONSOLE_BAUD
(HAS_IOMEM && SERIAL_MPC52xx) || ~SERIAL_MPC52xx_CONSOLE
(HAS_IOMEM && (PPC_MPC52xx || PPC_MPC512x)) || ~SERIAL_MPC52xx
(HAS_IOMEM && (PCI && (PPC_ISERIES || PPC_PSERIES))) || ~SERIAL_ICOM
(HAS_IOMEM && SERIAL_M32R_SIO) || ~SERIAL_M32R_SIO_CONSOLE
(HAS_IOMEM && (SERIAL_M32R_SIO && (PLAT_OPSPUT || (PLAT_USRV || PLAT_M32700UT)))) || ~SERIAL_M32R_PLDSIO
(HAS_IOMEM && M32R) || (SERIAL_M32R_SIO => (HAS_IOMEM && M32R))
(HAS_IOMEM && M32R) || ((HAS_IOMEM && M32R) => SERIAL_M32R_SIO)
(HAS_IOMEM && HAS_TXX9_SERIAL) || (SERIAL_TXX9 => (HAS_IOMEM && HAS_TXX9_SERIAL))
(HAS_IOMEM && HAS_TXX9_SERIAL) || ((HAS_IOMEM && HAS_TXX9_SERIAL) => SERIAL_TXX9)
~HAS_TXX9_SERIAL
(HAS_IOMEM && SERIAL_TXX9) || ~SERIAL_TXX9_NR_UARTS
(HAS_IOMEM && SERIAL_TXX9) || ~SERIAL_TXX9_CONSOLE
(HAS_IOMEM && (~SERIAL_8250 && SERIAL_TXX9)) || ~SERIAL_TXX9_STDSERIAL
(HAS_IOMEM && SERIAL_VR41XX) || ~SERIAL_VR41XX_CONSOLE
(HAS_IOMEM && CPU_VR41XX) || ~SERIAL_VR41XX
(HAS_IOMEM && PCI) || ~SERIAL_JSM
(HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC4)) || ~SERIAL_SGI_IOC4
(HAS_IOMEM && ((IA64_GENERIC || IA64_SGI_SN2) && SGI_IOC3)) || ~SERIAL_SGI_IOC3
(HAS_IOMEM && SERIAL_MSM) || ~SERIAL_MSM_CONSOLE
(HAS_IOMEM && (ARM && ARCH_MSM)) || ~SERIAL_MSM
(HAS_IOMEM && SERIAL_NETX) || ~SERIAL_NETX_CONSOLE
(HAS_IOMEM && (ARM && ARCH_NETX)) || ~SERIAL_NETX
(HAS_IOMEM && ((PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL))) || (SERIAL_OF_PLATFORM => (SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR))))
(HAS_IOMEM && ((PPC_OF || MICROBLAZE) && (SERIAL_8250 || SERIAL_OF_PLATFORM_NWPSERIAL))) || ((SERIAL_OF_PLATFORM_NWPSERIAL && (HAS_IOMEM && (PPC_OF && PPC_DCR))) => SERIAL_OF_PLATFORM)
(HAS_IOMEM && SERIAL_OF_PLATFORM_NWPSERIAL) || ~SERIAL_OF_PLATFORM_NWPSERIAL_CONSOLE
(HAS_IOMEM && (PPC_OF && PPC_DCR)) || ~SERIAL_OF_PLATFORM_NWPSERIAL
(HAS_IOMEM && QUICC_ENGINE) || ~SERIAL_QE
(HAS_IOMEM && SERIAL_SC26XX) || ~SERIAL_SC26XX_CONSOLE
(HAS_IOMEM && SNI_RM) || ~SERIAL_SC26XX
HAS_IOMEM && SERIAL_BFIN_SPORT
~SPORT_BAUD_RATE
(HAS_IOMEM && (BLACKFIN && EXPERIMENTAL)) || ~SERIAL_BFIN_SPORT
(HAS_IOMEM && MFD_TIMBERDALE) || ~SERIAL_TIMBERDALE
(HAS_IOMEM && SERIAL_BCM63XX) || ~SERIAL_BCM63XX_CONSOLE
(HAS_IOMEM && BCM63XX) || ~SERIAL_BCM63XX
UNIX98_PTYS || ~DEVPTS_MULTIPLE_INSTANCES
EMBEDDED || UNIX98_PTYS
LEGACY_PTYS || ~LEGACY_PTY_COUNT
PPC_CHRP || ~BRIQ_PANEL
BFIN_OTP || ~BFIN_OTP_WRITE_ENABLE
(BLACKFIN && (BF52x || BF54x)) || (BFIN_OTP => (BLACKFIN && (BF52x || BF54x)))
(BLACKFIN && (BF52x || BF54x)) || ((BLACKFIN && (BF52x || BF54x)) => BFIN_OTP)
PRINTER || ~LP_CONSOLE
PARPORT || ~PRINTER
PARPORT || ~PPDEV
HVC_DRIVER => (((((((((HVC_BEAT && PPC_CELLEB) || (HVC_ISERIES && PPC_ISERIES)) || (HVC_IUCV && S390)) || (HVC_CONSOLE && PPC_PSERIES)) || (VIRTIO_CONSOLE && VIRTIO)) || (HVC_RTAS && PPC_RTAS)) || (LGUEST && (VIRTUALIZATION && (X86_32 && (EXPERIMENTAL && EVENTFD))))) || (HVC_UDBG && (PPC && EXPERIMENTAL))) || (HVC_XEN && XEN))
(HVC_BEAT && PPC_CELLEB) => HVC_DRIVER
(HVC_ISERIES && PPC_ISERIES) => HVC_DRIVER
(HVC_IUCV && S390) => HVC_DRIVER
(HVC_CONSOLE && PPC_PSERIES) => HVC_DRIVER
(VIRTIO_CONSOLE && VIRTIO) => HVC_DRIVER
(HVC_RTAS && PPC_RTAS) => HVC_DRIVER
(LGUEST && (VIRTUALIZATION && (X86_32 && (EXPERIMENTAL && EVENTFD)))) => HVC_DRIVER
(HVC_UDBG && (PPC && EXPERIMENTAL)) => HVC_DRIVER
(HVC_XEN && XEN) => HVC_DRIVER
HVC_IRQ => (((HVC_ISERIES && PPC_ISERIES) || (HVC_CONSOLE && PPC_PSERIES)) || (HVC_XEN && XEN))
(HVC_ISERIES && PPC_ISERIES) => HVC_IRQ
(HVC_CONSOLE && PPC_PSERIES) => HVC_IRQ
(HVC_XEN && XEN) => HVC_IRQ
PPC_PSERIES || ~HVC_CONSOLE
PPC_ISERIES || (HVC_ISERIES => PPC_ISERIES)
PPC_ISERIES || (PPC_ISERIES => HVC_ISERIES)
PPC_RTAS || ~HVC_RTAS
PPC_CELLEB || ~HVC_BEAT
S390 || (HVC_IUCV => S390)
S390 || (S390 => HVC_IUCV)
XEN || (HVC_XEN => XEN)
XEN || (XEN => HVC_XEN)
(PPC && EXPERIMENTAL) || ~HVC_UDBG
VIRTIO || (VIRTIO_CONSOLE => (LGUEST_GUEST && (PARAVIRT_GUEST && X86_32)))
VIRTIO || ((LGUEST_GUEST && (PARAVIRT_GUEST && X86_32)) => VIRTIO_CONSOLE)
PPC_PSERIES || ~HVCS
PPC_PSERIES || ~IBM_BSR
(IPMI_HANDLER && IPMI_PANIC_EVENT) || ~IPMI_PANIC_STRING
IPMI_HANDLER || ~IPMI_PANIC_EVENT
IPMI_HANDLER || ~IPMI_DEVICE_INTERFACE
IPMI_HANDLER || (IPMI_SI => ((SENSORS_IBMPEX && (HWMON && IPMI_HANDLER)) || (SENSORS_IBMAEM && (HWMON && IPMI_HANDLER))))
IPMI_HANDLER || ((SENSORS_IBMPEX && (HWMON && IPMI_HANDLER)) => IPMI_SI)
IPMI_HANDLER || ((SENSORS_IBMAEM && (HWMON && IPMI_HANDLER)) => IPMI_SI)
IPMI_HANDLER || ~IPMI_WATCHDOG
IPMI_HANDLER || ~IPMI_POWEROFF
HAS_IOMEM || ~IPMI_HANDLER
ARCH_NETWINDER || ~DS1620
NWBUTTON || ~NWBUTTON_REBOOT
ARCH_NETWINDER || ~NWBUTTON
ARCH_NETWINDER || ~NWFLASH
(HW_RANDOM && HAS_IOMEM) || ~HW_RANDOM_TIMERIOMEM
(HW_RANDOM && ((X86 || IA64) && PCI)) || (HW_RANDOM_INTEL => ((HW_RANDOM && ((X86 || IA64) && PCI)) && HW_RANDOM))
(HW_RANDOM && ((X86 || IA64) && PCI)) || (((HW_RANDOM && ((X86 || IA64) && PCI)) && HW_RANDOM) => HW_RANDOM_INTEL)
(HW_RANDOM && (X86 && PCI)) || (HW_RANDOM_AMD => ((HW_RANDOM && (X86 && PCI)) && HW_RANDOM))
(HW_RANDOM && (X86 && PCI)) || (((HW_RANDOM && (X86 && PCI)) && HW_RANDOM) => HW_RANDOM_AMD)
(HW_RANDOM && (X86_32 && PCI)) || (HW_RANDOM_GEODE => ((HW_RANDOM && (X86_32 && PCI)) && HW_RANDOM))
(HW_RANDOM && (X86_32 && PCI)) || (((HW_RANDOM && (X86_32 && PCI)) && HW_RANDOM) => HW_RANDOM_GEODE)
(HW_RANDOM && SPARC64) || (HW_RANDOM_N2RNG => ((HW_RANDOM && SPARC64) && HW_RANDOM))
(HW_RANDOM && SPARC64) || (((HW_RANDOM && SPARC64) && HW_RANDOM) => HW_RANDOM_N2RNG)
(HW_RANDOM && X86) || (HW_RANDOM_VIA => ((HW_RANDOM && X86) && HW_RANDOM))
(HW_RANDOM && X86) || (((HW_RANDOM && X86) && HW_RANDOM) => HW_RANDOM_VIA)
(HW_RANDOM && ARCH_IXP4XX) || (HW_RANDOM_IXP4XX => ((HW_RANDOM && ARCH_IXP4XX) && HW_RANDOM))
(HW_RANDOM && ARCH_IXP4XX) || (((HW_RANDOM && ARCH_IXP4XX) && HW_RANDOM) => HW_RANDOM_IXP4XX)
(HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)) || (HW_RANDOM_OMAP => ((HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)) && HW_RANDOM))
(HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)) || (((HW_RANDOM && (ARCH_OMAP16XX || ARCH_OMAP24XX)) && HW_RANDOM) => HW_RANDOM_OMAP)
(HW_RANDOM && CPU_CAVIUM_OCTEON) || (HW_RANDOM_OCTEON => ((HW_RANDOM && CPU_CAVIUM_OCTEON) && HW_RANDOM))
(HW_RANDOM && CPU_CAVIUM_OCTEON) || (((HW_RANDOM && CPU_CAVIUM_OCTEON) && HW_RANDOM) => HW_RANDOM_OCTEON)
(HW_RANDOM && PPC_PASEMI) || (HW_RANDOM_PASEMI => ((HW_RANDOM && PPC_PASEMI) && HW_RANDOM))
(HW_RANDOM && PPC_PASEMI) || (((HW_RANDOM && PPC_PASEMI) && HW_RANDOM) => HW_RANDOM_PASEMI)
(HW_RANDOM && VIRTIO) || ~HW_RANDOM_VIRTIO
(HW_RANDOM && SOC_TX4939) || (HW_RANDOM_TX4939 => ((HW_RANDOM && SOC_TX4939) && HW_RANDOM))
(HW_RANDOM && SOC_TX4939) || (((HW_RANDOM && SOC_TX4939) && HW_RANDOM) => HW_RANDOM_TX4939)
(HW_RANDOM && ARCH_HAS_RNGA) || ~HW_RANDOM_MXC_RNGA
(ATARI || (X86 || ((ARM && RTC_DRV_CMOS) || GENERIC_NVRAM))) || (NVRAM => ((ATARI_SCSI && (SCSI_LOWLEVEL && (ATARI && SCSI))) || (THINKPAD_ACPI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))))
(ATARI || (X86 || ((ARM && RTC_DRV_CMOS) || GENERIC_NVRAM))) || ((ATARI_SCSI && (SCSI_LOWLEVEL && (ATARI && SCSI))) => NVRAM)
(~RTC_LIB && (~PPC && (~PARISC && (~IA64 && (~M68K && (~SPARC && (~FRV && (~ARM && (~SUPERH && (~S390 && (~AVR32 && ~BLACKFIN))))))))))) || ~RTC
(~RTC_LIB && (SPARC32 && PCI)) || ~JS_RTC
(~RTC_LIB && GEN_RTC) || ~GEN_RTC_X
(~RTC_LIB && (~IA64 && (~ARM && (~M32R && (~MIPS && (~SPARC && (~FRV && (~S390 && (~SUPERH && (~AVR32 && ~BLACKFIN)))))))))) || ~GEN_RTC
(~RTC_LIB && IA64) || ~EFI_RTC
(~RTC_LIB && (M32R && (PLAT_M32700UT || PLAT_OPSPUT))) || ~DS1302
ISA || ~DTLK
(XILINX_VIRTEX || MICROBLAZE) || ~XILINX_HWICAP
PCI || ~APPLICOM
(EXPERIMENTAL && (X86 && (PCI && (INPUT && ~c64BIT)))) || ~SONYPI
TANBAC_TB022X || ~GPIO_TB0219
(HOTPLUG && PCMCIA) || ~SYNCLINK_CS
(HOTPLUG && PCMCIA) || ~CARDMAN_4000
(HOTPLUG && PCMCIA) || ~CARDMAN_4040
(HOTPLUG && (PCMCIA && NETDEVICES)) || ~IPWIRELESS
X86 || ~MWAVE
SCx200 || ~SCx200_GPIO
X86 || (PC8736x_GPIO => (X86 && SCx200_GPIO))
X86 || ((X86 && SCx200_GPIO) => PC8736x_GPIO)
X86_32 || (NSC_GPIO => ((SCx200_GPIO && SCx200) || (PC8736x_GPIO && X86)))
X86_32 || ((SCx200_GPIO && SCx200) => NSC_GPIO)
X86_32 || ((PC8736x_GPIO && X86) => NSC_GPIO)
X86_32 || ~CS5535_GPIO
RAW_DRIVER || ~MAX_RAW_DEVS
BLOCK || ~RAW_DRIVER
HPET || (HPET_MMAP => HPET)
HPET || (HPET => HPET_MMAP)
(ACPI && (X86 || IA64)) || ~HPET
(X86 || (IA64 || (PPC64 || S390))) || ~HANGCHECK_TIMER
(IA64_GENERIC || IA64_SGI_SN2) || (MMTIMER => (IA64_GENERIC || IA64_SGI_SN2))
(IA64_GENERIC || IA64_SGI_SN2) || ((IA64_GENERIC || IA64_SGI_SN2) => MMTIMER)
X86_UV || (UV_MMTIMER => X86_UV)
X86_UV || (X86_UV => UV_MMTIMER)
(TCG_TPM && PNP) || (TCG_TIS => (IMA && ACPI))
(TCG_TPM && PNP) || ((IMA && ACPI) => TCG_TIS)
TCG_TPM || ~TCG_NSC
TCG_TPM || ~TCG_ATMEL
(TCG_TPM && PNP) || ~TCG_INFINEON
(HAS_IOMEM && EXPERIMENTAL) || (TCG_TPM => (IMA && ACPI))
(HAS_IOMEM && EXPERIMENTAL) || ((IMA && ACPI) => TCG_TPM)
(EXPERIMENTAL && X86) || ~TELCLOCK
DEVPORT => (~M68K && (ISA || PCI))
(~M68K && (ISA || PCI)) => DEVPORT
TN3270 || ~TN3270_TTY
TN3270 || ~TN3270_FS
(TN3270 && TN3270_TTY) || ~TN3270_CONSOLE
CCW || ~TN3270
TN3215 || ~TN3215_CONSOLE
CCW || ~TN3215
CCW_CONSOLE => (TN3215_CONSOLE || TN3270_CONSOLE)
(TN3215_CONSOLE || TN3270_CONSOLE) => CCW_CONSOLE
SCLP_TTY || ~SCLP_CONSOLE
S390 || ~SCLP_TTY
SCLP_VT220_TTY || ~SCLP_VT220_CONSOLE
S390 || ~SCLP_VT220_TTY
S390 || ~SCLP_CPI
S390 || ~SCLP_ASYNC
(S390_TAPE && BLOCK) || ~S390_TAPE_BLOCK
S390_TAPE || ~S390_TAPE_34XX
S390_TAPE || ~S390_TAPE_3590
CCW || ~S390_TAPE
IUCV || ~VMLOGRDR
S390 || ~VMCP
IUCV || ~MONREADER
S390 || (MONWRITER => S390)
S390 || (S390 => MONWRITER)
S390 || (S390_VMUR => S390)
S390 || (S390 => S390_VMUR)
I2C_BOARDINFO => I2C
I2C => I2C_BOARDINFO
I2C || (I2C_COMPAT => I2C)
I2C || (I2C => I2C_COMPAT)
I2C || ~I2C_CHARDEV
(I2C && ~I2C_HELPER_AUTO) || (I2C_ALGOBIT => (((((((((((((((((((((((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) || (SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET))))) || (I2C_VERSATILE && (I2C && (ARCH_VERSATILE || ARCH_REALVIEW)))) || (FB_VIA && (HAS_IOMEM && (FB && PCI)))) || (I2C_IXP2000 && (I2C && ARCH_IXP2000))) || (I2C_PARPORT_LIGHT && I2C)) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (I2C_ACORN && (I2C && ARCH_ACORN))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (I2C_SIMTEC && I2C)) || (DRM && (HAS_IOMEM && ((AGP || ~AGP) && (PCI && (~EMULATED_CMPXCHG && MMU)))))) || (I2C_PARPORT && (I2C && PARPORT))) || (DVB_PLUTO2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C)))))) || (SCx200_I2C && (I2C && SCx200_GPIO))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))))) || (I2C_HYDRA && (I2C && (PCI && (PPC_CHRP && EXPERIMENTAL))))) || (FB_DDC && (HAS_IOMEM && FB))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))) || (I2C_VOODOO3 && (I2C && PCI))) || (IEEE1394_PCILYNX && ((PCI || BROKEN) && (PCI && (IEEE1394 && I2C))))) || (I2C_GPIO && (I2C && GENERIC_GPIO))) || (I2C_VIA && (I2C && (PCI && EXPERIMENTAL)))))
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_VERSATILE && (I2C && (ARCH_VERSATILE || ARCH_REALVIEW))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((FB_VIA && (HAS_IOMEM && (FB && PCI))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_IXP2000 && (I2C && ARCH_IXP2000)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_PARPORT_LIGHT && I2C) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_ACORN && (I2C && ARCH_ACORN)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_SIMTEC && I2C) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_PARPORT && (I2C && PARPORT)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((DVB_PLUTO2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((SCx200_I2C && (I2C && SCx200_GPIO)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C)))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_HYDRA && (I2C && (PCI && (PPC_CHRP && EXPERIMENTAL)))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((FB_DDC && (HAS_IOMEM && FB)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2))))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_VOODOO3 && (I2C && PCI)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((IEEE1394_PCILYNX && ((PCI || BROKEN) && (PCI && (IEEE1394 && I2C)))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_GPIO && (I2C && GENERIC_GPIO)) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_VIA && (I2C && (PCI && EXPERIMENTAL))) => I2C_ALGOBIT)
(I2C && ~I2C_HELPER_AUTO) || (I2C_ALGOPCF => (I2C_ELEKTOR && (I2C && (ISA && BROKEN_ON_SMP))))
(I2C && ~I2C_HELPER_AUTO) || ((I2C_ELEKTOR && (I2C && (ISA && BROKEN_ON_SMP))) => I2C_ALGOPCF)
(I2C && ~I2C_HELPER_AUTO) || (I2C_ALGOPCA => ((I2C_PCA_PLATFORM && I2C) || (I2C_PCA_ISA && (I2C && ISA))))
(I2C && ~I2C_HELPER_AUTO) || ((I2C_PCA_PLATFORM && I2C) => I2C_ALGOPCA)
(I2C && ~I2C_HELPER_AUTO) || ((I2C_PCA_ISA && (I2C && ISA)) => I2C_ALGOPCA)
I2C || (I2C_HELPER_AUTO => I2C)
I2C || (I2C => I2C_HELPER_AUTO)
(I2C && PCI) || ~I2C_ALI1535
(I2C && (PCI && EXPERIMENTAL)) || ~I2C_ALI1563
(I2C && PCI) || ~I2C_ALI15X3
(I2C && (I2C_AMD756 && (X86 && EXPERIMENTAL))) || ~I2C_AMD756_S4882
(I2C && PCI) || ~I2C_AMD756
(I2C && PCI) || ~I2C_AMD8111
(I2C && PCI) || ~I2C_I801
(I2C && PCI) || ~I2C_ISCH
(I2C && PCI) || ~I2C_PIIX4
(I2C && (I2C_NFORCE2 && (X86 && EXPERIMENTAL))) || ~I2C_NFORCE2_S4985
(I2C && PCI) || ~I2C_NFORCE2
(I2C && PCI) || ~I2C_SIS5595
(I2C && PCI) || ~I2C_SIS630
(I2C && PCI) || ~I2C_SIS96X
(I2C && (PCI && EXPERIMENTAL)) || ~I2C_VIA
(I2C && PCI) || ~I2C_VIAPRO
(I2C && ACPI) || ~I2C_SCMI
(I2C && (PCI && (PPC_CHRP && EXPERIMENTAL))) || ~I2C_HYDRA
(I2C && PPC_PMAC) || (I2C_POWERMAC => (((((((WINDFARM_PM112 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU)))) || (WINDFARM_PM81 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU)))))) || (WINDFARM_PM121 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU))))) || (WINDFARM_PM91 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU)))))) || (SND_AOA_ONYX && (SOUND && (~M68K && (SND && SND_AOA))))) || (SND_AOA_TAS && (SOUND && (~M68K && (SND && SND_AOA))))) || (I2C && PPC_PMAC)))
(I2C && PPC_PMAC) || ((WINDFARM_PM112 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU)))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((WINDFARM_PM81 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU))))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((WINDFARM_PM121 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && PMAC_SMU)))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((WINDFARM_PM91 && (MACINTOSH_DRIVERS && (WINDFARM && (I2C && (CPU_FREQ_PMAC64 && PMAC_SMU))))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((SND_AOA_ONYX && (SOUND && (~M68K && (SND && SND_AOA)))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((SND_AOA_TAS && (SOUND && (~M68K && (SND && SND_AOA)))) => I2C_POWERMAC)
(I2C && PPC_PMAC) || ((I2C && PPC_PMAC) => I2C_POWERMAC)
(I2C && (ARCH_AT91 && (EXPERIMENTAL && BROKEN))) || ~I2C_AT91
(I2C && (SOC_AU1550 || SOC_AU1200)) || ~I2C_AU1550
(I2C && I2C_BLACKFIN_TWI) || ~I2C_BLACKFIN_TWI_CLK_KHZ
(I2C && (BLACKFIN && (~BF561 && (~BF531 && (~BF532 && ~BF533))))) || ~I2C_BLACKFIN_TWI
(I2C && ((CPM1 || CPM2) && OF_I2C)) || ~I2C_CPM
(I2C && ARCH_DAVINCI) || ~I2C_DAVINCI
(I2C && HAVE_CLK) || ~I2C_DESIGNWARE
(I2C && GENERIC_GPIO) || ~I2C_GPIO
(I2C && SH_HIGHLANDER) || ~I2C_HIGHLANDER
(I2C && c4xx) || ~I2C_IBM_IIC
(I2C && ARCH_MXC) || ~I2C_IMX
(I2C && (ARCH_IOP32X || (ARCH_IOP33X || (ARCH_IXP4XX || ARCH_IOP13XX)))) || ~I2C_IOP3XX
(I2C && ARCH_IXP2000) || ~I2C_IXP2000
(I2C && PPC32) || ~I2C_MPC
(I2C && ((MV64X60 || PLAT_ORION) && EXPERIMENTAL)) || ~I2C_MV64XXX
(I2C && EXPERIMENTAL) || ~I2C_OCORES
(I2C && ARCH_OMAP) || (I2C_OMAP => (I2C && (ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK))))
(I2C && ARCH_OMAP) || ((I2C && (ARCH_OMAP && (MACH_OMAP_H3 || MACH_OMAP_OSK))) => I2C_OMAP)
(I2C && (PPC_PASEMI && PCI)) || ~I2C_PASEMI
(I2C && ARCH_PNX4008) || ~I2C_PNX
(I2C && I2C_PXA) || ~I2C_PXA_SLAVE
(I2C && (ARCH_PXA || ARCH_MMP)) || ~I2C_PXA
(I2C && (ARCH_S3C2410 || ARCH_S3C64XX)) || ~I2C_S3C2410
(I2C && XTENSA_VARIANT_S6000) || ~I2C_S6000
(I2C && CPU_SUBTYPE_SH7760) || ~I2C_SH7760
(I2C && SUPERH) || ~I2C_SH_MOBILE
I2C || ~I2C_SIMTEC
(I2C && MACH_U300) || (I2C_STU300 => (I2C && MACH_U300))
(I2C && MACH_U300) || ((I2C && MACH_U300) => I2C_STU300)
(I2C && (ARCH_VERSATILE || ARCH_REALVIEW)) || ~I2C_VERSATILE
(I2C && PARPORT) || ~I2C_PARPORT
I2C || ~I2C_PARPORT_LIGHT
(I2C && EXPERIMENTAL) || ~I2C_TAOS_EVM
(I2C && USB) || ~I2C_TINY_USB
(I2C && PCI) || ~I2C_VOODOO3
(I2C && ARCH_ACORN) || (I2C_ACORN => (I2C && ARCH_ACORN))
(I2C && ARCH_ACORN) || ((I2C && ARCH_ACORN) => I2C_ACORN)
(I2C && (ISA && BROKEN_ON_SMP)) || ~I2C_ELEKTOR
(I2C && ISA) || ~I2C_PCA_ISA
I2C || ~I2C_PCA_PLATFORM
(I2C && PMC_MSP) || ~I2C_PMCMSP
(I2C && SIBYTE_SB1xxx_SOC) || ~I2C_SIBYTE
(I2C && EXPERIMENTAL) || ~I2C_STUB
(I2C && SCx200_I2C) || ~SCx200_I2C_SCL
(I2C && SCx200_I2C) || ~SCx200_I2C_SDA
(I2C && SCx200_GPIO) || ~SCx200_I2C
(I2C && (X86_32 && PCI)) || ~SCx200_ACB
(I2C && EXPERIMENTAL) || ~DS1682
(I2C && EXPERIMENTAL) || ~SENSORS_TSL2550
I2C || ~I2C_DEBUG_CORE
I2C || ~I2C_DEBUG_ALGO
I2C || ~I2C_DEBUG_BUS
I2C || ~I2C_DEBUG_CHIP
HAS_IOMEM || (I2C => (((((((SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) || (FB_VIA && (HAS_IOMEM && (FB && PCI)))) || (FB_DDC && (HAS_IOMEM && FB))) || (SND_AOA_ONYX && (SOUND && (~M68K && (SND && SND_AOA))))) || (SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S)))))) || (SND_AOA_TAS && (SOUND && (~M68K && (SND && SND_AOA))))) || (DRM && (HAS_IOMEM && ((AGP || ~AGP) && (PCI && (~EMULATED_CMPXCHG && MMU)))))))
HAS_IOMEM || ((SFC && (NETDEVICES && (NETDEV_10000 && (PCI && INET)))) => I2C)
HAS_IOMEM || ((FB_VIA && (HAS_IOMEM && (FB && PCI))) => I2C)
HAS_IOMEM || ((FB_DDC && (HAS_IOMEM && FB)) => I2C)
HAS_IOMEM || ((SND_AOA_ONYX && (SOUND && (~M68K && (SND && SND_AOA)))) => I2C)
HAS_IOMEM || ((SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) => I2C)
HAS_IOMEM || ((SND_AOA_TAS && (SOUND && (~M68K && (SND && SND_AOA)))) => I2C)
(SPI && DEBUG_KERNEL) || ~SPI_DEBUG
SPI_MASTER => (SPI && SPI)
(SPI && SPI) => SPI_MASTER
(SPI && (SPI_MASTER && (ARCH_AT91 || AVR32))) || ~SPI_ATMEL
(SPI && (SPI_MASTER && BLACKFIN)) || ~SPI_BFIN
(SPI && (SPI_MASTER && ((SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL))) || ~SPI_AU1550
(SPI && SPI_MASTER) || (SPI_BITBANG => (((((((((((SPI_S3C24XX_GPIO && (SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL)))) || (SPI_IMX && (SPI && (SPI_MASTER && ARCH_MXC)))) || (SPI_LM70_LLP && (SPI && (SPI_MASTER && (PARPORT && EXPERIMENTAL))))) || (SPI_PPC4xx && (SPI && (PPC32 && (c4xx && SPI_MASTER))))) || (SPI_SH_SCI && (SPI && (SPI_MASTER && SUPERH)))) || (SPI_GPIO && (SPI && (SPI_MASTER && GENERIC_GPIO)))) || (SPI_OMAP_UWIRE && (SPI && (SPI_MASTER && ARCH_OMAP1)))) || (SPI_XILINX && (SPI && (SPI_MASTER && ((XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL))))) || (SPI_AU1550 && (SPI && (SPI_MASTER && ((SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL))))) || (SPI_S3C24XX && (SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL))))) || (SPI_BUTTERFLY && (SPI && (SPI_MASTER && PARPORT)))))
(SPI && SPI_MASTER) || ((SPI_S3C24XX_GPIO && (SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_IMX && (SPI && (SPI_MASTER && ARCH_MXC))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_LM70_LLP && (SPI && (SPI_MASTER && (PARPORT && EXPERIMENTAL)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_PPC4xx && (SPI && (PPC32 && (c4xx && SPI_MASTER)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_SH_SCI && (SPI && (SPI_MASTER && SUPERH))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_GPIO && (SPI && (SPI_MASTER && GENERIC_GPIO))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_OMAP_UWIRE && (SPI && (SPI_MASTER && ARCH_OMAP1))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_XILINX && (SPI && (SPI_MASTER && ((XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_AU1550 && (SPI && (SPI_MASTER && ((SOC_AU1550 || SOC_AU1200) && EXPERIMENTAL)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_S3C24XX && (SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL)))) => SPI_BITBANG)
(SPI && SPI_MASTER) || ((SPI_BUTTERFLY && (SPI && (SPI_MASTER && PARPORT))) => SPI_BITBANG)
(SPI && (SPI_MASTER && PARPORT)) || ~SPI_BUTTERFLY
(SPI && (SPI_MASTER && GENERIC_GPIO)) || ~SPI_GPIO
(SPI && (SPI_MASTER && ARCH_MXC)) || ~SPI_IMX
(SPI && (SPI_MASTER && (PARPORT && EXPERIMENTAL))) || ~SPI_LM70_LLP
(SPI && (SPI_MASTER && (PPC_MPC52xx && EXPERIMENTAL))) || ~SPI_MPC52xx_PSC
(SPI && (SPI_MASTER && FSL_SOC)) || ~SPI_MPC8xxx
(SPI && (SPI_MASTER && ARCH_OMAP1)) || ~SPI_OMAP_UWIRE
(SPI && (SPI_MASTER && (ARCH_OMAP24XX || ARCH_OMAP34XX))) || ~SPI_OMAP24XX
(SPI && (SPI_MASTER && (PLAT_ORION && EXPERIMENTAL))) || ~SPI_ORION
(SPI && (SPI_MASTER && (ARM_AMBA && EXPERIMENTAL))) || (SPI_PL022 => ((((SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) || (~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW)))))) || ((~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && INTEGRATOR_IMPD1)))))) || (((~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && INTEGRATOR_IMPD1))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW)))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_VERSATILE)))))))
(SPI && (SPI_MASTER && (ARM_AMBA && EXPERIMENTAL))) || ((SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) => SPI_PL022)
(SPI && (SPI_MASTER && (ARM_AMBA && EXPERIMENTAL))) || ((~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW))))) => SPI_PL022)
(SPI && (SPI_MASTER && (ARM_AMBA && EXPERIMENTAL))) || (((~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && INTEGRATOR_IMPD1))))) => SPI_PL022)
(SPI && (SPI_MASTER && (ARM_AMBA && EXPERIMENTAL))) || ((((~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && INTEGRATOR_IMPD1))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_REALVIEW)))) && ~SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && MACH_U300)))) && (SPI && (SPI_MASTER && (ARM_AMBA && (EXPERIMENTAL && ARCH_VERSATILE))))) => SPI_PL022)
(SPI && (PPC32 && (c4xx && SPI_MASTER))) || ~SPI_PPC4xx
(SPI && (SPI_MASTER && (ARCH_PXA && EXPERIMENTAL))) || ~SPI_PXA2XX
(SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL))) || ~SPI_S3C24XX
(SPI && (SPI_MASTER && (ARCH_S3C2410 && EXPERIMENTAL))) || ~SPI_S3C24XX_GPIO
(SPI && (SPI_MASTER && SUPERH)) || ~SPI_SH_SCI
(SPI && (ARCH_STMP3XXX && SPI_MASTER)) || ~SPI_STMP3XXX
(SPI && (SPI_MASTER && (GENERIC_GPIO && CPU_TX49XX))) || ~SPI_TXX9
(SPI && (SPI_MASTER && ((XILINX_VIRTEX || MICROBLAZE) && EXPERIMENTAL))) || ~SPI_XILINX
(SPI && (SPI_MASTER && EXPERIMENTAL)) || ~SPI_SPIDEV
(SPI && (SPI_MASTER && SYSFS)) || ~SPI_TLE62X0
HAS_IOMEM || ~SPI
PPS || ~PPS_DEBUG
EXPERIMENTAL || ~PPS
ARCH_WANT_OPTIONAL_GPIOLIB => X86
X86 => ARCH_WANT_OPTIONAL_GPIOLIB
~ARCH_REQUIRE_GPIOLIB
(GPIOLIB && DEBUG_KERNEL) || ~DEBUG_GPIO
(GPIOLIB && (SYSFS && EXPERIMENTAL)) || ~GPIO_SYSFS
(GPIOLIB && ARM_AMBA) || ~GPIO_PL061
(GPIOLIB && (PPC_OF || MICROBLAZE)) || ~GPIO_XILINX
(GPIOLIB && CPU_VR41XX) || (GPIO_VR41XX => (GPIO_TB0219 && TANBAC_TB022X))
(GPIOLIB && CPU_VR41XX) || ((GPIO_TB0219 && TANBAC_TB022X) => GPIO_VR41XX)
(GPIOLIB && I2C) || ~GPIO_MAX732X
(GPIOLIB && I2C) || (GPIO_PCA953X => ((SOC_CAMERA_MT9V022 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && (I2C && MT9V022_PCA9536_SWITCH)))))) || (SOC_CAMERA_MT9M001 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && (I2C && MT9M001_PCA9536_SWITCH))))))))
(GPIOLIB && I2C) || ((SOC_CAMERA_MT9V022 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && (I2C && MT9V022_PCA9536_SWITCH)))))) => GPIO_PCA953X)
(GPIOLIB && I2C) || ((SOC_CAMERA_MT9M001 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && (I2C && MT9M001_PCA9536_SWITCH)))))) => GPIO_PCA953X)
(GPIOLIB && I2C) || ~GPIO_PCF857X
(GPIOLIB && TWL4030_CORE) || ~GPIO_TWL4030
(GPIOLIB && MFD_WM831X) || ~GPIO_WM831X
(GPIOLIB && PMIC_ADP5520) || ~GPIO_ADP5520
(GPIOLIB && (PCI && ~VIDEO_BT848)) || ~GPIO_BT8XX
(GPIOLIB && PCI) || ~GPIO_LANGWELL
(GPIOLIB && SPI_MASTER) || ~GPIO_MAX7301
(GPIOLIB && SPI_MASTER) || ~GPIO_MCP23S08
(GPIOLIB && SPI_MASTER) || ~GPIO_MC33880
(GPIOLIB && UCB1400_CORE) || ~GPIO_UCB1400
(ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB) || (GPIOLIB => ARCH_REQUIRE_GPIOLIB)
(ARCH_WANT_OPTIONAL_GPIOLIB || ARCH_REQUIRE_GPIOLIB) || (ARCH_REQUIRE_GPIOLIB => GPIOLIB)
(W1 && CONNECTOR) || (W1_CON => (W1 && CONNECTOR))
(W1 && CONNECTOR) || ((W1 && CONNECTOR) => W1_CON)
(W1 && PCI) || ~W1_MASTER_MATROX
(W1 && USB) || ~W1_MASTER_DS2490
(W1 && (I2C && EXPERIMENTAL)) || ~W1_MASTER_DS2482
(W1 && ARCH_MXC) || ~W1_MASTER_MXC
(W1 && (ARM && HAVE_CLK)) || ~W1_MASTER_DS1WM
(W1 && GENERIC_GPIO) || ~W1_MASTER_GPIO
(W1 && (ARCH_OMAP2430 || ARCH_OMAP34XX)) || ~HDQ_MASTER_OMAP
W1 || ~W1_SLAVE_THERM
W1 || ~W1_SLAVE_SMEM
W1 || ~W1_SLAVE_DS2431
(W1 && W1_SLAVE_DS2433) || ~W1_SLAVE_DS2433_CRC
W1 || ~W1_SLAVE_DS2433
W1 || (W1_SLAVE_DS2760 => (BATTERY_DS2760 && POWER_SUPPLY))
W1 || ((BATTERY_DS2760 && POWER_SUPPLY) => W1_SLAVE_DS2760)
W1 || ~W1_SLAVE_BQ27000
HAS_IOMEM || (W1 => (BATTERY_DS2760 && POWER_SUPPLY))
HAS_IOMEM || ((BATTERY_DS2760 && POWER_SUPPLY) => W1)
POWER_SUPPLY || ~POWER_SUPPLY_DEBUG
(POWER_SUPPLY && ~S390) || ~PDA_POWER
(POWER_SUPPLY && APM_EMULATION) || ~APM_POWER
(POWER_SUPPLY && MFD_WM831X) || ~WM831X_POWER
(POWER_SUPPLY && MFD_WM8350) || ~WM8350_POWER
POWER_SUPPLY || ~BATTERY_DS2760
(POWER_SUPPLY && I2C) || ~BATTERY_DS2782
(POWER_SUPPLY && (PPC32 && ADB_PMU)) || ~BATTERY_PMU
(POWER_SUPPLY && (X86_32 && OLPC)) || ~BATTERY_OLPC
(POWER_SUPPLY && (MACH_TOSA && (MFD_TC6393XB && TOUCHSCREEN_WM97XX))) || ~BATTERY_TOSA
(POWER_SUPPLY && TOUCHSCREEN_WM97XX) || ~BATTERY_WM97XX
(POWER_SUPPLY && I2C) || ~BATTERY_BQ27x00
(POWER_SUPPLY && PMIC_DA903X) || ~BATTERY_DA9030
(POWER_SUPPLY && I2C) || ~BATTERY_MAX17040
(POWER_SUPPLY && MFD_PCF50633) || ~CHARGER_PCF50633
HWMON_VID => (((((((((((((((((((((SENSORS_DME1737 && (HWMON && (I2C && EXPERIMENTAL))) || (SENSORS_W83627EHF && HWMON)) || (SENSORS_LM93 && (HWMON && I2C))) || (SENSORS_LM78 && (HWMON && I2C))) || (SENSORS_W83793 && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_ASB100 && (HWMON && (X86 && (I2C && EXPERIMENTAL))))) || (SENSORS_ADM1026 && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_VT8231 && (HWMON && PCI))) || (SENSORS_W83627HF && HWMON)) || (SENSORS_W83781D && (HWMON && I2C))) || (SENSORS_SMSC47M192 && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_ADM1025 && (HWMON && I2C))) || (SENSORS_ADM9240 && (HWMON && I2C))) || (SENSORS_GL520SM && (HWMON && I2C))) || (SENSORS_PC87360 && HWMON)) || (SENSORS_LM85 && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_IT87 && HWMON)) || (SENSORS_LM87 && (HWMON && I2C))) || (SENSORS_W83791D && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_ATXP1 && (HWMON && (I2C && EXPERIMENTAL)))) || (SENSORS_VT1211 && (HWMON && EXPERIMENTAL)))
(SENSORS_DME1737 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_W83627EHF && HWMON) => HWMON_VID
(SENSORS_LM93 && (HWMON && I2C)) => HWMON_VID
(SENSORS_LM78 && (HWMON && I2C)) => HWMON_VID
(SENSORS_W83793 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_ASB100 && (HWMON && (X86 && (I2C && EXPERIMENTAL)))) => HWMON_VID
(SENSORS_ADM1026 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_VT8231 && (HWMON && PCI)) => HWMON_VID
(SENSORS_W83627HF && HWMON) => HWMON_VID
(SENSORS_W83781D && (HWMON && I2C)) => HWMON_VID
(SENSORS_SMSC47M192 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_ADM1025 && (HWMON && I2C)) => HWMON_VID
(SENSORS_ADM9240 && (HWMON && I2C)) => HWMON_VID
(SENSORS_GL520SM && (HWMON && I2C)) => HWMON_VID
(SENSORS_PC87360 && HWMON) => HWMON_VID
(SENSORS_LM85 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_IT87 && HWMON) => HWMON_VID
(SENSORS_LM87 && (HWMON && I2C)) => HWMON_VID
(SENSORS_W83791D && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_ATXP1 && (HWMON && (I2C && EXPERIMENTAL))) => HWMON_VID
(SENSORS_VT1211 && (HWMON && EXPERIMENTAL)) => HWMON_VID
HWMON || ~HWMON_DEBUG_CHIP
(HWMON && (X86 && EXPERIMENTAL)) || ~SENSORS_ABITUGURU
(HWMON && (X86 && EXPERIMENTAL)) || ~SENSORS_ABITUGURU3
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_AD7414
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_AD7418
(HWMON && (SPI_MASTER && EXPERIMENTAL)) || ~SENSORS_ADCXX
(HWMON && I2C) || ~SENSORS_ADM1021
(HWMON && I2C) || ~SENSORS_ADM1025
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADM1026
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADM1029
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADM1031
(HWMON && I2C) || ~SENSORS_ADM9240
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADT7462
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADT7470
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADT7473
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ADT7475
(HWMON && (X86 && (PCI && EXPERIMENTAL))) || ~SENSORS_K8TEMP
(HWMON && (SENSORS_AMS && ADB_PMU)) || (SENSORS_AMS_PMU => (HWMON && (SENSORS_AMS && ADB_PMU)))
(HWMON && (SENSORS_AMS && ADB_PMU)) || ((HWMON && (SENSORS_AMS && ADB_PMU)) => SENSORS_AMS_PMU)
(HWMON && (SENSORS_AMS && I2C)) || (SENSORS_AMS_I2C => (HWMON && (SENSORS_AMS && I2C)))
(HWMON && (SENSORS_AMS && I2C)) || ((HWMON && (SENSORS_AMS && I2C)) => SENSORS_AMS_I2C)
(HWMON && (PPC_PMAC && (~PPC64 && (INPUT && (((ADB_PMU && I2C) || ((ADB_PMU && ~I2C) || I2C)) && EXPERIMENTAL))))) || ~SENSORS_AMS
(HWMON && (X86 && (I2C && EXPERIMENTAL))) || ~SENSORS_ASB100
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_ATXP1
(HWMON && I2C) || ~SENSORS_DS1621
(HWMON && (PCI && EXPERIMENTAL)) || ~SENSORS_I5K_AMB
(HWMON && EXPERIMENTAL) || ~SENSORS_F71805F
(HWMON && EXPERIMENTAL) || ~SENSORS_F71882FG
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_F75375S
(HWMON && (X86 && I2C)) || ~SENSORS_FSCHMD
(HWMON && I2C) || ~SENSORS_G760A
(HWMON && I2C) || ~SENSORS_GL518SM
(HWMON && I2C) || ~SENSORS_GL520SM
(HWMON && (X86 && EXPERIMENTAL)) || ~SENSORS_CORETEMP
(HWMON && IPMI_HANDLER) || ~SENSORS_IBMAEM
(HWMON && IPMI_HANDLER) || ~SENSORS_IBMPEX
HWMON || ~SENSORS_IT87
(HWMON && I2C) || ~SENSORS_LM63
(HWMON && (SPI_MASTER && EXPERIMENTAL)) || ~SENSORS_LM70
(HWMON && I2C) || ~SENSORS_LM75
(HWMON && I2C) || ~SENSORS_LM77
(HWMON && I2C) || ~SENSORS_LM78
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_LM80
(HWMON && I2C) || ~SENSORS_LM83
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_LM85
(HWMON && I2C) || ~SENSORS_LM87
(HWMON && I2C) || ~SENSORS_LM90
(HWMON && I2C) || ~SENSORS_LM92
(HWMON && I2C) || ~SENSORS_LM93
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_LTC4215
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_LTC4245
(HWMON && I2C) || ~SENSORS_LM95241
(HWMON && SPI_MASTER) || ~SENSORS_MAX1111
(HWMON && I2C) || ~SENSORS_MAX1619
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_MAX6650
HWMON || ~SENSORS_PC87360
(HWMON && EXPERIMENTAL) || ~SENSORS_PC87427
(HWMON && I2C) || ~SENSORS_PCF8591
(HWMON && GENERIC_GPIO) || ~SENSORS_SHT15
(HWMON && SENSORS_S3C) || ~SENSORS_S3C_RAW
(HWMON && ARCH_S3C2410) || ~SENSORS_S3C
(HWMON && PCI) || ~SENSORS_SIS5595
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_DME1737
HWMON || ~SENSORS_SMSC47M1
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_SMSC47M192
(HWMON && EXPERIMENTAL) || ~SENSORS_SMSC47B397
(HWMON && I2C) || ~SENSORS_ADS7828
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_THMC50
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_TMP401
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_TMP421
(HWMON && PCI) || ~SENSORS_VIA686A
(HWMON && EXPERIMENTAL) || ~SENSORS_VT1211
(HWMON && PCI) || ~SENSORS_VT8231
(HWMON && I2C) || ~SENSORS_W83781D
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_W83791D
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_W83792D
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_W83793
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_W83L785TS
(HWMON && (I2C && EXPERIMENTAL)) || ~SENSORS_W83L786NG
HWMON || ~SENSORS_W83627HF
HWMON || ~SENSORS_W83627EHF
(HWMON && MFD_WM831X) || ~SENSORS_WM831X
(HWMON && MFD_WM8350) || ~SENSORS_WM8350
(HWMON && SPARC64) || ~SENSORS_ULTRA45
(HWMON && (INPUT && X86)) || ~SENSORS_HDAPS
(HWMON && (~ACPI && (SPI_MASTER && INPUT))) || ~SENSORS_LIS3_SPI
(HWMON && (INPUT && X86)) || ~SENSORS_APPLESMC
(HWMON && (ACPI && (X86 && EXPERIMENTAL))) || ~SENSORS_ATK0110
(HWMON && (ACPI && INPUT)) || ~SENSORS_LIS3LV02D
HAS_IOMEM || (HWMON => (((EEEPC_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (EXPERIMENTAL && ((RFKILL || ~RFKILL) && HOTPLUG_PCI))))))) || (THINKPAD_ACPI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || HAS_IOMEM))
HAS_IOMEM || (HAS_IOMEM => HWMON)
(THERMAL && (HWMON || HWMON)) || ~THERMAL_HWMON
WATCHDOG || (WATCHDOG_NOWAYOUT => (IOP_WATCHDOG && (WATCHDOG && (PLAT_IOP && (ARCH_IOP32X || ARCH_IOP33X)))))
WATCHDOG || ((IOP_WATCHDOG && (WATCHDOG && (PLAT_IOP && (ARCH_IOP32X || ARCH_IOP33X)))) => WATCHDOG_NOWAYOUT)
WATCHDOG || ~SOFT_WATCHDOG
(WATCHDOG && MFD_WM831X) || ~WM831X_WATCHDOG
(WATCHDOG && MFD_WM8350) || ~WM8350_WATCHDOG
(WATCHDOG && ARCH_AT91RM9200) || ~AT91RM9200_WATCHDOG
(WATCHDOG && (ARCH_AT91 && ~ARCH_AT91RM9200)) || ~AT91SAM9X_WATCHDOG
(WATCHDOG && FOOTBRIDGE) || ~c21285_WATCHDOG
(WATCHDOG && (FOOTBRIDGE && ARCH_NETWINDER)) || ~c977_WATCHDOG
(WATCHDOG && ARCH_IXP2000) || ~IXP2000_WATCHDOG
(WATCHDOG && ARCH_IXP4XX) || ~IXP4XX_WATCHDOG
(WATCHDOG && ARCH_KS8695) || ~KS8695_WATCHDOG
(WATCHDOG && ARCH_S3C2410) || ~S3C2410_WATCHDOG
(WATCHDOG && (ARCH_SA1100 || ARCH_PXA)) || ~SA1100_WATCHDOG
(WATCHDOG && (ARM_MPCORE_PLATFORM && LOCAL_TIMERS)) || ~MPCORE_WATCHDOG
(WATCHDOG && ARCH_EP93XX) || ~EP93XX_WATCHDOG
(WATCHDOG && (ARCH_OMAP16XX || (ARCH_OMAP24XX || ARCH_OMAP34XX))) || ~OMAP_WATCHDOG
(WATCHDOG && ARCH_PNX4008) || ~PNX4008_WATCHDOG
(WATCHDOG && PLAT_IOP) || ~IOP_WATCHDOG
(WATCHDOG && ARCH_DAVINCI) || ~DAVINCI_WATCHDOG
(WATCHDOG && (ARCH_ORION5X || ARCH_KIRKWOOD)) || ~ORION_WATCHDOG
(WATCHDOG && ARCH_U300) || (COH901327_WATCHDOG => (WATCHDOG && (ARCH_U300 && MACH_U300)))
(WATCHDOG && ARCH_U300) || ((WATCHDOG && (ARCH_U300 && MACH_U300)) => COH901327_WATCHDOG)
(WATCHDOG && TWL4030_CORE) || ~TWL4030_WATCHDOG
(WATCHDOG && ARCH_STMP3XXX) || ~STMP3XXX_WATCHDOG
(WATCHDOG && ARCH_W90X900) || ~NUC900_WATCHDOG
(WATCHDOG && ARCH_PXA_ADX) || ~ADX_WATCHDOG
(WATCHDOG && CPU_AT32AP700X) || ~AT32AP700X_WDT
(WATCHDOG && BLACKFIN) || ~BFIN_WDT
(WATCHDOG && X86) || ~ACQUIRE_WDT
(WATCHDOG && X86) || ~ADVANTECH_WDT
(WATCHDOG && (X86 && PCI)) || ~ALIM1535_WDT
(WATCHDOG && PCI) || ~ALIM7101_WDT
(WATCHDOG && MGEODE_LX) || ~GEODE_WDT
(WATCHDOG && X86) || ~SC520_WDT
(WATCHDOG && X86) || ~SBC_FITPC2_WATCHDOG
(WATCHDOG && X86) || ~EUROTECH_WDT
(WATCHDOG && X86) || ~IB700_WDT
(WATCHDOG && X86) || ~IBMASR
(WATCHDOG && X86) || ~WAFER_WDT
(WATCHDOG && (X86 && PCI)) || ~I6300ESB_WDT
(WATCHDOG && ITCO_WDT) || ~ITCO_VENDOR_SUPPORT
(WATCHDOG && ((X86 || IA64) && PCI)) || ~ITCO_WDT
(WATCHDOG && X86) || ~IT8712F_WDT
(WATCHDOG && (X86 && EXPERIMENTAL)) || ~IT87_WDT
(WATCHDOG && X86) || ~HP_WATCHDOG
(WATCHDOG && X86) || ~SC1200_WDT
(WATCHDOG && (SCx200 && PCI)) || ~SCx200_WDT
(WATCHDOG && X86) || ~PC87413_WDT
(WATCHDOG && X86_RDC321X) || ~RDC321X_WDT
(WATCHDOG && X86) || ~c60XX_WDT
(WATCHDOG && X86) || ~SBC8360_WDT
(WATCHDOG && X86_32) || ~SBC7240_WDT
(WATCHDOG && X86) || ~CPU5_WDT
(WATCHDOG && X86) || ~SMSC_SCH311X_WDT
(WATCHDOG && X86) || ~SMSC37B787_WDT
(WATCHDOG && X86) || ~W83627HF_WDT
(WATCHDOG && X86) || ~W83697HF_WDT
(WATCHDOG && X86) || ~W83697UG_WDT
(WATCHDOG && X86) || ~W83877F_WDT
(WATCHDOG && X86) || ~W83977F_WDT
(WATCHDOG && X86) || ~MACHZ_WDT
(WATCHDOG && X86) || ~SBC_EPX_C3_WATCHDOG
(WATCHDOG && BCM47XX) || ~BCM47XX_WDT
(WATCHDOG && MIKROTIK_RB532) || ~RC32434_WDT
(WATCHDOG && SGI_HAS_INDYDOG) || ~INDYDOG
(WATCHDOG && MIPS_MTX1) || ~WDT_MTX1
(WATCHDOG && SOC_PNX8335) || ~PNX833X_WDT
(WATCHDOG && CPU_RM9000) || ~WDT_RM9K_GPI
(WATCHDOG && CPU_SB1) || ~SIBYTE_WDOG
(WATCHDOG && AR7) || ~AR7_WDT
(WATCHDOG && (CPU_TX39XX || CPU_TX49XX)) || ~TXX9_WDT
(WATCHDOG && (GEF_SBC610 || (GEF_SBC310 || GEF_PPC9A))) || ~GEF_WDT
(WATCHDOG && PPC_MPC52xx) || ~MPC5200_WDT
(WATCHDOG && (PPC_8xx || (PPC_83xx || PPC_86xx))) || ~c8xxx_WDT
(WATCHDOG && MV64X60) || ~MV64X60_WDT
(WATCHDOG && WARP) || (PIKA_WDT => (WATCHDOG && WARP))
(WATCHDOG && WARP) || ((WATCHDOG && WARP) => PIKA_WDT)
(WATCHDOG && (BOOKE || c4xx)) || ~BOOKE_WDT
(WATCHDOG && PPC_RTAS) || ~WATCHDOG_RTAS
(WATCHDOG && S390) || ~ZVM_WATCHDOG
(WATCHDOG && SH_WDT) || ~SH_WDT_MMAP
(WATCHDOG && (SUPERH && (CPU_SH3 || CPU_SH4))) || ~SH_WDT
(WATCHDOG && (SPARC64 && PCI)) || ~WATCHDOG_CP1XXX
(WATCHDOG && (SPARC64 && PCI)) || ~WATCHDOG_RIO
(WATCHDOG && ISA) || ~PCWATCHDOG
(WATCHDOG && ISA) || ~MIXCOMWD
(WATCHDOG && ISA) || ~WDT
(WATCHDOG && PCI) || ~PCIPCWATCHDOG
(WATCHDOG && PCI) || ~WDTPCI
(WATCHDOG && USB) || ~USBPCWATCHDOG
SSB_POSSIBLE => (HAS_IOMEM && HAS_DMA)
(HAS_IOMEM && HAS_DMA) => SSB_POSSIBLE
SSB_POSSIBLE || (SSB => (((B44 && (NETDEVICES && (NET_ETHERNET && (SSB_POSSIBLE && HAS_DMA)))) || (B43 && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))))) || (B43LEGACY && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA))))))))
SSB_POSSIBLE || ((B44 && (NETDEVICES && (NET_ETHERNET && (SSB_POSSIBLE && HAS_DMA)))) => SSB)
SSB_POSSIBLE || ((B43 && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA)))))) => SSB)
SSB_POSSIBLE || ((B43LEGACY && (NETDEVICES && (WLAN && (SSB_POSSIBLE && (MAC80211 && (WLAN_80211 && HAS_DMA)))))) => SSB)
SSB_SPROM => ((SSB_PCIHOST && (SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE)) || (SSB_PCMCIAHOST && (SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE)))
(SSB_PCIHOST && (SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE)) => SSB_SPROM
(SSB_PCMCIAHOST && (SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE)) => SSB_SPROM
SSB_BLOCKIO => (B43_PIO && (NETDEVICES && (WLAN && (B43 && (B43_SDIO || (B43_PCMCIA || B43_FORCE_PIO))))))
(B43_PIO && (NETDEVICES && (WLAN && (B43 && (B43_SDIO || (B43_PCMCIA || B43_FORCE_PIO)))))) => SSB_BLOCKIO
SSB_PCIHOST_POSSIBLE => (SSB_POSSIBLE && (SSB && (PCI || PCI)))
SSB_B43_PCI_BRIDGE => ((B43LEGACY_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE)))) || (B43_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE)))))
(B43LEGACY_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE)))) => SSB_B43_PCI_BRIDGE
(B43_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE)))) => SSB_B43_PCI_BRIDGE
(SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) || (SSB_PCIHOST => ((((B44_PCI_AUTOSELECT && (NETDEVICES && (NET_ETHERNET && (B44 && SSB_PCIHOST_POSSIBLE)))) || (B43LEGACY_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE))))) || (B43_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE))))) || (SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE)))
(SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) || ((B44_PCI_AUTOSELECT && (NETDEVICES && (NET_ETHERNET && (B44 && SSB_PCIHOST_POSSIBLE)))) => SSB_PCIHOST)
(SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) || ((B43LEGACY_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_PCIHOST_POSSIBLE)))) => SSB_PCIHOST)
(SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) || ((B43_PCI_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_PCIHOST_POSSIBLE)))) => SSB_PCIHOST)
(SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) || ((SSB_POSSIBLE && SSB_PCIHOST_POSSIBLE) => SSB_PCIHOST)
SSB_PCMCIAHOST_POSSIBLE => (SSB_POSSIBLE && (SSB && (PCMCIA || PCMCIA)))
(SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE) || (SSB_PCMCIAHOST => (B43_PCMCIA && (NETDEVICES && (WLAN && (B43 && SSB_PCMCIAHOST_POSSIBLE)))))
(SSB_POSSIBLE && SSB_PCMCIAHOST_POSSIBLE) || ((B43_PCMCIA && (NETDEVICES && (WLAN && (B43 && SSB_PCMCIAHOST_POSSIBLE)))) => SSB_PCMCIAHOST)
SSB_SDIOHOST_POSSIBLE => (SSB_POSSIBLE && (SSB && (MMC || MMC)))
(SSB_POSSIBLE && SSB_SDIOHOST_POSSIBLE) || (SSB_SDIOHOST => (B43_SDIO && (NETDEVICES && (WLAN && (B43 && (SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL))))))
(SSB_POSSIBLE && SSB_SDIOHOST_POSSIBLE) || ((B43_SDIO && (NETDEVICES && (WLAN && (B43 && (SSB_SDIOHOST_POSSIBLE && EXPERIMENTAL))))) => SSB_SDIOHOST)
(SSB_POSSIBLE && (SSB && EMBEDDED)) || ~SSB_SILENT
(SSB_POSSIBLE && (SSB && ~SSB_SILENT)) || ~SSB_DEBUG
SSB_SERIAL => (SSB_DRIVER_MIPS && (SSB_POSSIBLE && (SSB && MIPS)))
(SSB_DRIVER_MIPS && (SSB_POSSIBLE && (SSB && MIPS))) => SSB_SERIAL
SSB_DRIVER_PCICORE_POSSIBLE => (SSB_POSSIBLE && SSB_PCIHOST)
(SSB_POSSIBLE && SSB_PCIHOST) => SSB_DRIVER_PCICORE_POSSIBLE
(SSB_POSSIBLE && (SSB_DRIVER_PCICORE && SSB_DRIVER_MIPS)) || ~SSB_PCICORE_HOSTMODE
(SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE) || (SSB_DRIVER_PCICORE => (((B43LEGACY_PCICORE_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE)))) || (B44_PCICORE_AUTOSELECT && (NETDEVICES && (NET_ETHERNET && (B44 && SSB_DRIVER_PCICORE_POSSIBLE))))) || (B43_PCICORE_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_DRIVER_PCICORE_POSSIBLE))))))
(SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE) || ((B43LEGACY_PCICORE_AUTOSELECT && (NETDEVICES && (WLAN && (B43LEGACY && SSB_DRIVER_PCICORE_POSSIBLE)))) => SSB_DRIVER_PCICORE)
(SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE) || ((B44_PCICORE_AUTOSELECT && (NETDEVICES && (NET_ETHERNET && (B44 && SSB_DRIVER_PCICORE_POSSIBLE)))) => SSB_DRIVER_PCICORE)
(SSB_POSSIBLE && SSB_DRIVER_PCICORE_POSSIBLE) || ((B43_PCICORE_AUTOSELECT && (NETDEVICES && (WLAN && (B43 && SSB_DRIVER_PCICORE_POSSIBLE)))) => SSB_DRIVER_PCICORE)
SSB_EMBEDDED => (SSB_POSSIBLE && SSB_DRIVER_MIPS)
(SSB_POSSIBLE && SSB_DRIVER_MIPS) => SSB_EMBEDDED
(SSB_POSSIBLE && SSB_DRIVER_MIPS) || ~SSB_DRIVER_EXTIF
(SSB_POSSIBLE && (SSB && MIPS)) || ~SSB_DRIVER_MIPS
(SSB_POSSIBLE && (SSB_PCIHOST_POSSIBLE && (SSB_EMBEDDED && MIPS))) || ~SSB_DRIVER_GIGE
MFD_CORE => ((((((((HTC_PASIC3 && HAS_IOMEM) || (MFD_MC13783 && (HAS_IOMEM && SPI_MASTER))) || (MFD_TC6393XB && (HAS_IOMEM && (GPIOLIB && ARM)))) || (MFD_WM8400 && (HAS_IOMEM && I2C))) || (MFD_T7L66XB && (HAS_IOMEM && (ARM && HAVE_CLK)))) || (MFD_ASIC3 && (HAS_IOMEM && (GENERIC_HARDIRQS && (GPIOLIB && ARM))))) || (MFD_TC6387XB && (HAS_IOMEM && (ARM && HAVE_CLK)))) || (MFD_WM831X && (HAS_IOMEM && I2C)))
(HTC_PASIC3 && HAS_IOMEM) => MFD_CORE
(MFD_MC13783 && (HAS_IOMEM && SPI_MASTER)) => MFD_CORE
(MFD_TC6393XB && (HAS_IOMEM && (GPIOLIB && ARM))) => MFD_CORE
(MFD_WM8400 && (HAS_IOMEM && I2C)) => MFD_CORE
(MFD_T7L66XB && (HAS_IOMEM && (ARM && HAVE_CLK))) => MFD_CORE
(MFD_ASIC3 && (HAS_IOMEM && (GENERIC_HARDIRQS && (GPIOLIB && ARM)))) => MFD_CORE
(MFD_TC6387XB && (HAS_IOMEM && (ARM && HAVE_CLK))) => MFD_CORE
(MFD_WM831X && (HAS_IOMEM && I2C)) => MFD_CORE
(HAS_IOMEM && (MFD_SM501 && GPIOLIB)) || ~MFD_SM501_GPIO
HAS_IOMEM || ~MFD_SM501
(HAS_IOMEM && (GENERIC_HARDIRQS && (GPIOLIB && ARM))) || ~MFD_ASIC3
(HAS_IOMEM && (I2C && MACH_DAVINCI_DM355_EVM)) || ~MFD_DM355EVM_MSP
(HAS_IOMEM && (GENERIC_HARDIRQS && (GPIOLIB && ARM))) || ~HTC_EGPIO
HAS_IOMEM || ~HTC_PASIC3
(HAS_IOMEM && (AC97_BUS && GPIOLIB)) || ~UCB1400_CORE
(HAS_IOMEM && (I2C && GPIOLIB)) || (TPS65010 => ((MMC_OMAP && (MMC && (ARCH_OMAP && MACH_OMAP_H2))) || (HAS_IOMEM && (I2C && (GPIOLIB && (MACH_OMAP_H2 || (MACH_OMAP_H3 || MACH_OMAP_OSK)))))))
(HAS_IOMEM && (I2C && GPIOLIB)) || ((MMC_OMAP && (MMC && (ARCH_OMAP && MACH_OMAP_H2))) => TPS65010)
(HAS_IOMEM && (I2C && GPIOLIB)) || ((HAS_IOMEM && (I2C && (GPIOLIB && (MACH_OMAP_H2 || (MACH_OMAP_H3 || MACH_OMAP_OSK))))) => TPS65010)
(HAS_IOMEM && (I2C && ARCH_OMAP24XX)) || ~MENELAUS
(HAS_IOMEM && (TWL4030_CORE && ARM)) || ~TWL4030_POWER
(HAS_IOMEM && (I2C && GENERIC_HARDIRQS)) || ~TWL4030_CORE
MFD_TMIO => (((MFD_TC6393XB && (HAS_IOMEM && (GPIOLIB && ARM))) || (MFD_TC6387XB && (HAS_IOMEM && (ARM && HAVE_CLK)))) || (MFD_T7L66XB && (HAS_IOMEM && (ARM && HAVE_CLK))))
(MFD_TC6393XB && (HAS_IOMEM && (GPIOLIB && ARM))) => MFD_TMIO
(MFD_TC6387XB && (HAS_IOMEM && (ARM && HAVE_CLK))) => MFD_TMIO
(MFD_T7L66XB && (HAS_IOMEM && (ARM && HAVE_CLK))) => MFD_TMIO
(HAS_IOMEM && (ARM && HAVE_CLK)) || ~MFD_T7L66XB
(HAS_IOMEM && (ARM && HAVE_CLK)) || ~MFD_TC6387XB
(HAS_IOMEM && (GPIOLIB && ARM)) || ~MFD_TC6393XB
(HAS_IOMEM && I2C) || ~PMIC_DA903X
(HAS_IOMEM && I2C) || ~MFD_WM8400
(HAS_IOMEM && I2C) || ~MFD_WM831X
MFD_WM8350 => (MFD_WM8350_I2C && (HAS_IOMEM && I2C))
(MFD_WM8350_I2C && (HAS_IOMEM && I2C)) => MFD_WM8350
~MFD_WM8350_CONFIG_MODE_0
~MFD_WM8350_CONFIG_MODE_1
~MFD_WM8350_CONFIG_MODE_2
~MFD_WM8350_CONFIG_MODE_3
~MFD_WM8351_CONFIG_MODE_0
~MFD_WM8351_CONFIG_MODE_1
~MFD_WM8351_CONFIG_MODE_2
~MFD_WM8351_CONFIG_MODE_3
~MFD_WM8352_CONFIG_MODE_0
~MFD_WM8352_CONFIG_MODE_1
~MFD_WM8352_CONFIG_MODE_2
~MFD_WM8352_CONFIG_MODE_3
(HAS_IOMEM && I2C) || ~MFD_WM8350_I2C
(HAS_IOMEM && I2C) || ~MFD_PCF50633
(HAS_IOMEM && SPI_MASTER) || ~MFD_MC13783
(HAS_IOMEM && MFD_PCF50633) || ~PCF50633_ADC
(HAS_IOMEM && MFD_PCF50633) || ~PCF50633_GPIO
(HAS_IOMEM && AB3100_CORE) || (AB3100_OTP => (HAS_IOMEM && AB3100_CORE))
(HAS_IOMEM && AB3100_CORE) || ((HAS_IOMEM && AB3100_CORE) => AB3100_OTP)
(HAS_IOMEM && I2C) || (AB3100_CORE => (HAS_IOMEM && (I2C && ARCH_U300)))
(HAS_IOMEM && I2C) || ((HAS_IOMEM && (I2C && ARCH_U300)) => AB3100_CORE)
(HAS_IOMEM && (GENERIC_HARDIRQS && SPI_MASTER)) || ~EZX_PCAP
MCP => (MCP_SA11X0 && ARCH_SA1100)
(MCP_SA11X0 && ARCH_SA1100) => MCP
ARCH_SA1100 || ~MCP_SA11X0
(ARCH_SA1100 && (MCP_UCB1200 && INPUT)) || ~MCP_UCB1200_TS
(ARCH_SA1100 && MCP) || ~MCP_UCB1200
REGULATOR || ~REGULATOR_DEBUG
REGULATOR || ~REGULATOR_FIXED_VOLTAGE
REGULATOR || ~REGULATOR_VIRTUAL_CONSUMER
REGULATOR || ~REGULATOR_USERSPACE_CONSUMER
REGULATOR || ~REGULATOR_BQ24022
(REGULATOR && I2C) || ~REGULATOR_MAX1586
(REGULATOR && TWL4030_CORE) || ~REGULATOR_TWL4030
(REGULATOR && MFD_WM831X) || ~REGULATOR_WM831X
(REGULATOR && MFD_WM8350) || ~REGULATOR_WM8350
(REGULATOR && MFD_WM8400) || ~REGULATOR_WM8400
(REGULATOR && PMIC_DA903X) || ~REGULATOR_DA903X
(REGULATOR && MFD_PCF50633) || ~REGULATOR_PCF50633
(REGULATOR && I2C) || ~REGULATOR_LP3971
(REGULATOR && EZX_PCAP) || ~REGULATOR_PCAP
(REGULATOR && MFD_MC13783) || ~REGULATOR_MC13783
(REGULATOR && AB3100_CORE) || (REGULATOR_AB3100 => (REGULATOR && AB3100_CORE))
(REGULATOR && AB3100_CORE) || ((REGULATOR && AB3100_CORE) => REGULATOR_AB3100)
(REGULATOR && I2C) || ~REGULATOR_TPS65023
(REGULATOR && I2C) || ~REGULATOR_TPS6507X
VIDEO_V4L2_COMMON => ((MEDIA_SUPPORT && ((I2C || ~I2C) && VIDEO_DEV)) && ((I2C || ~I2C) && VIDEO_DEV))
(MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) || (VIDEO_ALLOW_V4L1 => ((MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) && (VIDEO_DEV && VIDEO_V4L2_COMMON)))
(MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) || (((MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) && (VIDEO_DEV && VIDEO_V4L2_COMMON)) => VIDEO_ALLOW_V4L1)
(MEDIA_SUPPORT && (VIDEO_DEV && ~VIDEO_ALLOW_V4L1)) || (VIDEO_V4L1_COMPAT => (MEDIA_SUPPORT && VIDEO_DEV))
(MEDIA_SUPPORT && (VIDEO_DEV && ~VIDEO_ALLOW_V4L1)) || ((MEDIA_SUPPORT && VIDEO_DEV) => VIDEO_V4L1_COMPAT)
MEDIA_SUPPORT || ~VIDEO_DEV
(MEDIA_SUPPORT && (NET && INET)) || ~DVB_CORE
VIDEO_MEDIA => (MEDIA_SUPPORT && ((DVB_CORE && ~VIDEO_DEV) || ((VIDEO_DEV && ~DVB_CORE) || (DVB_CORE && VIDEO_DEV))))
VIDEO_SAA7146 => ((DVB_BUDGET_CORE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) || (VIDEO_SAA7146_VV && (MEDIA_SUPPORT && VIDEO_V4L2)))
(DVB_BUDGET_CORE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) => VIDEO_SAA7146
(VIDEO_SAA7146_VV && (MEDIA_SUPPORT && VIDEO_V4L2)) => VIDEO_SAA7146
VIDEO_SAA7146_VV => (((((VIDEO_HEXIUM_GEMINI && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && VIDEO_DEV))))))) || (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && I2C))))))) || (VIDEO_HEXIUM_ORION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_DEV)))))))
(VIDEO_HEXIUM_GEMINI && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C))))) => VIDEO_SAA7146_VV
(DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && VIDEO_DEV)))))) => VIDEO_SAA7146_VV
(VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && I2C)))))) => VIDEO_SAA7146_VV
(VIDEO_HEXIUM_ORION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C))))) => VIDEO_SAA7146_VV
(DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_DEV)))))) => VIDEO_SAA7146_VV
(MEDIA_SUPPORT && (VIDEO_MEDIA && MODULES)) || ~MEDIA_ATTACH
MEDIA_TUNER => ((MEDIA_SUPPORT && (VIDEO_MEDIA && I2C)) && (VIDEO_MEDIA && I2C))
((MEDIA_SUPPORT && (VIDEO_MEDIA && I2C)) && (VIDEO_MEDIA && I2C)) => MEDIA_TUNER
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_SIMPLE => ((((((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~MEDIA_TUNER_CUSTOMISE)))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE))))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~MEDIA_TUNER_CUSTOMISE)))))) || (VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))))))) || (MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~MEDIA_TUNER_CUSTOMISE))))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_SIMPLE)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_TDA8290 => (((((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) || (VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))))))) || (MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_TDA8290)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_TDA8290)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_TDA8290)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_TDA8290)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_TDA8290)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_TDA827X => (((((DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) || (MEDIA_TUNER_TDA8290 && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE)))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_TDA827X)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER_TDA8290 && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C)))) => MEDIA_TUNER_TDA827X)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))) => MEDIA_TUNER_TDA827X)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_TDA827X)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_TDA827X)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_TDA18271 => ((((((((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE))))))) || (VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))))))) || (MEDIA_TUNER_TDA8290 && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~MEDIA_TUNER_CUSTOMISE)))))))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER_TDA8290 && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C)))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~MEDIA_TUNER_CUSTOMISE))))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE)))))))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_TDA18271)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_TDA9887 => (((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) || (MEDIA_TUNER_SIMPLE && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_TDA9887)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER_SIMPLE && (MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C)))) => MEDIA_TUNER_TDA9887)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_TDA9887)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && (I2C && EXPERIMENTAL)))) || (MEDIA_TUNER_TEA5761 => ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && (EXPERIMENTAL && MEDIA_TUNER_CUSTOMISE))))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && (I2C && EXPERIMENTAL)))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_TEA5761)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && (I2C && EXPERIMENTAL)))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && (EXPERIMENTAL && MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_TEA5761)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_TEA5767 => ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_TEA5767)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_TEA5767)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MT20XX => ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_MT20XX)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MT20XX)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MT2060 => (((((((((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_AF9005 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))) || (DVB_USB_DIBUSB_MC && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9005 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIBUSB_MC && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MT2060)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MT2266 => ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MT2266)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MT2266)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MT2131 => ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_MT2131)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MT2131)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_QT1010 => (((((((DVB_USB_DTV5100 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) || (DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_AU6610 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_AF9005 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))) || (DVB_USB_GL861 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DTV5100 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AU6610 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9005 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_GL861 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_QT1010)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_XC2028 => (((((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_XC2028)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_XC2028)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_XC2028)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_XC2028)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_XC2028)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_XC5000 => ((((((VIDEO_CX231XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE)))))))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE))))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX231XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE)))))))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_XC5000)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MXL5005S => (((((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) || (DVB_USB_CE6230 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE))))))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && (INPUT && ~MEDIA_TUNER_CUSTOMISE))))))))) => MEDIA_TUNER_MXL5005S)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_CE6230 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && (EXPERIMENTAL && ~MEDIA_TUNER_CUSTOMISE)))))) => MEDIA_TUNER_MXL5005S)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MXL5005S)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MXL5005S)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MXL5005S)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MXL5007T => (((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MXL5007T)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~MEDIA_TUNER_CUSTOMISE)))))))) => MEDIA_TUNER_MXL5007T)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MXL5007T)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || (MEDIA_TUNER_MC44S803 => (((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE)))))) || (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE)))))
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_TUNER && (MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && ~MEDIA_TUNER_CUSTOMISE)))) => MEDIA_TUNER_MC44S803)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~MEDIA_TUNER_CUSTOMISE))))) => MEDIA_TUNER_MC44S803)
(MEDIA_SUPPORT && (MEDIA_TUNER_CUSTOMISE && (VIDEO_MEDIA && I2C))) || ((MEDIA_SUPPORT && (VIDEO_MEDIA && (I2C && MEDIA_TUNER_CUSTOMISE))) => MEDIA_TUNER_MC44S803)
(MEDIA_SUPPORT && MEDIA_TUNER) || ~MEDIA_TUNER_CUSTOMISE
VIDEO_V4L2 => ((MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) && (VIDEO_DEV && VIDEO_V4L2_COMMON))
((MEDIA_SUPPORT && (VIDEO_DEV && VIDEO_V4L2_COMMON)) && (VIDEO_DEV && VIDEO_V4L2_COMMON)) => VIDEO_V4L2
VIDEO_V4L1 => ((MEDIA_SUPPORT && (VIDEO_DEV && (VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1))) && (VIDEO_DEV && (VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1)))
((MEDIA_SUPPORT && (VIDEO_DEV && (VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1))) && (VIDEO_DEV && (VIDEO_V4L2_COMMON && VIDEO_ALLOW_V4L1))) => VIDEO_V4L1
VIDEOBUF_GEN => ((((((VIDEOBUF_DVB && MEDIA_SUPPORT) || (USB_ZR364XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))))) || (SOC_CAMERA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (HAS_DMA && I2C)))))) || (VIDEOBUF_DMA_SG && (MEDIA_SUPPORT && HAS_DMA))) || (VIDEOBUF_DMA_CONTIG && (MEDIA_SUPPORT && HAS_DMA))) || (VIDEOBUF_VMALLOC && MEDIA_SUPPORT))
(VIDEOBUF_DVB && MEDIA_SUPPORT) => VIDEOBUF_GEN
(USB_ZR364XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2))))) => VIDEOBUF_GEN
(SOC_CAMERA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (HAS_DMA && I2C))))) => VIDEOBUF_GEN
(VIDEOBUF_DMA_SG && (MEDIA_SUPPORT && HAS_DMA)) => VIDEOBUF_GEN
(VIDEOBUF_DMA_CONTIG && (MEDIA_SUPPORT && HAS_DMA)) => VIDEOBUF_GEN
(VIDEOBUF_VMALLOC && MEDIA_SUPPORT) => VIDEOBUF_GEN
VIDEOBUF_DMA_SG => (((((((((VIDEO_OMAP2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && ARCH_OMAP2))))) || (VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT)))))))) || (VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))))) || (VIDEO_SAA7146_VV && (MEDIA_SUPPORT && VIDEO_V4L2))) || (VIDEO_PXA27x && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PXA27x && SOC_CAMERA))))))) || (VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))
(VIDEO_OMAP2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && ARCH_OMAP2))))) => VIDEOBUF_DMA_SG
(VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => VIDEOBUF_DMA_SG
(VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND))))))) => VIDEOBUF_DMA_SG
(VIDEO_SAA7146_VV && (MEDIA_SUPPORT && VIDEO_V4L2)) => VIDEOBUF_DMA_SG
(VIDEO_PXA27x && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PXA27x && SOC_CAMERA)))))) => VIDEOBUF_DMA_SG
(VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEOBUF_DMA_SG
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEOBUF_DMA_SG
(VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEOBUF_DMA_SG
(VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEOBUF_DMA_SG
VIDEOBUF_VMALLOC => ((((((VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) || (USB_ZR364XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))))) || (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_VIVI && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (VIDEO_V4L2 && (~SPARC32 && ~SPARC64))))))) || (USB_S2255 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2))))))))
(VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEOBUF_VMALLOC
(USB_ZR364XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2))))) => VIDEOBUF_VMALLOC
(VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEOBUF_VMALLOC
(VIDEO_VIVI && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (VIDEO_V4L2 && (~SPARC32 && ~SPARC64)))))) => VIDEOBUF_VMALLOC
(USB_S2255 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2))))) => VIDEOBUF_VMALLOC
(VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2))))))) => VIDEOBUF_VMALLOC
VIDEOBUF_DMA_CONTIG => ((((((VIDEO_VPFE_CAPTURE && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI)))) || (VIDEO_MX3 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (MX3_IPU && SOC_CAMERA))))))) || (DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM)))))) || (VIDEO_MX1 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (ARCH_MX1 && SOC_CAMERA))))))) || (CAPTURE_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM)))))) || (VIDEO_SH_MOBILE_CEU && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (SOC_CAMERA && (HAS_DMA && HAVE_CLK))))))))
(VIDEO_VPFE_CAPTURE && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI)))) => VIDEOBUF_DMA_CONTIG
(VIDEO_MX3 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (MX3_IPU && SOC_CAMERA)))))) => VIDEOBUF_DMA_CONTIG
(DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEOBUF_DMA_CONTIG
(VIDEO_MX1 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (ARCH_MX1 && SOC_CAMERA)))))) => VIDEOBUF_DMA_CONTIG
(CAPTURE_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEOBUF_DMA_CONTIG
(VIDEO_SH_MOBILE_CEU && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (SOC_CAMERA && (HAS_DMA && HAVE_CLK))))))) => VIDEOBUF_DMA_CONTIG
VIDEOBUF_DVB => (((((((VIDEO_CX231XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && DVB_CORE))))))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))))) || (VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && DVB_CORE)))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && DVB_CORE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && DVB_CORE)))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))
(VIDEO_CX231XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && DVB_CORE))))))) => VIDEOBUF_DVB
(VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C)))))) => VIDEOBUF_DVB
(VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && DVB_CORE))))))) => VIDEOBUF_DVB
(VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && DVB_CORE))))) => VIDEOBUF_DVB
(VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && DVB_CORE))))) => VIDEOBUF_DVB
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEOBUF_DVB
(VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEOBUF_DVB
VIDEO_BTCX => ((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))
(VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => VIDEO_BTCX
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_BTCX
(VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_BTCX
(VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_BTCX
VIDEO_IR => ((((((((((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) || (VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))))) || (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))) || (DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && INPUT))))))) || (VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && INPUT))))))) || (VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))
(VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => VIDEO_IR
(VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND))))))) => VIDEO_IR
(VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_IR
(VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_IR
(DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && INPUT)))))) => VIDEO_IR
(VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_IR
(DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && INPUT)))))) => VIDEO_IR
(VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_IR
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_IR
(VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => VIDEO_IR
(VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_IR
(VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_IR
VIDEO_TVEEPROM => (((((((((((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) || (VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))))) || (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))))) || (VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))) || (VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))
(VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => VIDEO_TVEEPROM
(VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND))))))) => VIDEO_TVEEPROM
(VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_TVEEPROM
(VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C)))))) => VIDEO_TVEEPROM
(VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2))))))) => VIDEO_TVEEPROM
(VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_TVEEPROM
(VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_TVEEPROM
(VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_TVEEPROM
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_TVEEPROM
(VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => VIDEO_TVEEPROM
(VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_TVEEPROM
(VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_TVEEPROM
(VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_TVEEPROM
VIDEO_TUNER => (((((((((((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) || (VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))))) || (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))))) || (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && I2C))))))) || (VIDEO_USBVISION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (I2C && VIDEO_V4L2))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))) || (VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))))) || (VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))))) || (VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))))
(VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT))))))) => VIDEO_TUNER
(VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND))))))) => VIDEO_TUNER
(VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_TUNER
(VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C)))))) => VIDEO_TUNER
(VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && I2C)))))) => VIDEO_TUNER
(VIDEO_USBVISION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (I2C && VIDEO_V4L2)))))) => VIDEO_TUNER
(VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_TUNER
(VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_TUNER
(VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_TUNER
(VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_TUNER
(VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => VIDEO_TUNER
(VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_TUNER
(VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_TUNER
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)) || ~VIDEO_ADV_DEBUG
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)) || ~VIDEO_FIXED_MINOR_RANGES
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (I2C && (VIDEO_IR && ~VIDEO_HELPER_CHIPS_AUTO))))) || (VIDEO_IR_I2C => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (I2C && VIDEO_IR)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (I2C && (VIDEO_IR && ~VIDEO_HELPER_CHIPS_AUTO))))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (I2C && VIDEO_IR)))) => VIDEO_IR_I2C)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_TVAUDIO => (VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_TVAUDIO)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_TDA7432 => (VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_TDA7432)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || (VIDEO_TDA9840 => (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || ((VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_TDA9840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ~VIDEO_TDA9875
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || (VIDEO_TEA6415C => (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || ((VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_TEA6415C)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || (VIDEO_TEA6420 => (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || ((VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_TEA6420)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_MSP3400 => ((((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) || (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_MSP3400)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))) => VIDEO_MSP3400)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_MSP3400)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_MSP3400)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_CS5345 => (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => VIDEO_CS5345)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_CS53L32A => ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_CS53L32A)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_CS53L32A)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_M52790 => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_M52790)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && (I2C && EXPERIMENTAL))))) || ~VIDEO_TLV320AIC23B
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_WM8775 => (((VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_CX88 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_WM8775)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_WM8775)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_WM8775)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_WM8739 => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_WM8739)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_VP27SMPX => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_VP27SMPX)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA6588 => ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) || (VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_BT848 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_SAA6588)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_SAA7134 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO)))))))) => VIDEO_SAA6588)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ~VIDEO_ADV7180
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_BT819 => (VIDEO_ZORAN_LML33 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_LML33 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_BT819)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_BT856 => ((VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))) || (VIDEO_ZORAN_LML33 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))) => VIDEO_BT856)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_LML33 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_BT856)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_BT866 => (VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))) => VIDEO_BT866)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_KS0127 => (VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_AVS6EYES && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && (EXPERIMENTAL && VIDEO_HELPER_CHIPS_AUTO)))))) => VIDEO_KS0127)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (I2C && VIDEO_V4L2)))) || (VIDEO_OV7670 => (VIDEO_CAFE_CCIC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (I2C && VIDEO_V4L2))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (I2C && VIDEO_V4L2)))) || ((VIDEO_CAFE_CCIC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (I2C && VIDEO_V4L2))))) => VIDEO_OV7670)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (I2C && VIDEO_V4L2)))) || (VIDEO_MT9V011 => (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (I2C && VIDEO_V4L2)))) || ((VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))) => VIDEO_MT9V011)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (I2C && VIDEO_V4L2)))) || ~VIDEO_TCM825X
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA7110 => (VIDEO_ZORAN_DC10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_DC10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_SAA7110)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA711X => (((((((VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))) || (VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))) || (VIDEO_ZORAN_BUZ && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO)))))) || (VIDEO_USBVISION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (I2C && (VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO)))))))) || (VIDEO_ZORAN_LML33R10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO)))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_MXB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && (I2C && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_BUZ && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_USBVISION && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (I2C && (VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_LML33R10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_SAA711X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA717X => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_SAA717X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L1 && I2C))))) || (VIDEO_SAA7191 => (VIDEO_VINO && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (SGI_IP22 && (EXPERIMENTAL && (VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L1 && I2C))))) || ((VIDEO_VINO && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (SGI_IP22 && (EXPERIMENTAL && (VIDEO_V4L2 && VIDEO_HELPER_CHIPS_AUTO))))))) => VIDEO_SAA7191)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ~VIDEO_TVP514X
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_TVP5150 => (VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_EM28XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && (INPUT && VIDEO_HELPER_CHIPS_AUTO))))))))) => VIDEO_TVP5150)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_VPX3220 => (VIDEO_ZORAN_DC30 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_DC30 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_VPX3220)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_CX25840 => (((((VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_CX231XX && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT)))))))) => VIDEO_CX25840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_CX25840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_CX25840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_CX25840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_CX25840)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || (VIDEO_CX2341X => ((((((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))))) || (VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) || (VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))))) || (VIDEO_CX88_BLACKBIRD && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_CX88))))) || (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT)))))))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_CX25821 && (STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_PVRUSB2 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA))))))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_CX88_BLACKBIRD && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_CX88)))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && VIDEO_V4L2_COMMON)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_CX2341X)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA7127 => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_SAA7127)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_SAA7185 => (VIDEO_ZORAN_BUZ && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_BUZ && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_SAA7185)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_ADV7170 => (VIDEO_ZORAN_LML33R10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_LML33R10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_ADV7170)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_ADV7175 => ((VIDEO_ZORAN_DC10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) || (VIDEO_ZORAN_DC30 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_DC10 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_ADV7175)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_ZORAN_DC30 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN && VIDEO_HELPER_CHIPS_AUTO))))) => VIDEO_ADV7175)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || (VIDEO_THS7303 => (DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || ((DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEO_THS7303)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || (VIDEO_ADV7343 => (DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (~VIDEO_HELPER_CHIPS_AUTO && I2C)))) || ((DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEO_ADV7343)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_UPD64031A => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_UPD64031A)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || (VIDEO_UPD64083 => (VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (~VIDEO_HELPER_CHIPS_AUTO && (VIDEO_V4L2 && I2C)))) || ((VIDEO_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT)))))) => VIDEO_UPD64083)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)) || (VIDEO_HELPER_CHIPS_AUTO => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && VIDEO_V4L2)) => VIDEO_HELPER_CHIPS_AUTO)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM)))) || ~DISPLAY_DAVINCI_DM646X_EVM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM)))) || ~CAPTURE_DAVINCI_DM646X_EVM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && DISPLAY_DAVINCI_DM646X_EVM))) || (VIDEO_DAVINCI_VPIF => ((DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) || (CAPTURE_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && DISPLAY_DAVINCI_DM646X_EVM))) || ((DISPLAY_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEO_DAVINCI_VPIF)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && DISPLAY_DAVINCI_DM646X_EVM))) || ((CAPTURE_DAVINCI_DM646X_EVM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && MACH_DAVINCI_DM6467_EVM))))) => VIDEO_DAVINCI_VPIF)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (VIDEO_V4L2 && (~SPARC32 && ~SPARC64))))) || ~VIDEO_VIVI
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) || (VIDEO_VPSS_SYSTEM => (((VIDEO_DM6446_CCDC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE))))) || (VIDEO_DM355_CCDC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE)))))) || (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) || ((VIDEO_DM6446_CCDC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE))))) => VIDEO_VPSS_SYSTEM)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) || ((VIDEO_DM355_CCDC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE))))) => VIDEO_VPSS_SYSTEM)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) => VIDEO_VPSS_SYSTEM)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE)))) || (VIDEO_DM6446_CCDC => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE)))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM644x && VIDEO_VPFE_CAPTURE)))) => VIDEO_DM6446_CCDC)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE)))) || (VIDEO_DM355_CCDC => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE)))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ARCH_DAVINCI_DM355 && VIDEO_VPFE_CAPTURE)))) => VIDEO_DM355_CCDC)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && ARCH_DAVINCI))) || ~VIDEO_VPFE_CAPTURE
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_BT848 && DVB_CORE)))) || ~VIDEO_BT848_DVB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_DEV && (PCI && (I2C && (VIDEO_V4L2 && INPUT)))))) || ~VIDEO_BT848
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (ISA && VIDEO_V4L1)))) || ~VIDEO_PMS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PARPORT && VIDEO_V4L1)))) || ~VIDEO_BWQCAM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (EXPERIMENTAL && (PARPORT && VIDEO_V4L1))))) || ~VIDEO_CQCAM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PARPORT_1284 && (PARPORT && VIDEO_V4L1))))) || ~VIDEO_W9966
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PARPORT_1284 && (VIDEO_CPIA && PARPORT))))) || ~VIDEO_CPIA_PP
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CPIA && USB)))) || ~VIDEO_CPIA_USB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_V4L1))) || ~VIDEO_CPIA
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (USB && VIDEO_V4L1))))) || ~VIDEO_CPIA2
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && VIDEO_V4L2))) || ~VIDEO_SAA5246A
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && VIDEO_V4L2))) || ~VIDEO_SAA5249
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (SGI_IP22 && (EXPERIMENTAL && VIDEO_V4L2))))) || ~VIDEO_VINO
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (EXPERIMENTAL && (PCI && (VIDEO_V4L1 && VIRT_TO_BUS)))))) || ~VIDEO_STRADIS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN))) || ~VIDEO_ZORAN_DC30
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN_ZR36060))) || ~VIDEO_ZORAN_BUZ
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN_ZR36060))) || ~VIDEO_ZORAN_DC10
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN_ZR36060))) || ~VIDEO_ZORAN_LML33
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN_ZR36060))) || ~VIDEO_ZORAN_LML33R10
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_ZORAN_ZR36060 && EXPERIMENTAL)))) || ~VIDEO_ZORAN_AVS6EYES
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_ZORAN))) || ~VIDEO_ZORAN_ZR36060
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (I2C_ALGOBIT && (VIDEO_V4L2 && VIRT_TO_BUS))))) || ~VIDEO_ZORAN
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (SONY_LAPTOP && VIDEO_V4L1))))) || ~VIDEO_MEYE
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && SND)))) || ~VIDEO_SAA7134_ALSA
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && DVB_CORE)))) || ~VIDEO_SAA7134_DVB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))) || ~VIDEO_SAA7134
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (VIDEO_V4L1 && I2C))))) || ~VIDEO_MXB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C)))) || ~VIDEO_HEXIUM_ORION
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (VIDEO_V4L2 && I2C)))) || ~VIDEO_HEXIUM_GEMINI
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (SND && EXPERIMENTAL))))) || ~VIDEO_CX88_ALSA
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && VIDEO_CX88))) || ~VIDEO_CX88_BLACKBIRD
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && DVB_CORE)))) || ~VIDEO_CX88_DVB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PCI && (I2C && INPUT)))))) || ~VIDEO_CX88
VIDEO_CX88_MPEG => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB || VIDEO_CX88_BLACKBIRD))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB || VIDEO_CX88_BLACKBIRD)))) => VIDEO_CX88_MPEG
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB && DVB_MT352)))) || (VIDEO_CX88_VP3054 => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB && DVB_MT352)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB && DVB_MT352)))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88_DVB && DVB_MT352)))) => VIDEO_CX88_VP3054)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT))))))) || ~VIDEO_CX23885
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && VIDEO_V4L2)))))) || ~VIDEO_AU0828
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB)))) || ~VIDEO_FB_IVTV
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (PCI && (I2C && INPUT))))) || ~VIDEO_IVTV
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && INPUT))))))) || ~VIDEO_CX18
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && I2C))))) || ~VIDEO_SAA7164
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (M32R && VIDEO_V4L1)))) || (VIDEO_M32R_AR => (VIDEO_M32R_AR_M64278 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && PLAT_M32700UT)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (M32R && VIDEO_V4L1)))) || ((VIDEO_M32R_AR_M64278 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && PLAT_M32700UT)))) => VIDEO_M32R_AR)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && PLAT_M32700UT))) || ~VIDEO_M32R_AR_M64278
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (PCI && (I2C && VIDEO_V4L2)))) || ~VIDEO_CAFE_CCIC
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_MT9M001
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_MT9M111
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_MT9T031
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_MT9V022
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_TW9910
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && SOC_CAMERA))) || ~SOC_CAMERA_PLATFORM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (SOC_CAMERA && I2C)))) || ~SOC_CAMERA_OV772X
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (HAS_DMA && I2C)))) || ~SOC_CAMERA
MX1_VIDEO => (VIDEO_MX1 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (ARCH_MX1 && SOC_CAMERA))))))
(VIDEO_MX1 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (ARCH_MX1 && SOC_CAMERA)))))) => MX1_VIDEO
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (ARCH_MX1 && SOC_CAMERA))))) || ~VIDEO_MX1
MX3_VIDEO => (VIDEO_MX3 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (MX3_IPU && SOC_CAMERA))))))
(VIDEO_MX3 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (MX3_IPU && SOC_CAMERA)))))) => MX3_VIDEO
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (MX3_IPU && SOC_CAMERA))))) || ~VIDEO_MX3
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (PXA27x && SOC_CAMERA))))) || ~VIDEO_PXA27x
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && (SOC_CAMERA && (HAS_DMA && HAVE_CLK)))))) || ~VIDEO_SH_MOBILE_CEU
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_DEV && ARCH_OMAP2)))) || ~VIDEO_OMAP2
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (USB_VIDEO_CLASS || INPUT)))))) || (USB_VIDEO_CLASS_INPUT_EVDEV => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (USB_VIDEO_CLASS || INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && USB)))) || ~USB_VIDEO_CLASS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_M5602
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_STV06XX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GL860
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_CONEX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_ETOMS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_FINEPIX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_JEILINJ
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_MARS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_MR97310A
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_OV519
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_OV534
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_PAC207
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_PAC7311
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (USB_GSPCA && (VIDEO_V4L2 && (USB_GSPCA_SN9C20X && INPUT))))))) || ~USB_GSPCA_SN9C20X_EVDEV
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SN9C20X
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SONIXB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SONIXJ
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA500
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA501
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA505
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA506
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA508
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SPCA561
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SQ905
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SQ905C
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_STK014
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_SUNPLUS
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_T613
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_TV8532
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_VC032X
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && USB_GSPCA))))) || ~USB_GSPCA_ZC3XX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || (USB_GSPCA => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) => USB_GSPCA)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (SYSFS && EXPERIMENTAL))))))) || (VIDEO_PVRUSB2_SYSFS => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (SYSFS && EXPERIMENTAL))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (SYSFS && EXPERIMENTAL))))))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (SYSFS && EXPERIMENTAL))))))) => VIDEO_PVRUSB2_SYSFS)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && EXPERIMENTAL))))))) || (VIDEO_PVRUSB2_DVB => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && EXPERIMENTAL))))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && EXPERIMENTAL))))))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && EXPERIMENTAL))))))) => VIDEO_PVRUSB2_DVB)
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && (I2C && VIDEO_MEDIA)))))) || ~VIDEO_PVRUSB2
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_PVRUSB2_SYSFS))))) || ~VIDEO_PVRUSB2_DEBUGIFC
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_DEV))))) || ~VIDEO_HDPVR
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && SND)))))) || ~VIDEO_EM28XX_ALSA
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && DVB_CORE)))))) || ~VIDEO_EM28XX_DVB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))) || ~VIDEO_EM28XX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && SND)))))) || ~VIDEO_CX231XX_ALSA
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && DVB_CORE)))))) || ~VIDEO_CX231XX_DVB
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_DEV && (I2C && INPUT))))))) || ~VIDEO_CX231XX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (I2C && VIDEO_V4L2))))) || ~VIDEO_USBVISION
VIDEO_USBVIDEO => ((((USB_IBMCAM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1)))))) || (USB_VICAM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L1 && EXPERIMENTAL)))))))) || (USB_KONICAWC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))))) || (USB_QUICKCAM_MESSENGER && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1)))))))
(USB_IBMCAM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1)))))) => VIDEO_USBVIDEO
(USB_VICAM && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L1 && EXPERIMENTAL))))))) => VIDEO_USBVIDEO
(USB_KONICAWC && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1)))))) => VIDEO_USBVIDEO
(USB_QUICKCAM_MESSENGER && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1)))))) => VIDEO_USBVIDEO
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L1 && EXPERIMENTAL)))))) || ~USB_VICAM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_IBMCAM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_KONICAWC
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_QUICKCAM_MESSENGER
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ~USB_ET61X251
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L1 && (I2C && VIDEO_OVCAMCHIP))))))) || ~USB_W9968CF
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (I2C && VIDEO_V4L1)))))) || ~VIDEO_OVCAMCHIP
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_OV511
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_SE401
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ~USB_SN9C102
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_STV680
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ~USB_ZC0301
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && USB_PWC))))) || ~USB_PWC_DEBUG
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && VIDEO_V4L1))))) || ~USB_PWC
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (USB_PWC || INPUT)))))) || (USB_PWC_INPUT_EVDEV => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (USB_PWC || INPUT)))))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ~USB_ZR364XX
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && (VIDEO_V4L2 && EXPERIMENTAL))))) || ~USB_STKWEBCAM
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (V4L_USB_DRIVERS && (USB && VIDEO_V4L2)))) || ~USB_S2255
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && USB))) || (V4L_USB_DRIVERS => (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && USB))))
(MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && USB))) || ((MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && USB))) => V4L_USB_DRIVERS)
(MEDIA_SUPPORT && VIDEO_V4L2) || (VIDEO_CAPTURE_DRIVERS => (MEDIA_SUPPORT && VIDEO_V4L2))
(MEDIA_SUPPORT && VIDEO_V4L2) || ((MEDIA_SUPPORT && VIDEO_V4L2) => VIDEO_CAPTURE_DRIVERS)
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_CADET
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_RTRACK))) || (RADIO_RTRACK_PORT => ((MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_RTRACK))) && c20f))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_RTRACK
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_RTRACK2))) || (RADIO_RTRACK2_PORT => ((MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_RTRACK2))) && c30c))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_RTRACK2
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_AZTECH))) || ~RADIO_AZTECH_PORT
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_AZTECH
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_GEMTEK))) || (RADIO_GEMTEK_PORT => ((MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_GEMTEK))) && c34c))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_GEMTEK))) || (RADIO_GEMTEK_PROBE => (MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_GEMTEK))))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_GEMTEK
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && PCI))) || ~RADIO_GEMTEK_PCI
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && PCI))) || ~RADIO_MAXIRADIO
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && PCI))) || ~RADIO_MAESTRO
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_SF16FMI
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_SF16FMR2
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TERRATEC))) || ~RADIO_TERRATEC_PORT
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_TERRATEC
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TRUST))) || ~RADIO_TRUST_PORT
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_TRUST
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TYPHOON))) || ~RADIO_TYPHOON_PORT
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TYPHOON))) || ~RADIO_TYPHOON_MUTEFREQ
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_TYPHOON
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_ZOLTRIX))) || (RADIO_ZOLTRIX_PORT => ((MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_ZOLTRIX))) && c20c))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (ISA && VIDEO_V4L2))) || ~RADIO_ZOLTRIX
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2))) || (I2C_SI4713 => (RADIO_SI4713 && (MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2)))))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2))) || ((RADIO_SI4713 && (MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2)))) => I2C_SI4713)
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2))) || ~RADIO_SI4713
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (USB && VIDEO_V4L2))) || ~USB_DSBR
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && (USB && RADIO_SI470X)))) || ~USB_SI470X
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && (I2C && (RADIO_SI470X && ~USB_SI470X))))) || ~I2C_SI470X
(MEDIA_SUPPORT && (RADIO_ADAPTERS && VIDEO_V4L2)) || ~RADIO_SI470X
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (USB && VIDEO_V4L2))) || ~USB_MR800
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TEA5764))) || (RADIO_TEA5764_XTAL => (MEDIA_SUPPORT && (RADIO_ADAPTERS && (VIDEO_V4L2 && RADIO_TEA5764))))
(MEDIA_SUPPORT && (RADIO_ADAPTERS && (I2C && VIDEO_V4L2))) || ~RADIO_TEA5764
(MEDIA_SUPPORT && VIDEO_V4L2) || (RADIO_ADAPTERS => (MEDIA_SUPPORT && VIDEO_V4L2))
(MEDIA_SUPPORT && VIDEO_V4L2) || ((MEDIA_SUPPORT && VIDEO_V4L2) => RADIO_ADAPTERS)
(MEDIA_SUPPORT && DVB_CORE) || ~DVB_MAX_ADAPTERS
(MEDIA_SUPPORT && DVB_CORE) || ~DVB_DYNAMIC_MINORS
TTPCI_EEPROM => ((DVB_BUDGET_CORE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_DEV)))))))
(DVB_BUDGET_CORE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) => TTPCI_EEPROM
(DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_DEV)))))) => TTPCI_EEPROM
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_AV7110))) || (DVB_AV7110_OSD => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_AV7110))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_AV7110))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_AV7110))) => DVB_AV7110_OSD)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_DEV))))) || ~DVB_AV7110
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && I2C)))) || ~DVB_BUDGET
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && INPUT))))) || ~DVB_BUDGET_CI
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && VIDEO_DEV))))) || ~DVB_BUDGET_AV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && DVB_AV7110))))) || ~DVB_BUDGET_PATCH
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C)))) || ~DVB_BUDGET_CORE
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DEBUG
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_A800
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB_DIBUSB_MB))) || ~DVB_USB_DIBUSB_MB_FAULTY
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DIBUSB_MB
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DIBUSB_MC
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DIB0700
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_UMT_010
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_CXUSB
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_M920X
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_GL861
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_AU6610
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DIGITV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_VP7045
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_VP702X
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_GP8PSK
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_NOVA_T_USB2
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_TTUSB2
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DTT200U
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_OPERA1
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB_AF9005))) || ~DVB_USB_AF9005_REMOTE
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && EXPERIMENTAL)))) || ~DVB_USB_AF9005
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DW2102
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_CINERGY_T2
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_ANYSEE
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_DTV5100
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_AF9015
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && EXPERIMENTAL)))) || ~DVB_USB_CE6230
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))) || ~DVB_USB_FRIIO
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && INPUT))))) || ~DVB_USB
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && PCI))))) || ~DVB_TTUSB_BUDGET
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (INPUT && PCI))))) || ~DVB_TTUSB_DEC
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (SMS_SIANO_MDTV && (DVB_CORE && USB)))) || ~SMS_USB_DRV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (SMS_SIANO_MDTV && (DVB_CORE && MMC)))) || ~SMS_SDIO_DRV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (INPUT && HAS_DMA)))) || ~SMS_SIANO_MDTV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_B2C2_FLEXCOP && (PCI && I2C))))) || ~DVB_B2C2_FLEXCOP_PCI
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_B2C2_FLEXCOP && (USB && I2C))))) || ~DVB_B2C2_FLEXCOP_USB
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_B2C2_FLEXCOP))) || ~DVB_B2C2_FLEXCOP_DEBUG
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && I2C))) || ~DVB_B2C2_FLEXCOP
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_BT848))))) || (DVB_BT8XX => (VIDEO_BT848_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_BT848 && DVB_CORE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && VIDEO_BT848))))) || ((VIDEO_BT848_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_BT848 && DVB_CORE))))) => DVB_BT8XX)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C)))) || ~DVB_PLUTO2
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && INPUT))))) || ~DVB_DM1105
DVB_FIREDTV_IEEE1394 => ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_FIREDTV))) && IEEE1394)
((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_FIREDTV))) && IEEE1394) => DVB_FIREDTV_IEEE1394
DVB_FIREDTV_INPUT => ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_FIREDTV))) && (INPUT || (INPUT && DVB_FIREDTV)))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && IEEE1394))) || ~DVB_FIREDTV
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C)))) || ~DVB_PT1
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STB0899 => (((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STB0899)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_STB0899)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STB0899)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STB6100 => ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STB6100)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STB6100)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV090x => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV090x)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV6110x => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV6110x)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_CX24110 => ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_CX24110)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_CX24110)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_CX24123 => (((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_CX24123)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_CX24123)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_CX24123)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_MT312 => ((((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT312)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_MT312)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_MT312)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_MT312)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ZL10036 => ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ZL10036)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ZL10036)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ZL10039 => (((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10039)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ZL10039)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ZL10039)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_S5H1420 => (((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_S5H1420)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_S5H1420)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_S5H1420)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV0288 => ((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_STV0288)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0288)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_STV0288)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV0288)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STB6000 => ((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_STB6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STB6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_STB6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STB6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV0299 => ((((((((((((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) || (DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE))))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_OPERA1 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_OPERA1 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV0299)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV6110 => ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_STV6110)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV6110)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV0900 => ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_STV0900)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV0900)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA8083 => (((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE)))))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA8083)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA8083)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA8083)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA8083)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA8083)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA10086 => ((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA10086)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TDA10086)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA10086)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA10086)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA8261 => ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA8261)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA8261)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_VES1X93 => ((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_VES1X93)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_VES1X93)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_PATCH && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (DVB_AV7110 && ~DVB_FE_CUSTOMISE))))))) => DVB_VES1X93)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_VES1X93)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TUNER_ITD1000 => ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_TUNER_ITD1000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TUNER_ITD1000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TUNER_CX24113 => ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_TUNER_CX24113)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TUNER_CX24113)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA826X => ((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA826X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TDA826X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA826X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA826X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TUA6100 => ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TUA6100)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TUA6100)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_CX24116 => ((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_CX24116)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_CX24116)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_CX24116)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_CX24116)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_SI21XX => (((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_SI21XX)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_SI21XX)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_SI21XX)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_SP8870 => ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_SP8870)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_SP8870)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_SP887X => ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_SP887X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_SP887X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_CX22700 => ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_CX22700)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_CX22700)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_CX22702 => (((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_CX22702)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_CX22702)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_CX22702)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DRX397XD => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DRX397XD)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_L64781 => (((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_L64781)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_L64781)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_L64781)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA1004X => ((((((((DVB_PLUTO2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) || (DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE))))))) || (DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_PLUTO2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && I2C))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA1004X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_NXT6000 => (((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) || (DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_NXT6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_NXT6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_NXT6000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_MT352 => ((((((((((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_M920X && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_MT352)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ZL10353 => ((((((((((((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))))) || (DVB_USB_DTV5100 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_AU6610 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_GL861 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (DVB_USB_CE6230 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && EXPERIMENTAL)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DTV5100 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_AU6610 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_GL861 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CE6230 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && EXPERIMENTAL))))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ZL10353)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DIB3000MB => ((DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_DIB3000MB)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DIB3000MB)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DIB3000MC => ((((((DVB_USB_DIBUSB_MC && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) || (DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))))) || (DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))))) || (DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIBUSB_MC && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DIB3000MC)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DIB7000M => ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_DIB7000M)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DIB7000M)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DIB7000P => ((((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_DIB7000P)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_DIB7000P)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_DIB7000P)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DIB7000P)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA10048 => (((((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~DVB_FE_CUSTOMISE))))))) || (VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE)))))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA10048)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) => DVB_TDA10048)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_TDA10048)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA10048)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA10048)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_AF9013 => ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_USB)))) => DVB_AF9013)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_AF9013)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_VES1820 => ((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_VES1820)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_VES1820)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_VES1820)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_VES1820)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA10021 => ((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA10021)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA10021)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TDA10021)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA10021)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_TDA10023 => ((((((VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE))))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TDA10023)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_STV0297 => (((((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0297)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_STV0297)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0297)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_STV0297)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_STV0297)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_NXT200X => ((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_NXT200X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_NXT200X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_NXT200X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_NXT200X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_OR51211 => ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_OR51211)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_OR51211)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_OR51132 => ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_OR51132)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_OR51132)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_BCM3510 => ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_BCM3510)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_BCM3510)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LGDT330X => ((((((((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) || (VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_EM28XX_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BT8XX && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_BT848 && ~DVB_FE_CUSTOMISE))))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LGDT330X)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LGDT3304 => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LGDT3304)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LGDT3305 => (((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_LGDT3305)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_LGDT3305)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LGDT3305)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_S5H1409 => ((((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) || (VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) => DVB_S5H1409)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX18 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && (EXPERIMENTAL && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_S5H1409)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_S5H1409)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_S5H1409)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && (I2C && VIDEO_V4L2))))) || (DVB_AU8522 => ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~DVB_FE_CUSTOMISE)))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && (VIDEO_V4L2 && DVB_FE_CUSTOMISE)))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && (I2C && VIDEO_V4L2))))) || ((VIDEO_AU0828 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (I2C && (INPUT && (DVB_CORE && (USB && (VIDEO_V4L2 && ~DVB_FE_CUSTOMISE)))))))) => DVB_AU8522)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && (I2C && VIDEO_V4L2))))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && (VIDEO_V4L2 && DVB_FE_CUSTOMISE))))) => DVB_AU8522)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_S5H1411 => ((((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~DVB_FE_CUSTOMISE)))))))) || (VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE)))))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7164 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (PCI && (I2C && ~DVB_FE_CUSTOMISE))))))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_PVRUSB2_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_PVRUSB2 && (DVB_CORE && (EXPERIMENTAL && ~DVB_FE_CUSTOMISE))))))))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_S5H1411)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_S921 => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_S921)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_DIB8000 => ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_DIB8000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_DIB8000)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_PLL => ((((((((((((((((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_OPERA1 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_DM1105 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_AV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_ANYSEE && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_A800 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_OPERA1 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_AF9015 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_NOVA_T_USB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DW2102 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIBUSB_MB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_DIGITV && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_UMT_010 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_PLL)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_FE_CUSTOMISE && I2C)))) || (DVB_TUNER_DIB0070 => (((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_FE_CUSTOMISE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TUNER_DIB0070)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_FE_CUSTOMISE && I2C)))) || ((DVB_USB_DIB0700 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_TUNER_DIB0070)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_FE_CUSTOMISE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_TUNER_DIB0070)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LNBP21 => ((((((((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE)))))) || (DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE)))))))) || (DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))) || (DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE)))))))) || (VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE)))))))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_TTUSB2 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_TTUSB_BUDGET && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (USB && (I2C && (PCI && ~DVB_FE_CUSTOMISE))))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_BUDGET_CI && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_BUDGET_CORE && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_AV7110 && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (PCI && (I2C && (VIDEO_DEV && ~DVB_FE_CUSTOMISE))))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX23885 && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && (INPUT && ~DVB_FE_CUSTOMISE))))))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LNBP21)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ISL6405 => ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ISL6405)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ISL6405)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ISL6421 => ((((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) || (DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE)))))) || (VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE))))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_CX88_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ISL6421)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_B2C2_FLEXCOP && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && ~DVB_FE_CUSTOMISE))))) => DVB_ISL6421)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((VIDEO_SAA7134_DVB && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && (DVB_CORE && ~DVB_FE_CUSTOMISE)))))) => DVB_ISL6421)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ISL6421)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_ISL6423 => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_ISL6423)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LGS8GL5 => ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) || (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE))))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((DVB_USB_CXUSB && (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (DVB_USB && ~DVB_FE_CUSTOMISE))))) => DVB_LGS8GL5)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LGS8GL5)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || (DVB_LGS8GXX => (MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))))
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_FE_CUSTOMISE && (DVB_CORE && I2C)))) || ((MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && (I2C && DVB_FE_CUSTOMISE)))) => DVB_LGS8GXX)
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && (DVB_CORE && DVB_FE_CUSTOMISE))) || ~DVB_DUMMY_FE
(MEDIA_SUPPORT && (DVB_CAPTURE_DRIVERS && DVB_CORE)) || ~DVB_FE_CUSTOMISE
(MEDIA_SUPPORT && DVB_CORE) || (DVB_CAPTURE_DRIVERS => (MEDIA_SUPPORT && DVB_CORE))
(MEDIA_SUPPORT && DVB_CORE) || ((MEDIA_SUPPORT && DVB_CORE) => DVB_CAPTURE_DRIVERS)
(MEDIA_SUPPORT && (DAB && USB)) || ~USB_DABUSB
MEDIA_SUPPORT || ~DAB
HAS_IOMEM || ~MEDIA_SUPPORT
(HAS_IOMEM && (AGP && X86_32)) || ~AGP_ALI
(HAS_IOMEM && (AGP && X86_32)) || ~AGP_ATI
(HAS_IOMEM && (AGP && (X86_32 || ALPHA))) || ~AGP_AMD
(HAS_IOMEM && (AGP && (X86 && ~GART_IOMMU))) || (AGP_AMD64 => (HAS_IOMEM && (AGP && (X86 && GART_IOMMU))))
(HAS_IOMEM && (AGP && (X86 && ~GART_IOMMU))) || ((HAS_IOMEM && (AGP && (X86 && GART_IOMMU))) => AGP_AMD64)
(HAS_IOMEM && (AGP && X86)) || ~AGP_INTEL
(HAS_IOMEM && (AGP && X86_32)) || ~AGP_NVIDIA
(HAS_IOMEM && (AGP && X86)) || ~AGP_SIS
(HAS_IOMEM && (AGP && X86_32)) || ~AGP_SWORKS
(HAS_IOMEM && (AGP && X86)) || ~AGP_VIA
(HAS_IOMEM && (AGP && (IA64_DIG || IA64_GENERIC))) || ~AGP_I460
(HAS_IOMEM && (AGP && (IA64_HP_ZX1 || (IA64_HP_ZX1_SWIOTLB || IA64_GENERIC)))) || ~AGP_HP_ZX1
(HAS_IOMEM && (AGP && (PARISC && c64BIT))) || ~AGP_PARISC
(HAS_IOMEM && (AGP && (ALPHA_GENERIC || (ALPHA_TITAN || ALPHA_MARVEL)))) || (AGP_ALPHA_CORE => ((HAS_IOMEM && (AGP && (ALPHA_GENERIC || (ALPHA_TITAN || ALPHA_MARVEL)))) && AGP))
(HAS_IOMEM && (AGP && (ALPHA_GENERIC || (ALPHA_TITAN || ALPHA_MARVEL)))) || (((HAS_IOMEM && (AGP && (ALPHA_GENERIC || (ALPHA_TITAN || ALPHA_MARVEL)))) && AGP) => AGP_ALPHA_CORE)
(HAS_IOMEM && (AGP && PPC_PMAC)) || ~AGP_UNINORTH
(HAS_IOMEM && (AGP && X86_32)) || ~AGP_EFFICEON
(HAS_IOMEM && (AGP && (IA64_SGI_SN2 || IA64_GENERIC))) || ~AGP_SGI_TIOCA
(HAS_IOMEM && ((ALPHA || (IA64 || (PARISC || (PPC || X86)))) && PCI)) || ~AGP
(HAS_IOMEM && (PCI && EMBEDDED)) || (VGA_ARB => (HAS_IOMEM && PCI))
(HAS_IOMEM && (PCI && EMBEDDED)) || ((HAS_IOMEM && PCI) => VGA_ARB)
DRM_KMS_HELPER => ((DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) || (DRM_I915 && AGP_INTEL))
(DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => DRM_KMS_HELPER
(DRM_I915 && AGP_INTEL) => DRM_KMS_HELPER
DRM_TTM => (DRM_RADEON && (HAS_IOMEM && (DRM && PCI)))
(DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => DRM_TTM
(HAS_IOMEM && (DRM && PCI)) || ~DRM_TDFX
(HAS_IOMEM && (DRM && PCI)) || ~DRM_R128
(HAS_IOMEM && (DRM && PCI)) || ~DRM_RADEON
(HAS_IOMEM && (DRM && (AGP && AGP_INTEL))) || ~DRM_I810
DRM_I915 || ~DRM_I915_KMS
AGP_INTEL || ~DRM_I915
HAS_IOMEM && (DRM && (AGP && AGP_INTEL))
(HAS_IOMEM && DRM) || ~DRM_MGA
(HAS_IOMEM && (DRM && (AGP && (FB_SIS || ~FB_SIS)))) || ~DRM_SIS
(HAS_IOMEM && DRM) || ~DRM_VIA
(HAS_IOMEM && DRM) || ~DRM_SAVAGE
(HAS_IOMEM && ((AGP || ~AGP) && (PCI && (~EMULATED_CMPXCHG && MMU)))) || ~DRM
VGASTATE => (((((((((FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) || (FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))))) || (FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC))))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (FB_S3 && (HAS_IOMEM && (FB && PCI)))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI))))
(FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) => VGASTATE
(FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL)))))) => VGASTATE
(FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => VGASTATE
(FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC)))) => VGASTATE
(FB_RIVA && (HAS_IOMEM && (FB && PCI))) => VGASTATE
(FB_S3 && (HAS_IOMEM && (FB && PCI))) => VGASTATE
(FB_ARK && (HAS_IOMEM && (FB && PCI))) => VGASTATE
(FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => VGASTATE
(FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => VGASTATE
HAS_IOMEM || (VIDEO_OUTPUT_CONTROL => (DRM_I915 && (AGP_INTEL && ACPI)))
HAS_IOMEM || ((DRM_I915 && (AGP_INTEL && ACPI)) => VIDEO_OUTPUT_CONTROL)
(HAS_IOMEM && FB) || ~FIRMWARE_EDID
FB_DDC => ((((((((FB_MATROX_I2C && (HAS_IOMEM && FB_MATROX)) || (FB_NVIDIA_I2C && (HAS_IOMEM && FB_NVIDIA))) || (FB_SAVAGE_I2C && (HAS_IOMEM && FB_SAVAGE))) || (FB_3DFX_I2C && (HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)))) || (FB_RIVA_I2C && (HAS_IOMEM && FB_RIVA))) || (FB_I810_I2C && (HAS_IOMEM && (FB_I810 && FB_I810_GTF)))) || (FB_INTEL_I2C && (HAS_IOMEM && FB_INTEL))) || (FB_RADEON_I2C && (HAS_IOMEM && FB_RADEON)))
(FB_MATROX_I2C && (HAS_IOMEM && FB_MATROX)) => FB_DDC
(FB_NVIDIA_I2C && (HAS_IOMEM && FB_NVIDIA)) => FB_DDC
(FB_SAVAGE_I2C && (HAS_IOMEM && FB_SAVAGE)) => FB_DDC
(FB_3DFX_I2C && (HAS_IOMEM && (FB_3DFX && EXPERIMENTAL))) => FB_DDC
(FB_RIVA_I2C && (HAS_IOMEM && FB_RIVA)) => FB_DDC
(FB_I810_I2C && (HAS_IOMEM && (FB_I810 && FB_I810_GTF))) => FB_DDC
(FB_INTEL_I2C && (HAS_IOMEM && FB_INTEL)) => FB_DDC
(FB_RADEON_I2C && (HAS_IOMEM && FB_RADEON)) => FB_DDC
FB_BOOT_VESA_SUPPORT => (((FB_VESA && (HAS_IOMEM && (FB && X86))) || (FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && (~DRM_I915 && FB_INTEL)))))))))) || (FB_SIS && (HAS_IOMEM && (FB && (PCI && FB_SIS)))))
FB_CFB_FILLRECT => (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((FB_CONTROL && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32)))) || (FB_VALKYRIE && (HAS_IOMEM && (FB && (MAC || (PPC_PMAC && PPC32)))))) || (FB_APOLLO && (HAS_IOMEM && (FB && APOLLO)))) || (FB_TCX && (HAS_IOMEM && FB_SBUS))) || (FB_ASILIANT && (HAS_IOMEM && (FB && PCI)))) || (FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501)))) || (FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE))))) || (FB_STI && (HAS_IOMEM && (FB && PARISC)))) || (FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU)))) || (FB_G364 && (HAS_IOMEM && (FB && (MIPS_MAGNUM_4000 || OLIVETTI_M700))))) || (FB_SIS && (HAS_IOMEM && (FB && PCI)))) || (FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915))))))))) || (FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI))))) || (FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX)))) || (VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB)))))) || (FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2))))) || (FB_MAXINE && (HAS_IOMEM && (FB && MACH_DECSTATION)))) || (FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN)))) || (FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR)))) || (FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721))))))) || (FB_IGA && (HAS_IOMEM && (FB && SPARC32)))) || (DRM_RADEON && (HAS_IOMEM && (DRM && PCI)))) || (FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_XVR2500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86))))) || (FB_ACORN && (HAS_IOMEM && (FB && (ARM && ARCH_ACORN))))) || (FB_68328 && (HAS_IOMEM && (FB && (M68328 || (M68EZ328 || M68VZ328)))))) || (FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32)))))))))) || (FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI)))) || (FB_CG14 && (HAS_IOMEM && FB_SBUS))) || (FB_RADEON && (HAS_IOMEM && (FB && PCI)))) || (FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC)))) || (FB_3DFX && (HAS_IOMEM && (FB && PCI)))) || (FB_PLATINUM && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32))))) || (FB_Q40 && (HAS_IOMEM && (FB && Q40)))) || (FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE)))) || (FB_CT65550 && (HAS_IOMEM && (FB && (PPC32 && PCI))))) || (FB_AU1100 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1100))))) || (FB_S3 && (HAS_IOMEM && (FB && PCI)))) || (FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST)))) || (FB_ATARI && (HAS_IOMEM && (FB && ATARI)))) || (FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM)))) || (FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542))))) || (FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI)))) || (FB_KYRO && (HAS_IOMEM && (FB && PCI)))) || (FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_AU1200 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1200))))) || (FB_HGA && (HAS_IOMEM && (FB && X86)))) || (FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC))))) || (FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_ATY128 && (HAS_IOMEM && (FB && PCI)))) || (FB_CARMINE && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAG_BA && (HAS_IOMEM && (FB && TC)))) || (FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM))) || (FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_MB862XX && (HAS_IOMEM && FB))) || (FB_MAC && (HAS_IOMEM && (FB && MAC)))) || (FB_OF && (HAS_IOMEM && (FB && ((PPC64 || PPC_OF) && (~PPC_PSERIES || PCI)))))) || (FB_LEO && (HAS_IOMEM && FB_SBUS))) || (FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX)))) || (FB_BW2 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_CLPS711X && (HAS_IOMEM && (FB && (ARM && ARCH_CLPS711X))))) || (FB_P9100 && (HAS_IOMEM && FB_SBUS))) || (FB_S1D13XXX && (HAS_IOMEM && FB))) || (FB_HIT && (HAS_IOMEM && (FB && HD64461)))) || (FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC)))) || (FB_FM2 && (HAS_IOMEM && (FB && ZORRO)))) || (FB_VOODOO1 && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAGB_B && (HAS_IOMEM && (FB && TC)))) || (FB_SA1100 && (HAS_IOMEM && (FB && (ARM && ARCH_SA1100))))) || (FB_TRIDENT && (HAS_IOMEM && (FB && PCI)))) || (FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP)))) || (FB_MATROX && (HAS_IOMEM && (FB && PCI)))) || (FB_ATY && (HAS_IOMEM && (FB && ~SPARC32)))) || (FB_GBE && (HAS_IOMEM && (FB && (SGI_IP32 || X86_VISWS))))) || (FB_VIA && (HAS_IOMEM && (FB && PCI)))) || (FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE)))) || (DRM_I915 && AGP_INTEL)) || (FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410)))) || (FB_PMAG_AA && (HAS_IOMEM && (FB && TC)))) || (FB_EFI && (HAS_IOMEM && (FB && (X86 && EFI))))) || (FB_CG3 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX)))) || (FB_EPSON1355 && (HAS_IOMEM && (FB && ARCH_CEIVA)))) || (FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))))) || (FB_VESA && (HAS_IOMEM && (FB && X86)))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS)))) || (FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64)))))) || (FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI))))) || (FB_XVR500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC))))) || (FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))))
(FB_TCX && (HAS_IOMEM && FB_SBUS)) => FB_CFB_FILLRECT
(FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_FILLRECT
(FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501))) => FB_CFB_FILLRECT
(FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE)))) => FB_CFB_FILLRECT
(FB_STI && (HAS_IOMEM && (FB && PARISC))) => FB_CFB_FILLRECT
(FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU))) => FB_CFB_FILLRECT
(FB_SIS && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915)))))))) => FB_CFB_FILLRECT
(FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_FILLRECT
(FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI)))) => FB_CFB_FILLRECT
(FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX))) => FB_CFB_FILLRECT
(VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB))))) => FB_CFB_FILLRECT
(FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2)))) => FB_CFB_FILLRECT
(FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN))) => FB_CFB_FILLRECT
(FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR))) => FB_CFB_FILLRECT
(FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)))))) => FB_CFB_FILLRECT
(DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => FB_CFB_FILLRECT
(FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_FILLRECT
(FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86)))) => FB_CFB_FILLRECT
(FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32))))))))) => FB_CFB_FILLRECT
(FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_FILLRECT
(FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA)))) => FB_CFB_FILLRECT
(FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_CG14 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_FILLRECT
(FB_RADEON && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC))) => FB_CFB_FILLRECT
(FB_3DFX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE))) => FB_CFB_FILLRECT
(FB_S3 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST))) => FB_CFB_FILLRECT
(FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM))) => FB_CFB_FILLRECT
(FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542)))) => FB_CFB_FILLRECT
(FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_KYRO && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_FILLRECT
(FB_HGA && (HAS_IOMEM && (FB && X86))) => FB_CFB_FILLRECT
(FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC)))) => FB_CFB_FILLRECT
(FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_FILLRECT
(FB_ATY128 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_CARMINE && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_PMAG_BA && (HAS_IOMEM && (FB && TC))) => FB_CFB_FILLRECT
(FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM)) => FB_CFB_FILLRECT
(FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_FILLRECT
(FB_MB862XX && (HAS_IOMEM && FB)) => FB_CFB_FILLRECT
(FB_LEO && (HAS_IOMEM && FB_SBUS)) => FB_CFB_FILLRECT
(FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX))) => FB_CFB_FILLRECT
(FB_P9100 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_FILLRECT
(FB_S1D13XXX && (HAS_IOMEM && FB)) => FB_CFB_FILLRECT
(FB_HIT && (HAS_IOMEM && (FB && HD64461))) => FB_CFB_FILLRECT
(FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC))) => FB_CFB_FILLRECT
(FB_VOODOO1 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_PMAGB_B && (HAS_IOMEM && (FB && TC))) => FB_CFB_FILLRECT
(FB_TRIDENT && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP))) => FB_CFB_FILLRECT
(FB_MATROX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_ATY && (HAS_IOMEM && (FB && ~SPARC32))) => FB_CFB_FILLRECT
(FB_VIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE))) => FB_CFB_FILLRECT
(DRM_I915 && AGP_INTEL) => FB_CFB_FILLRECT
(FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410))) => FB_CFB_FILLRECT
(FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX))) => FB_CFB_FILLRECT
(FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL)))))) => FB_CFB_FILLRECT
(FB_RIVA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS))) => FB_CFB_FILLRECT
(FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64))))) => FB_CFB_FILLRECT
(FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI)))) => FB_CFB_FILLRECT
(FB_ARK && (HAS_IOMEM && (FB && PCI))) => FB_CFB_FILLRECT
(FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC)))) => FB_CFB_FILLRECT
(FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))) => FB_CFB_FILLRECT
FB_CFB_COPYAREA => ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((FB_CONTROL && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32)))) || (FB_VALKYRIE && (HAS_IOMEM && (FB && (MAC || (PPC_PMAC && PPC32)))))) || (FB_TCX && (HAS_IOMEM && FB_SBUS))) || (FB_FFB && (HAS_IOMEM && (FB_SBUS && SPARC64)))) || (FB_ASILIANT && (HAS_IOMEM && (FB && PCI)))) || (FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501)))) || (FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE))))) || (FB_STI && (HAS_IOMEM && (FB && PARISC)))) || (FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU)))) || (FB_G364 && (HAS_IOMEM && (FB && (MIPS_MAGNUM_4000 || OLIVETTI_M700))))) || (FB_SIS && (HAS_IOMEM && (FB && PCI)))) || (FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915))))))))) || (FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI))))) || (FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX)))) || (VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB)))))) || (FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2))))) || (FB_MAXINE && (HAS_IOMEM && (FB && MACH_DECSTATION)))) || (FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN)))) || (FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR)))) || (FB_CG6 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721))))))) || (FB_IGA && (HAS_IOMEM && (FB && SPARC32)))) || (DRM_RADEON && (HAS_IOMEM && (DRM && PCI)))) || (FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_XVR2500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86))))) || (FB_ACORN && (HAS_IOMEM && (FB && (ARM && ARCH_ACORN))))) || (FB_68328 && (HAS_IOMEM && (FB && (M68328 || (M68EZ328 || M68VZ328)))))) || (FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32)))))))))) || (FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI)))) || (FB_CG14 && (HAS_IOMEM && FB_SBUS))) || (FB_RADEON && (HAS_IOMEM && (FB && PCI)))) || (FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC)))) || (FB_3DFX && (HAS_IOMEM && (FB && PCI)))) || (FB_PLATINUM && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32))))) || (FB_Q40 && (HAS_IOMEM && (FB && Q40)))) || (FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE)))) || (FB_CT65550 && (HAS_IOMEM && (FB && (PPC32 && PCI))))) || (FB_AU1100 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1100))))) || (FB_S3 && (HAS_IOMEM && (FB && PCI)))) || (FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST)))) || (FB_ATARI && (HAS_IOMEM && (FB && ATARI)))) || (FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM)))) || (FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542))))) || (FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI)))) || (FB_KYRO && (HAS_IOMEM && (FB && PCI)))) || (FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_AU1200 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1200))))) || (FB_HGA && (HAS_IOMEM && (FB && X86)))) || (FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC))))) || (FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_ATY128 && (HAS_IOMEM && (FB && PCI)))) || (FB_CARMINE && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAG_BA && (HAS_IOMEM && (FB && TC)))) || (FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM))) || (FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_MB862XX && (HAS_IOMEM && FB))) || (FB_MAC && (HAS_IOMEM && (FB && MAC)))) || (FB_OF && (HAS_IOMEM && (FB && ((PPC64 || PPC_OF) && (~PPC_PSERIES || PCI)))))) || (FB_LEO && (HAS_IOMEM && FB_SBUS))) || (FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX)))) || (FB_BW2 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_CLPS711X && (HAS_IOMEM && (FB && (ARM && ARCH_CLPS711X))))) || (FB_P9100 && (HAS_IOMEM && FB_SBUS))) || (FB_S1D13XXX && (HAS_IOMEM && FB))) || (FB_HIT && (HAS_IOMEM && (FB && HD64461)))) || (FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC)))) || (FB_FM2 && (HAS_IOMEM && (FB && ZORRO)))) || (FB_VOODOO1 && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAGB_B && (HAS_IOMEM && (FB && TC)))) || (FB_SA1100 && (HAS_IOMEM && (FB && (ARM && ARCH_SA1100))))) || (FB_TRIDENT && (HAS_IOMEM && (FB && PCI)))) || (FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP)))) || (FB_MATROX && (HAS_IOMEM && (FB && PCI)))) || (FB_ATY && (HAS_IOMEM && (FB && ~SPARC32)))) || (FB_GBE && (HAS_IOMEM && (FB && (SGI_IP32 || X86_VISWS))))) || (FB_VIA && (HAS_IOMEM && (FB && PCI)))) || (FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE)))) || (DRM_I915 && AGP_INTEL)) || (FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410)))) || (FB_PMAG_AA && (HAS_IOMEM && (FB && TC)))) || (FB_EFI && (HAS_IOMEM && (FB && (X86 && EFI))))) || (FB_CG3 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX)))) || (FB_EPSON1355 && (HAS_IOMEM && (FB && ARCH_CEIVA)))) || (FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))))) || (FB_VESA && (HAS_IOMEM && (FB && X86)))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS)))) || (FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64)))))) || (FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI))))) || (FB_XVR500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC))))) || (FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))))
(FB_TCX && (HAS_IOMEM && FB_SBUS)) => FB_CFB_COPYAREA
(FB_FFB && (HAS_IOMEM && (FB_SBUS && SPARC64))) => FB_CFB_COPYAREA
(FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_COPYAREA
(FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501))) => FB_CFB_COPYAREA
(FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE)))) => FB_CFB_COPYAREA
(FB_STI && (HAS_IOMEM && (FB && PARISC))) => FB_CFB_COPYAREA
(FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU))) => FB_CFB_COPYAREA
(FB_SIS && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915)))))))) => FB_CFB_COPYAREA
(FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_COPYAREA
(FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI)))) => FB_CFB_COPYAREA
(FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX))) => FB_CFB_COPYAREA
(VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB))))) => FB_CFB_COPYAREA
(FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2)))) => FB_CFB_COPYAREA
(FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN))) => FB_CFB_COPYAREA
(FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR))) => FB_CFB_COPYAREA
(FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)))))) => FB_CFB_COPYAREA
(DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => FB_CFB_COPYAREA
(FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_COPYAREA
(FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86)))) => FB_CFB_COPYAREA
(FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32))))))))) => FB_CFB_COPYAREA
(FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_COPYAREA
(FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA)))) => FB_CFB_COPYAREA
(FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_CG14 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_COPYAREA
(FB_RADEON && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC))) => FB_CFB_COPYAREA
(FB_3DFX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE))) => FB_CFB_COPYAREA
(FB_S3 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST))) => FB_CFB_COPYAREA
(FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM))) => FB_CFB_COPYAREA
(FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542)))) => FB_CFB_COPYAREA
(FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_KYRO && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_COPYAREA
(FB_HGA && (HAS_IOMEM && (FB && X86))) => FB_CFB_COPYAREA
(FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC)))) => FB_CFB_COPYAREA
(FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_COPYAREA
(FB_ATY128 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_CARMINE && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_PMAG_BA && (HAS_IOMEM && (FB && TC))) => FB_CFB_COPYAREA
(FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM)) => FB_CFB_COPYAREA
(FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_COPYAREA
(FB_MB862XX && (HAS_IOMEM && FB)) => FB_CFB_COPYAREA
(FB_LEO && (HAS_IOMEM && FB_SBUS)) => FB_CFB_COPYAREA
(FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX))) => FB_CFB_COPYAREA
(FB_P9100 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_COPYAREA
(FB_S1D13XXX && (HAS_IOMEM && FB)) => FB_CFB_COPYAREA
(FB_HIT && (HAS_IOMEM && (FB && HD64461))) => FB_CFB_COPYAREA
(FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC))) => FB_CFB_COPYAREA
(FB_VOODOO1 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_PMAGB_B && (HAS_IOMEM && (FB && TC))) => FB_CFB_COPYAREA
(FB_TRIDENT && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP))) => FB_CFB_COPYAREA
(FB_MATROX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_ATY && (HAS_IOMEM && (FB && ~SPARC32))) => FB_CFB_COPYAREA
(FB_VIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE))) => FB_CFB_COPYAREA
(DRM_I915 && AGP_INTEL) => FB_CFB_COPYAREA
(FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410))) => FB_CFB_COPYAREA
(FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX))) => FB_CFB_COPYAREA
(FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL)))))) => FB_CFB_COPYAREA
(FB_RIVA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS))) => FB_CFB_COPYAREA
(FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64))))) => FB_CFB_COPYAREA
(FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI)))) => FB_CFB_COPYAREA
(FB_ARK && (HAS_IOMEM && (FB && PCI))) => FB_CFB_COPYAREA
(FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC)))) => FB_CFB_COPYAREA
(FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))) => FB_CFB_COPYAREA
FB_CFB_IMAGEBLIT => (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((FB_CONTROL && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32)))) || (FB_VALKYRIE && (HAS_IOMEM && (FB && (MAC || (PPC_PMAC && PPC32)))))) || (FB_APOLLO && (HAS_IOMEM && (FB && APOLLO)))) || (FB_TCX && (HAS_IOMEM && FB_SBUS))) || (FB_FFB && (HAS_IOMEM && (FB_SBUS && SPARC64)))) || (FB_ASILIANT && (HAS_IOMEM && (FB && PCI)))) || (FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501)))) || (FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE))))) || (FB_STI && (HAS_IOMEM && (FB && PARISC)))) || (FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU)))) || (FB_G364 && (HAS_IOMEM && (FB && (MIPS_MAGNUM_4000 || OLIVETTI_M700))))) || (FB_SIS && (HAS_IOMEM && (FB && PCI)))) || (FB_HP300 && (HAS_IOMEM && (FB && DIO)))) || (FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915))))))))) || (FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI))))) || (FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX)))) || (VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB)))))) || (FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2))))) || (FB_MAXINE && (HAS_IOMEM && (FB && MACH_DECSTATION)))) || (FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN)))) || (FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR)))) || (FB_CG6 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721))))))) || (FB_IGA && (HAS_IOMEM && (FB && SPARC32)))) || (DRM_RADEON && (HAS_IOMEM && (DRM && PCI)))) || (FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_XVR2500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86))))) || (FB_ACORN && (HAS_IOMEM && (FB && (ARM && ARCH_ACORN))))) || (FB_68328 && (HAS_IOMEM && (FB && (M68328 || (M68EZ328 || M68VZ328)))))) || (FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32)))))))))) || (FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))))) || (FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI)))) || (FB_CG14 && (HAS_IOMEM && FB_SBUS))) || (FB_RADEON && (HAS_IOMEM && (FB && PCI)))) || (FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC)))) || (FB_3DFX && (HAS_IOMEM && (FB && PCI)))) || (FB_PLATINUM && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32))))) || (FB_Q40 && (HAS_IOMEM && (FB && Q40)))) || (FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE)))) || (FB_CT65550 && (HAS_IOMEM && (FB && (PPC32 && PCI))))) || (FB_AU1100 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1100))))) || (FB_S3 && (HAS_IOMEM && (FB && PCI)))) || (FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST)))) || (FB_ATARI && (HAS_IOMEM && (FB && ATARI)))) || (FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM)))) || (FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542))))) || (FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI)))) || (FB_KYRO && (HAS_IOMEM && (FB && PCI)))) || (FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_AU1200 && (HAS_IOMEM && (FB && (MIPS && SOC_AU1200))))) || (FB_HGA && (HAS_IOMEM && (FB && X86)))) || (FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC))))) || (FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_ATY128 && (HAS_IOMEM && (FB && PCI)))) || (FB_CARMINE && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAG_BA && (HAS_IOMEM && (FB && TC)))) || (FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM))) || (FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA)))) || (FB_MB862XX && (HAS_IOMEM && FB))) || (FB_MAC && (HAS_IOMEM && (FB && MAC)))) || (FB_IMSTT && (HAS_IOMEM && (FB && PCI)))) || (FB_OF && (HAS_IOMEM && (FB && ((PPC64 || PPC_OF) && (~PPC_PSERIES || PCI)))))) || (FB_LEO && (HAS_IOMEM && FB_SBUS))) || (FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX)))) || (FB_BW2 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_CLPS711X && (HAS_IOMEM && (FB && (ARM && ARCH_CLPS711X))))) || (FB_P9100 && (HAS_IOMEM && FB_SBUS))) || (FB_S1D13XXX && (HAS_IOMEM && FB))) || (FB_HIT && (HAS_IOMEM && (FB && HD64461)))) || (FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC)))) || (FB_FM2 && (HAS_IOMEM && (FB && ZORRO)))) || (FB_VOODOO1 && (HAS_IOMEM && (FB && PCI)))) || (FB_PMAGB_B && (HAS_IOMEM && (FB && TC)))) || (FB_SA1100 && (HAS_IOMEM && (FB && (ARM && ARCH_SA1100))))) || (FB_TRIDENT && (HAS_IOMEM && (FB && PCI)))) || (FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP)))) || (FB_MATROX && (HAS_IOMEM && (FB && PCI)))) || (FB_ATY && (HAS_IOMEM && (FB && ~SPARC32)))) || (FB_GBE && (HAS_IOMEM && (FB && (SGI_IP32 || X86_VISWS))))) || (FB_VIA && (HAS_IOMEM && (FB && PCI)))) || (FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE)))) || (DRM_I915 && AGP_INTEL)) || (FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410)))) || (FB_PMAG_AA && (HAS_IOMEM && (FB && TC)))) || (FB_EFI && (HAS_IOMEM && (FB && (X86 && EFI))))) || (FB_CG3 && (HAS_IOMEM && (FB && (SPARC && FB_SBUS))))) || (FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX)))) || (FB_EPSON1355 && (HAS_IOMEM && (FB && ARCH_CEIVA)))) || (FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))))) || (FB_VESA && (HAS_IOMEM && (FB && X86)))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS)))) || (FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64)))))) || (FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI))))) || (FB_XVR500 && (HAS_IOMEM && (FB && (PCI && SPARC64))))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC))))) || (FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))))
(FB_TCX && (HAS_IOMEM && FB_SBUS)) => FB_CFB_IMAGEBLIT
(FB_FFB && (HAS_IOMEM && (FB_SBUS && SPARC64))) => FB_CFB_IMAGEBLIT
(FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_IMAGEBLIT
(FB_SM501 && (HAS_IOMEM && (FB && MFD_SM501))) => FB_CFB_IMAGEBLIT
(FB_XILINX && (HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE)))) => FB_CFB_IMAGEBLIT
(FB_STI && (HAS_IOMEM && (FB && PARISC))) => FB_CFB_IMAGEBLIT
(FB_MX3 && (HAS_IOMEM && (FB && MX3_IPU))) => FB_CFB_IMAGEBLIT
(FB_SIS && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915)))))))) => FB_CFB_IMAGEBLIT
(FB_GEODE_GX1 && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_IMAGEBLIT
(FB_CIRRUS && (HAS_IOMEM && (FB && (ZORRO || PCI)))) => FB_CFB_IMAGEBLIT
(FB_DA8XX && (HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX))) => FB_CFB_IMAGEBLIT
(VIDEO_FB_IVTV && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_IVTV && FB))))) => FB_CFB_IMAGEBLIT
(FB_IMX && (HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2)))) => FB_CFB_IMAGEBLIT
(FB_BFIN_T350MCQB && (HAS_IOMEM && (FB && BLACKFIN))) => FB_CFB_IMAGEBLIT
(FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR))) => FB_CFB_IMAGEBLIT
(FB_SH7760 && (HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721)))))) => FB_CFB_IMAGEBLIT
(DRM_RADEON && (HAS_IOMEM && (DRM && PCI))) => FB_CFB_IMAGEBLIT
(FB_W100 && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_IMAGEBLIT
(FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86)))) => FB_CFB_IMAGEBLIT
(FB_ATMEL && (HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32))))))))) => FB_CFB_IMAGEBLIT
(FB_GEODE_GX && (HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL)))) => FB_CFB_IMAGEBLIT
(FB_ARMCLCD && (HAS_IOMEM && (FB && (ARM && ARM_AMBA)))) => FB_CFB_IMAGEBLIT
(FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_CG14 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_IMAGEBLIT
(FB_RADEON && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_FSL_DIU && (HAS_IOMEM && (FB && FSL_SOC))) => FB_CFB_IMAGEBLIT
(FB_3DFX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_GEODE_LX && (HAS_IOMEM && (FB && FB_GEODE))) => FB_CFB_IMAGEBLIT
(FB_S3 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_PVR2 && (HAS_IOMEM && (FB && SH_DREAMCAST))) => FB_CFB_IMAGEBLIT
(FB_MSM && (HAS_IOMEM && (FB && ARCH_MSM))) => FB_CFB_IMAGEBLIT
(FB_BF54X_LQ043 && (HAS_IOMEM && (FB && (BF54x && ~BF542)))) => FB_CFB_IMAGEBLIT
(FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_KYRO && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_MBX && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_IMAGEBLIT
(FB_HGA && (HAS_IOMEM && (FB && X86))) => FB_CFB_IMAGEBLIT
(FB_VGA16 && (HAS_IOMEM && (FB && (X86 || PPC)))) => FB_CFB_IMAGEBLIT
(FB_PM3 && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_CFB_IMAGEBLIT
(FB_ATY128 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_CARMINE && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_PMAG_BA && (HAS_IOMEM && (FB && TC))) => FB_CFB_IMAGEBLIT
(FB_PNX4008_DUM_RGB && (HAS_IOMEM && FB_PNX4008_DUM)) => FB_CFB_IMAGEBLIT
(FB_PXA && (HAS_IOMEM && (FB && ARCH_PXA))) => FB_CFB_IMAGEBLIT
(FB_MB862XX && (HAS_IOMEM && FB)) => FB_CFB_IMAGEBLIT
(FB_LEO && (HAS_IOMEM && FB_SBUS)) => FB_CFB_IMAGEBLIT
(FB_EP93XX && (HAS_IOMEM && (FB && ARCH_EP93XX))) => FB_CFB_IMAGEBLIT
(FB_P9100 && (HAS_IOMEM && FB_SBUS)) => FB_CFB_IMAGEBLIT
(FB_S1D13XXX && (HAS_IOMEM && FB)) => FB_CFB_IMAGEBLIT
(FB_HIT && (HAS_IOMEM && (FB && HD64461))) => FB_CFB_IMAGEBLIT
(FB_IBM_GXT4500 && (HAS_IOMEM && (FB && PPC))) => FB_CFB_IMAGEBLIT
(FB_VOODOO1 && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_PMAGB_B && (HAS_IOMEM && (FB && TC))) => FB_CFB_IMAGEBLIT
(FB_TRIDENT && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_OMAP && (HAS_IOMEM && (FB && ARCH_OMAP))) => FB_CFB_IMAGEBLIT
(FB_MATROX && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_ATY && (HAS_IOMEM && (FB && ~SPARC32))) => FB_CFB_IMAGEBLIT
(FB_VIA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_TMIO && (HAS_IOMEM && (FB && MFD_CORE))) => FB_CFB_IMAGEBLIT
(DRM_I915 && AGP_INTEL) => FB_CFB_IMAGEBLIT
(FB_S3C2410 && (HAS_IOMEM && (FB && ARCH_S3C2410))) => FB_CFB_IMAGEBLIT
(FB_S3C && (HAS_IOMEM && (FB && ARCH_S3C64XX))) => FB_CFB_IMAGEBLIT
(FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL)))))) => FB_CFB_IMAGEBLIT
(FB_RIVA && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_SGIVW && (HAS_IOMEM && (FB && X86_VISWS))) => FB_CFB_IMAGEBLIT
(FB_CYBER2000 && (HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64))))) => FB_CFB_IMAGEBLIT
(FB_PM2 && (HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI)))) => FB_CFB_IMAGEBLIT
(FB_ARK && (HAS_IOMEM && (FB && PCI))) => FB_CFB_IMAGEBLIT
(FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC)))) => FB_CFB_IMAGEBLIT
(FB_PXA168 && (HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910)))) => FB_CFB_IMAGEBLIT
~FB_CFB_REV_PIXELS_IN_BYTE
FB_SYS_FILLRECT => (((((((((XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) || (CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108))))) || (FB_ARC && (HAS_IOMEM && (FB && X86)))) || (FB_VIRTUAL && (HAS_IOMEM && FB))) || (FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))))) || (FB_BROADSHEET && (HAS_IOMEM && FB))) || (FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV)))) || (FB_METRONOME && (HAS_IOMEM && FB))) || (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))))
(XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) => FB_SYS_FILLRECT
(CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108)))) => FB_SYS_FILLRECT
(FB_ARC && (HAS_IOMEM && (FB && X86))) => FB_SYS_FILLRECT
(FB_VIRTUAL && (HAS_IOMEM && FB)) => FB_SYS_FILLRECT
(FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK)))) => FB_SYS_FILLRECT
(FB_BROADSHEET && (HAS_IOMEM && FB)) => FB_SYS_FILLRECT
(FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV))) => FB_SYS_FILLRECT
(FB_METRONOME && (HAS_IOMEM && FB)) => FB_SYS_FILLRECT
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_SYS_FILLRECT
FB_SYS_COPYAREA => (((((((((XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) || (CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108))))) || (FB_ARC && (HAS_IOMEM && (FB && X86)))) || (FB_VIRTUAL && (HAS_IOMEM && FB))) || (FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))))) || (FB_BROADSHEET && (HAS_IOMEM && FB))) || (FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV)))) || (FB_METRONOME && (HAS_IOMEM && FB))) || (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))))
(XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) => FB_SYS_COPYAREA
(CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108)))) => FB_SYS_COPYAREA
(FB_ARC && (HAS_IOMEM && (FB && X86))) => FB_SYS_COPYAREA
(FB_VIRTUAL && (HAS_IOMEM && FB)) => FB_SYS_COPYAREA
(FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK)))) => FB_SYS_COPYAREA
(FB_BROADSHEET && (HAS_IOMEM && FB)) => FB_SYS_COPYAREA
(FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV))) => FB_SYS_COPYAREA
(FB_METRONOME && (HAS_IOMEM && FB)) => FB_SYS_COPYAREA
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_SYS_COPYAREA
FB_SYS_IMAGEBLIT => (((((((((XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) || (CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108))))) || (FB_ARC && (HAS_IOMEM && (FB && X86)))) || (FB_VIRTUAL && (HAS_IOMEM && FB))) || (FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))))) || (FB_BROADSHEET && (HAS_IOMEM && FB))) || (FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV)))) || (FB_METRONOME && (HAS_IOMEM && FB))) || (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))))
(XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) => FB_SYS_IMAGEBLIT
(CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108)))) => FB_SYS_IMAGEBLIT
(FB_ARC && (HAS_IOMEM && (FB && X86))) => FB_SYS_IMAGEBLIT
(FB_VIRTUAL && (HAS_IOMEM && FB)) => FB_SYS_IMAGEBLIT
(FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK)))) => FB_SYS_IMAGEBLIT
(FB_BROADSHEET && (HAS_IOMEM && FB)) => FB_SYS_IMAGEBLIT
(FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV))) => FB_SYS_IMAGEBLIT
(FB_METRONOME && (HAS_IOMEM && FB)) => FB_SYS_IMAGEBLIT
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_SYS_IMAGEBLIT
HAS_IOMEM && FB_FOREIGN_ENDIAN
(HAS_IOMEM && FB) || (FB_FOREIGN_ENDIAN => (FB_MB862XX_LIME && (HAS_IOMEM && (FB_MB862XX && (OF && (~FB_MB862XX_PCI_GDC && PPC))))))
(HAS_IOMEM && FB) || ((FB_MB862XX_LIME && (HAS_IOMEM && (FB_MB862XX && (OF && (~FB_MB862XX_PCI_GDC && PPC))))) => FB_FOREIGN_ENDIAN)
FB_SYS_FOPS => (((((((((XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) || (CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108))))) || (FB_ARC && (HAS_IOMEM && (FB && X86)))) || (FB_VIRTUAL && (HAS_IOMEM && FB))) || (FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))))) || (FB_BROADSHEET && (HAS_IOMEM && FB))) || (FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV)))) || (FB_METRONOME && (HAS_IOMEM && FB))) || (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))))
(XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) => FB_SYS_FOPS
(CFAG12864B && (AUXDISPLAY && (X86 && (FB && KS0108)))) => FB_SYS_FOPS
(FB_ARC && (HAS_IOMEM && (FB && X86))) => FB_SYS_FOPS
(FB_VIRTUAL && (HAS_IOMEM && FB)) => FB_SYS_FOPS
(FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK)))) => FB_SYS_FOPS
(FB_BROADSHEET && (HAS_IOMEM && FB)) => FB_SYS_FOPS
(FB_PS3 && (HAS_IOMEM && (FB && PS3_PS3AV))) => FB_SYS_FOPS
(FB_METRONOME && (HAS_IOMEM && FB)) => FB_SYS_FOPS
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_SYS_FOPS
FB_DEFERRED_IO => (((((XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) || (FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))))) || (FB_METRONOME && (HAS_IOMEM && FB))) || (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU))))) || (FB_BROADSHEET && (HAS_IOMEM && FB)))
(XEN_FBDEV_FRONTEND && (HAS_IOMEM && (FB && XEN))) => FB_DEFERRED_IO
(FB_SH_MOBILE_LCDC && (HAS_IOMEM && (FB && (SUPERH && HAVE_CLK)))) => FB_DEFERRED_IO
(FB_METRONOME && (HAS_IOMEM && FB)) => FB_DEFERRED_IO
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_DEFERRED_IO
(FB_BROADSHEET && (HAS_IOMEM && FB)) => FB_DEFERRED_IO
FB_HECUBA => (FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU))))
(FB_N411 && (HAS_IOMEM && (FB && (X86 && MMU)))) => FB_HECUBA
FB_SVGALIB => (((FB_S3 && (HAS_IOMEM && (FB && PCI))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI))))
(FB_S3 && (HAS_IOMEM && (FB && PCI))) => FB_SVGALIB
(FB_ARK && (HAS_IOMEM && (FB && PCI))) => FB_SVGALIB
(FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => FB_SVGALIB
FB_MACMODES => ((((((((((FB_OF && (HAS_IOMEM && (FB && ((PPC64 || PPC_OF) && (~PPC_PSERIES || PCI))))) || (FB_CONTROL && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32))))) || (FB_VALKYRIE && (HAS_IOMEM && (FB && (MAC || (PPC_PMAC && PPC32)))))) || (FB_PLATINUM && (HAS_IOMEM && (FB && (PPC_PMAC && PPC32))))) || (FB_IMSTT && (HAS_IOMEM && (FB && (PCI && PPC))))) || (FB_ATY128 && (HAS_IOMEM && (FB && (PCI && PPC_PMAC))))) || (FB_MATROX && (HAS_IOMEM && (FB && (PCI && PPC_PMAC))))) || (FB_RADEON && (HAS_IOMEM && (FB && (PCI && PPC_OF))))) || (FB_ATY && (HAS_IOMEM && (FB && (~SPARC32 && PPC))))) || (FB_MAC && (HAS_IOMEM && (FB && MAC))))
(FB_ATY128 && (HAS_IOMEM && (FB && (PCI && PPC_PMAC)))) => FB_MACMODES
(FB_MATROX && (HAS_IOMEM && (FB && (PCI && PPC_PMAC)))) => FB_MACMODES
(FB_RADEON && (HAS_IOMEM && (FB && (PCI && PPC_OF)))) => FB_MACMODES
(FB_ATY && (HAS_IOMEM && (FB && (~SPARC32 && PPC)))) => FB_MACMODES
FB_BACKLIGHT => ((((((FB_RADEON && (HAS_IOMEM && (FB && (PCI && FB_RADEON_BACKLIGHT)))) || (FB_RIVA && (HAS_IOMEM && (FB && (PCI && FB_RIVA_BACKLIGHT))))) || (FB_ATY && (HAS_IOMEM && (FB && (~SPARC32 && FB_ATY_BACKLIGHT))))) || (FB_ATY128 && (HAS_IOMEM && (FB && (PCI && FB_ATY128_BACKLIGHT))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && (PCI && FB_NVIDIA_BACKLIGHT))))) || (PMAC_BACKLIGHT && (MACINTOSH_DRIVERS && (ADB_PMU && (FB && (BROKEN || ~PPC64))))))
(FB_RADEON && (HAS_IOMEM && (FB && (PCI && FB_RADEON_BACKLIGHT)))) => FB_BACKLIGHT
(FB_RIVA && (HAS_IOMEM && (FB && (PCI && FB_RIVA_BACKLIGHT)))) => FB_BACKLIGHT
(FB_ATY && (HAS_IOMEM && (FB && (~SPARC32 && FB_ATY_BACKLIGHT)))) => FB_BACKLIGHT
(FB_ATY128 && (HAS_IOMEM && (FB && (PCI && FB_ATY128_BACKLIGHT)))) => FB_BACKLIGHT
(FB_NVIDIA && (HAS_IOMEM && (FB && (PCI && FB_NVIDIA_BACKLIGHT)))) => FB_BACKLIGHT
(HAS_IOMEM && FB) || (FB_MODE_HELPERS => ((((((((((FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) || (FB_RADEON && (HAS_IOMEM && (FB && PCI)))) || (FB_3DFX && (HAS_IOMEM && (FB && PCI)))) || (FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))))) || (FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86))))) || (FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR)))) || (FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915))))))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))))
(HAS_IOMEM && FB) || ((FB_NEOMAGIC && (HAS_IOMEM && (FB && PCI))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_RADEON && (HAS_IOMEM && (FB && PCI))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_3DFX && (HAS_IOMEM && (FB && PCI))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_I810 && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL)))))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_LE80578 && (HAS_IOMEM && (FB && (PCI && X86)))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_SAVAGE && (HAS_IOMEM && (FB && (PCI && EXPERIMENTAL)))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_RIVA && (HAS_IOMEM && (FB && PCI))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_UVESA && (HAS_IOMEM && (FB && CONNECTOR))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_INTEL && (HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915)))))))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || ((FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => FB_MODE_HELPERS)
(HAS_IOMEM && FB) || (FB_TILEBLITTING => ((((FB_MATROX && (HAS_IOMEM && (FB && PCI))) || (FB_S3 && (HAS_IOMEM && (FB && PCI)))) || (FB_ARK && (HAS_IOMEM && (FB && PCI)))) || (FB_VT8623 && (HAS_IOMEM && (FB && PCI)))))
(HAS_IOMEM && FB) || ((FB_MATROX && (HAS_IOMEM && (FB && PCI))) => FB_TILEBLITTING)
(HAS_IOMEM && FB) || ((FB_S3 && (HAS_IOMEM && (FB && PCI))) => FB_TILEBLITTING)
(HAS_IOMEM && FB) || ((FB_ARK && (HAS_IOMEM && (FB && PCI))) => FB_TILEBLITTING)
(HAS_IOMEM && FB) || ((FB_VT8623 && (HAS_IOMEM && (FB && PCI))) => FB_TILEBLITTING)
(HAS_IOMEM && (FB && (ZORRO || PCI))) || ~FB_CIRRUS
(HAS_IOMEM && (FB_PM2 && PCI)) || ~FB_PM2_FIFO_DISCONNECT
(HAS_IOMEM && (FB && ((AMIGA && BROKEN) || PCI))) || ~FB_PM2
HAS_IOMEM && (FB_ARMCLCD && (ARCH_LH7A40X || ARCH_LH7952X))
(HAS_IOMEM && (FB && (ARM && ARM_AMBA))) || ~FB_ARMCLCD
(HAS_IOMEM && (FB && (ARM && ARCH_ACORN))) || ~FB_ACORN
(HAS_IOMEM && (FB && (ARM && ARCH_CLPS711X))) || ~FB_CLPS711X
(HAS_IOMEM && (FB && (ARM && ARCH_SA1100))) || ~FB_SA1100
(HAS_IOMEM && (FB && (ARCH_MX1 || ARCH_MX2))) || ~FB_IMX
(HAS_IOMEM && (FB && (PCI && (BROKEN || ~SPARC64)))) || ~FB_CYBER2000
FB_APOLLO => (HAS_IOMEM && (FB && APOLLO))
FB_Q40 => (HAS_IOMEM && (FB && Q40))
(HAS_IOMEM && FB_AMIGA) || ~FB_AMIGA_OCS
(HAS_IOMEM && FB_AMIGA) || ~FB_AMIGA_ECS
(HAS_IOMEM && FB_AMIGA) || ~FB_AMIGA_AGA
(HAS_IOMEM && (FB && AMIGA)) || ~FB_AMIGA
(HAS_IOMEM && (FB && ZORRO)) || ~FB_FM2
(HAS_IOMEM && (FB && X86)) || ~FB_ARC
(HAS_IOMEM && (FB && ATARI)) || ~FB_ATARI
(HAS_IOMEM && (FB && ((PPC64 || PPC_OF) && (~PPC_PSERIES || PCI)))) || ~FB_OF
(HAS_IOMEM && (FB && (PPC_PMAC && PPC32))) || ~FB_CONTROL
(HAS_IOMEM && (FB && (PPC_PMAC && PPC32))) || ~FB_PLATINUM
(HAS_IOMEM && (FB && (MAC || (PPC_PMAC && PPC32)))) || ~FB_VALKYRIE
(HAS_IOMEM && (FB && (PPC32 && PCI))) || ~FB_CT65550
(HAS_IOMEM && (FB && PCI)) || ~FB_ASILIANT
(HAS_IOMEM && (FB && PCI)) || ~FB_IMSTT
(HAS_IOMEM && (FB && (X86 || PPC))) || ~FB_VGA16
(HAS_IOMEM && (FB && (BF54x && ~BF542))) || ~FB_BF54X_LQ043
(HAS_IOMEM && (FB && BLACKFIN)) || ~FB_BFIN_T350MCQB
(HAS_IOMEM && (FB && PARISC)) || (FB_STI => (HAS_IOMEM && (FB && PARISC)))
(HAS_IOMEM && (FB && PARISC)) || ((HAS_IOMEM && (FB && PARISC)) => FB_STI)
(HAS_IOMEM && (FB && MAC)) || ~FB_MAC
FB_HP300 => (HAS_IOMEM && (FB && DIO))
(HAS_IOMEM && (FB && (ALPHA || TC))) || ~FB_TGA
(HAS_IOMEM && (FB && CONNECTOR)) || ~FB_UVESA
(HAS_IOMEM && (FB && X86)) || ~FB_VESA
(HAS_IOMEM && (FB && (X86 && EFI))) || ~FB_EFI
(HAS_IOMEM && (FB && (X86 && MMU))) || ~FB_N411
(HAS_IOMEM && (FB_HGA && EXPERIMENTAL)) || ~FB_HGA_ACCEL
(HAS_IOMEM && (FB && X86)) || ~FB_HGA
(HAS_IOMEM && (FB && X86_VISWS)) || ~FB_SGIVW
(HAS_IOMEM && FB_GBE) || ~FB_GBE_MEM
(HAS_IOMEM && (FB && (SGI_IP32 || X86_VISWS))) || ~FB_GBE
(HAS_IOMEM && (FB && (SPARC && FB_SBUS))) || ~FB_BW2
(HAS_IOMEM && (FB && (SPARC && FB_SBUS))) || ~FB_CG3
(HAS_IOMEM && (FB && (SPARC && FB_SBUS))) || ~FB_CG6
(HAS_IOMEM && (FB_SBUS && SPARC64)) || ~FB_FFB
(HAS_IOMEM && FB_SBUS) || ~FB_TCX
(HAS_IOMEM && FB_SBUS) || ~FB_CG14
(HAS_IOMEM && FB_SBUS) || ~FB_P9100
(HAS_IOMEM && FB_SBUS) || ~FB_LEO
(HAS_IOMEM && (FB && SPARC)) || ~FB_SBUS
(HAS_IOMEM && (FB && SPARC32)) || ~FB_IGA
(HAS_IOMEM && (FB && (PCI && SPARC64))) || ~FB_XVR500
(HAS_IOMEM && (FB && (PCI && SPARC64))) || ~FB_XVR2500
(HAS_IOMEM && (FB && SH_DREAMCAST)) || ~FB_PVR2
(HAS_IOMEM && (FB && ARCH_CEIVA)) || ~FB_EPSON1355
(HAS_IOMEM && FB) || ~FB_S1D13XXX
(HAS_IOMEM && (FB_ATMEL && ARCH_AT91SAM9261)) || ~FB_INTSRAM
(HAS_IOMEM && (FB_ATMEL && (MACH_AT91SAM9261EK || MACH_AT91SAM9G10EK))) || ~FB_ATMEL_STN
(HAS_IOMEM && (FB && (ARCH_AT91SAM9261 || (ARCH_AT91SAM9G10 || (ARCH_AT91SAM9263 || (ARCH_AT91SAM9RL || (ARCH_AT91SAM9G45 || (ARCH_AT91CAP9 || AVR32)))))))) || ~FB_ATMEL
(HAS_IOMEM && FB_NVIDIA) || ~FB_NVIDIA_I2C
(HAS_IOMEM && FB_NVIDIA) || ~FB_NVIDIA_DEBUG
(HAS_IOMEM && FB_NVIDIA) || (FB_NVIDIA_BACKLIGHT => (HAS_IOMEM && FB_NVIDIA))
(HAS_IOMEM && FB_NVIDIA) || ((HAS_IOMEM && FB_NVIDIA) => FB_NVIDIA_BACKLIGHT)
(HAS_IOMEM && (FB && PCI)) || ~FB_NVIDIA
(HAS_IOMEM && FB_RIVA) || ~FB_RIVA_I2C
(HAS_IOMEM && FB_RIVA) || ~FB_RIVA_DEBUG
(HAS_IOMEM && FB_RIVA) || (FB_RIVA_BACKLIGHT => (HAS_IOMEM && FB_RIVA))
(HAS_IOMEM && FB_RIVA) || ((HAS_IOMEM && FB_RIVA) => FB_RIVA_BACKLIGHT)
(HAS_IOMEM && (FB && PCI)) || ~FB_RIVA
(HAS_IOMEM && (FB_I810 && FB_I810_GTF)) || ~FB_I810_I2C
(HAS_IOMEM && FB_I810) || ~FB_I810_GTF
(HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86_32 && AGP_INTEL))))) || ~FB_I810
(HAS_IOMEM && (FB_LE80578 && (FB && (PCI && X86)))) || ~FB_CARILLO_RANCH
(HAS_IOMEM && (FB && (PCI && X86))) || ~FB_LE80578
(HAS_IOMEM && FB_INTEL) || ~FB_INTEL_DEBUG
(HAS_IOMEM && FB_INTEL) || (FB_INTEL_I2C => (HAS_IOMEM && FB_INTEL))
(HAS_IOMEM && FB_INTEL) || ((HAS_IOMEM && FB_INTEL) => FB_INTEL_I2C)
(HAS_IOMEM && (EXPERIMENTAL && (FB && (PCI && (X86 && (AGP_INTEL && (EMBEDDED && ~DRM_I915))))))) || ~FB_INTEL
(HAS_IOMEM && FB_MATROX) || ~FB_MATROX_MILLENIUM
(HAS_IOMEM && FB_MATROX) || ~FB_MATROX_MYSTIQUE
(HAS_IOMEM && FB_MATROX) || ~FB_MATROX_G
(HAS_IOMEM && (FB_MATROX_G && FB_MATROX_I2C)) || ~FB_MATROX_MAVEN
(HAS_IOMEM && FB_MATROX) || ~FB_MATROX_I2C
(HAS_IOMEM && (FB && PCI)) || ~FB_MATROX
(HAS_IOMEM && FB_RADEON) || (FB_RADEON_I2C => (HAS_IOMEM && FB_RADEON))
(HAS_IOMEM && FB_RADEON) || ((HAS_IOMEM && FB_RADEON) => FB_RADEON_I2C)
(HAS_IOMEM && FB_RADEON) || (FB_RADEON_BACKLIGHT => (HAS_IOMEM && FB_RADEON))
(HAS_IOMEM && FB_RADEON) || ((HAS_IOMEM && FB_RADEON) => FB_RADEON_BACKLIGHT)
(HAS_IOMEM && FB_RADEON) || ~FB_RADEON_DEBUG
(HAS_IOMEM && (FB && PCI)) || ~FB_RADEON
(HAS_IOMEM && FB_ATY128) || (FB_ATY128_BACKLIGHT => (HAS_IOMEM && FB_ATY128))
(HAS_IOMEM && FB_ATY128) || ((HAS_IOMEM && FB_ATY128) => FB_ATY128_BACKLIGHT)
(HAS_IOMEM && (FB && PCI)) || ~FB_ATY128
(HAS_IOMEM && FB_ATY_CT) || ~FB_ATY_GENERIC_LCD
(HAS_IOMEM && (PCI && FB_ATY)) || (FB_ATY_CT => (HAS_IOMEM && (FB_ATY && (SPARC64 && PCI))))
(HAS_IOMEM && (PCI && FB_ATY)) || ((HAS_IOMEM && (FB_ATY && (SPARC64 && PCI))) => FB_ATY_CT)
(HAS_IOMEM && (FB_ATY && PCI)) || (FB_ATY_GX => (HAS_IOMEM && (FB_ATY && ATARI)))
(HAS_IOMEM && (FB_ATY && PCI)) || ((HAS_IOMEM && (FB_ATY && ATARI)) => FB_ATY_GX)
(HAS_IOMEM && FB_ATY) || (FB_ATY_BACKLIGHT => (HAS_IOMEM && FB_ATY))
(HAS_IOMEM && FB_ATY) || ((HAS_IOMEM && FB_ATY) => FB_ATY_BACKLIGHT)
(HAS_IOMEM && (FB && (~SPARC32 && (PCI || ATARI)))) || ~FB_ATY
(HAS_IOMEM && (FB && PCI)) || ~FB_S3
(HAS_IOMEM && FB_SAVAGE) || ~FB_SAVAGE_I2C
(HAS_IOMEM && FB_SAVAGE) || ~FB_SAVAGE_ACCEL
(HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))) || ~FB_SAVAGE
(HAS_IOMEM && FB_SIS) || ~FB_SIS_300
(HAS_IOMEM && FB_SIS) || ~FB_SIS_315
(HAS_IOMEM && (FB && PCI)) || ~FB_SIS
(HAS_IOMEM && (FB && PCI)) || ~FB_VIA
(HAS_IOMEM && (FB && PCI)) || ~FB_NEOMAGIC
(HAS_IOMEM && (FB && PCI)) || ~FB_KYRO
(HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)) || ~FB_3DFX_ACCEL
(HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)) || (FB_3DFX_I2C => (HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)))
(HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)) || ((HAS_IOMEM && (FB_3DFX && EXPERIMENTAL)) => FB_3DFX_I2C)
(HAS_IOMEM && (FB && PCI)) || ~FB_3DFX
(HAS_IOMEM && (FB && PCI)) || ~FB_VOODOO1
(HAS_IOMEM && (FB && PCI)) || ~FB_VT8623
(HAS_IOMEM && (FB && PCI)) || ~FB_TRIDENT
(HAS_IOMEM && (FB && PCI)) || ~FB_ARK
(HAS_IOMEM && (FB && (PCI && EXPERIMENTAL))) || ~FB_PM3
HAS_IOMEM && FB_CARMINE
(HAS_IOMEM && (FB && PCI)) || ~FB_CARMINE
(HAS_IOMEM && (FB && (MIPS && SOC_AU1100))) || ~FB_AU1100
(HAS_IOMEM && (FB && (MIPS && SOC_AU1200))) || ~FB_AU1200
(HAS_IOMEM && (FB && FB_GEODE)) || ~FB_GEODE_LX
(HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))) || ~FB_GEODE_GX
(HAS_IOMEM && (FB && (FB_GEODE && EXPERIMENTAL))) || ~FB_GEODE_GX1
(HAS_IOMEM && (FB && (PCI && (EXPERIMENTAL && X86)))) || ~FB_GEODE
(HAS_IOMEM && (FB && HD64461)) || ~FB_HIT
(HAS_IOMEM && (FB && TC)) || ~FB_PMAG_AA
(HAS_IOMEM && (FB && TC)) || ~FB_PMAG_BA
(HAS_IOMEM && (FB && TC)) || ~FB_PMAGB_B
(HAS_IOMEM && (FB && MACH_DECSTATION)) || ~FB_MAXINE
(HAS_IOMEM && (FB && (MIPS_MAGNUM_4000 || OLIVETTI_M700))) || ~FB_G364
(HAS_IOMEM && (FB && (M68328 || (M68EZ328 || M68VZ328)))) || ~FB_68328
(HAS_IOMEM && (FB && (CPU_PXA168 || CPU_PXA910))) || ~FB_PXA168
(HAS_IOMEM && (FB_PXA && (PXA27x || PXA3xx))) || ~FB_PXA_OVERLAY
(HAS_IOMEM && FB_PXA) || ~FB_PXA_SMARTPANEL
(HAS_IOMEM && FB_PXA) || ~FB_PXA_PARAMETERS
(HAS_IOMEM && (FB && ARCH_PXA)) || ~FB_PXA
(HAS_IOMEM && (FB_MBX && DEBUG_FS)) || ~FB_MBX_DEBUG
(HAS_IOMEM && (FB && ARCH_PXA)) || ~FB_MBX
(HAS_IOMEM && (FB && FSL_SOC)) || ~FB_FSL_DIU
(HAS_IOMEM && (FB && ARCH_PXA)) || ~FB_W100
(HAS_IOMEM && (FB && (SUPERH && HAVE_CLK))) || ~FB_SH_MOBILE_LCDC
(HAS_IOMEM && FB_TMIO) || (FB_TMIO_ACCELL => (HAS_IOMEM && FB_TMIO))
(HAS_IOMEM && FB_TMIO) || ((HAS_IOMEM && FB_TMIO) => FB_TMIO_ACCELL)
(HAS_IOMEM && (FB && MFD_CORE)) || ~FB_TMIO
(HAS_IOMEM && FB_S3C) || ~FB_S3C_DEBUG_REGWRITE
(HAS_IOMEM && (FB && ARCH_S3C64XX)) || ~FB_S3C
(HAS_IOMEM && FB_S3C2410) || ~FB_S3C2410_DEBUG
(HAS_IOMEM && (FB && ARCH_S3C2410)) || ~FB_S3C2410
(HAS_IOMEM && (FB && MFD_SM501)) || ~FB_SM501
(HAS_IOMEM && FB_PNX4008_DUM) || ~FB_PNX4008_DUM_RGB
(HAS_IOMEM && (FB && ARCH_PNX4008)) || ~FB_PNX4008_DUM
(HAS_IOMEM && (FB && PPC)) || ~FB_IBM_GXT4500
(HAS_IOMEM && FB_PS3) || ~FB_PS3_DEFAULT_SIZE_M
(HAS_IOMEM && (FB && PS3_PS3AV)) || ~FB_PS3
(HAS_IOMEM && (FB && (XILINX_VIRTEX || MICROBLAZE))) || ~FB_XILINX
(HAS_IOMEM && (FB && MIPS_COBALT)) || ~FB_COBALT
(HAS_IOMEM && (FB && (CPU_SUBTYPE_SH7760 || (CPU_SUBTYPE_SH7763 || (CPU_SUBTYPE_SH7720 || CPU_SUBTYPE_SH7721))))) || ~FB_SH7760
(HAS_IOMEM && (FB && ARCH_DAVINCI_DA8XX)) || ~FB_DA8XX
(HAS_IOMEM && FB) || ~FB_VIRTUAL
(HAS_IOMEM && (FB && XEN)) || (XEN_FBDEV_FRONTEND => (HAS_IOMEM && (FB && XEN)))
(HAS_IOMEM && (FB && XEN)) || ((HAS_IOMEM && (FB && XEN)) => XEN_FBDEV_FRONTEND)
(HAS_IOMEM && FB) || ~FB_METRONOME
(HAS_IOMEM && (PCI && FB_MB862XX)) || ~FB_MB862XX_PCI_GDC
(HAS_IOMEM && (FB_MB862XX && (OF && (~FB_MB862XX_PCI_GDC && PPC)))) || ~FB_MB862XX_LIME
(HAS_IOMEM && FB) || ~FB_MB862XX
(HAS_IOMEM && (FB && ARCH_EP93XX)) || ~FB_EP93XX
(HAS_IOMEM && (FB && FB_MB862XX_LIME)) || ~FB_PRE_INIT_FB
FB_MSM => (HAS_IOMEM && (FB && ARCH_MSM))
(HAS_IOMEM && (FB && ARCH_MSM)) => FB_MSM
(HAS_IOMEM && (FB && MX3_IPU)) || (FB_MX3 => (HAS_IOMEM && (FB && MX3_IPU)))
(HAS_IOMEM && (FB && MX3_IPU)) || ((HAS_IOMEM && (FB && MX3_IPU)) => FB_MX3)
(HAS_IOMEM && FB) || ~FB_BROADSHEET
(HAS_IOMEM && (FB && ARCH_OMAP)) || ~FB_OMAP
HAS_IOMEM || (FB => (DRM_KMS_HELPER && (HAS_IOMEM && DRM)))
HAS_IOMEM || ((DRM_KMS_HELPER && (HAS_IOMEM && DRM)) => FB)
(HAS_IOMEM && (MACH_OMAP_3430SDP || MACH_OMAP_LDP)) || ~FB_OMAP_LCD_VGA
HAS_IOMEM && (FB_OMAP && MACH_OVERO)
(HAS_IOMEM && (FB_OMAP && FB_OMAP_LCDC_EXTERNAL)) || ~FB_OMAP_LCDC_HWA742
(HAS_IOMEM && (FB_OMAP && FB_OMAP_LCDC_EXTERNAL)) || ~FB_OMAP_LCDC_BLIZZARD
(HAS_IOMEM && (FB_OMAP && FB_OMAP_LCDC_EXTERNAL)) || ~FB_OMAP_MANUAL_UPDATE
(HAS_IOMEM && FB_OMAP) || ~FB_OMAP_LCDC_EXTERNAL
(HAS_IOMEM && (FB_OMAP && SPI_MASTER)) || ~FB_OMAP_LCD_MIPID
(HAS_IOMEM && FB_OMAP) || ~FB_OMAP_BOOTLOADER_INIT
(HAS_IOMEM && FB_OMAP) || ~FB_OMAP_CONSISTENT_DMA_SIZE
(HAS_IOMEM && (FB_OMAP && ARCH_OMAP1)) || ~FB_OMAP_DMA_TUNE
(HAS_IOMEM && (LCD_CLASS_DEVICE && (SPI_MASTER && PXA_SHARPSL))) || ~LCD_CORGI
(HAS_IOMEM && (LCD_CLASS_DEVICE && (SPI_MASTER && GENERIC_GPIO))) || ~LCD_LMS283GF05
(HAS_IOMEM && (LCD_CLASS_DEVICE && SPI_MASTER)) || ~LCD_LTV350QV
LCD_ILI9320 => (LCD_VGG2432A4 && (HAS_IOMEM && (BACKLIGHT_LCD_SUPPORT && (LCD_CLASS_DEVICE && SPI_MASTER))))
(LCD_VGG2432A4 && (HAS_IOMEM && (BACKLIGHT_LCD_SUPPORT && (LCD_CLASS_DEVICE && SPI_MASTER)))) => LCD_ILI9320
(HAS_IOMEM && (LCD_CLASS_DEVICE && SPI_MASTER)) || ~LCD_TDO24M
(HAS_IOMEM && (BACKLIGHT_LCD_SUPPORT && (LCD_CLASS_DEVICE && SPI_MASTER))) || ~LCD_VGG2432A4
(HAS_IOMEM && LCD_CLASS_DEVICE) || ~LCD_PLATFORM
(HAS_IOMEM && (LCD_CLASS_DEVICE && (SPI && MACH_TOSA))) || ~LCD_TOSA
(HAS_IOMEM && (LCD_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) || (LCD_HP700 => (HAS_IOMEM && (LCD_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))))
(HAS_IOMEM && (LCD_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) || ((HAS_IOMEM && (LCD_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) => LCD_HP700)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || (LCD_CLASS_DEVICE => (HAS_IOMEM && BACKLIGHT_LCD_SUPPORT))
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) => LCD_CLASS_DEVICE)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && FB_ATMEL)) || (BACKLIGHT_ATMEL_LCDC => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (FB_ATMEL && (MACH_SAM9261EK || (MACH_SAM9G10EK || MACH_SAM9263EK))))))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && FB_ATMEL)) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (FB_ATMEL && (MACH_SAM9261EK || (MACH_SAM9G10EK || MACH_SAM9263EK))))) => BACKLIGHT_ATMEL_LCDC)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ATMEL_PWM)) || ~BACKLIGHT_ATMEL_PWM
(HAS_IOMEM && BACKLIGHT_CLASS_DEVICE) || (BACKLIGHT_GENERIC => (HAS_IOMEM && BACKLIGHT_CLASS_DEVICE))
(HAS_IOMEM && BACKLIGHT_CLASS_DEVICE) || ((HAS_IOMEM && BACKLIGHT_CLASS_DEVICE) => BACKLIGHT_GENERIC)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO)) || (BACKLIGHT_LOCOMO => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO)))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO)) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SHARP_LOCOMO)) => BACKLIGHT_LOCOMO)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1)) || (BACKLIGHT_OMAP1 => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1)))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1)) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_OMAP1)) => BACKLIGHT_OMAP1)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SH_HP6XX)) || (BACKLIGHT_HP680 => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SH_HP6XX)))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SH_HP6XX)) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && SH_HP6XX)) => BACKLIGHT_HP680)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) || (BACKLIGHT_HP700 => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (SA1100_JORNADA720_SSP && ~PREEMPT))) => BACKLIGHT_HP700)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (PCI && X86))) || ~BACKLIGHT_PROGEAR
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (LCD_CLASS_DEVICE && (PCI && (X86 && FB_LE80578))))) || ~BACKLIGHT_CARILLO_RANCH
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && HAVE_PWM)) || ~BACKLIGHT_PWM
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && PMIC_DA903X)) || ~BACKLIGHT_DA903X
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && X86)) || ~BACKLIGHT_MBP_NVIDIA
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && (I2C && (MACH_TOSA && LCD_TOSA)))) || ~BACKLIGHT_TOSA
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && X86)) || ~BACKLIGHT_SAHARA
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && MFD_WM831X)) || ~BACKLIGHT_WM831X
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX)) || (BACKLIGHT_ADX => (HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX)))
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX)) || ((HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && ARCH_PXA_ADX)) => BACKLIGHT_ADX)
(HAS_IOMEM && (BACKLIGHT_CLASS_DEVICE && PMIC_ADP5520)) || ~BACKLIGHT_ADP5520
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || (BACKLIGHT_CLASS_DEVICE => ((((((((((EEEPC_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (EXPERIMENTAL && ((RFKILL || ~RFKILL) && HOTPLUG_PCI))))))) || (ASUS_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (~ACPI_ASUS && INPUT)))))) || (THINKPAD_ACPI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || (USB_APPLEDISPLAY && (USB_SUPPORT && USB))) || (SONY_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && RFKILL)))))) || (ACPI_ASUS && (X86 && (X86_PLATFORM_DEVICES && ACPI)))) || (DRM_I915 && (AGP_INTEL && ACPI))) || (FB_BACKLIGHT && (HAS_IOMEM && FB))) || (ACPI_TOSHIBA && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || (HAS_IOMEM && BACKLIGHT_LCD_SUPPORT)))
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((ASUS_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (~ACPI_ASUS && INPUT))))) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((USB_APPLEDISPLAY && (USB_SUPPORT && USB)) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((SONY_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && RFKILL))))) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((ACPI_ASUS && (X86 && (X86_PLATFORM_DEVICES && ACPI))) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((DRM_I915 && (AGP_INTEL && ACPI)) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((FB_BACKLIGHT && (HAS_IOMEM && FB)) => BACKLIGHT_CLASS_DEVICE)
(HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) || ((HAS_IOMEM && BACKLIGHT_LCD_SUPPORT) => BACKLIGHT_CLASS_DEVICE)
HAS_IOMEM || (BACKLIGHT_LCD_SUPPORT => (((FB_BACKLIGHT && (HAS_IOMEM && FB)) || (THINKPAD_ACPI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || (USB_APPLEDISPLAY && (USB_SUPPORT && USB))))
HAS_IOMEM || ((FB_BACKLIGHT && (HAS_IOMEM && FB)) => BACKLIGHT_LCD_SUPPORT)
HAS_IOMEM || ((USB_APPLEDISPLAY && (USB_SUPPORT && USB)) => BACKLIGHT_LCD_SUPPORT)
HAS_IOMEM || ~DISPLAY_SUPPORT
(HAS_IOMEM && (VT && VGACON_SOFT_SCROLLBACK)) || ~VGACON_SOFT_SCROLLBACK_SIZE
(HAS_IOMEM && (VT && VGA_CONSOLE)) || ~VGACON_SOFT_SCROLLBACK
(HAS_IOMEM && (VT && (~ARCH_ACORN && (~ARCH_EBSA110 && (~c4xx && (~c8xx && (~SPARC && (~M68K && (~PARISC && (~FRV && (~ARCH_VERSATILE && (~SUPERH && (~BLACKFIN && (~AVR32 && (~MN10300 && (EMBEDDED || ~X86)))))))))))))))) || (VGA_CONSOLE => (HAS_IOMEM && (VT && (~ARCH_ACORN && (~ARCH_EBSA110 && (~c4xx && (~c8xx && (~SPARC && (~M68K && (~PARISC && (~FRV && (~ARCH_VERSATILE && (~SUPERH && (~BLACKFIN && (~AVR32 && ~MN10300)))))))))))))))
(HAS_IOMEM && (VT && (~ARCH_ACORN && (~ARCH_EBSA110 && (~c4xx && (~c8xx && (~SPARC && (~M68K && (~PARISC && (~FRV && (~ARCH_VERSATILE && (~SUPERH && (~BLACKFIN && (~AVR32 && (~MN10300 && (EMBEDDED || ~X86)))))))))))))))) || ((HAS_IOMEM && (VT && (~ARCH_ACORN && (~ARCH_EBSA110 && (~c4xx && (~c8xx && (~SPARC && (~M68K && (~PARISC && (~FRV && (~ARCH_VERSATILE && (~SUPERH && (~BLACKFIN && (~AVR32 && ~MN10300)))))))))))))) => VGA_CONSOLE)
(HAS_IOMEM && (VT && (~M68K && (~PARISC && ISA)))) || ~MDA_CONSOLE
(HAS_IOMEM && (VT && SGI_IP22)) || ~SGI_NEWPORT_CONSOLE
DUMMY_CONSOLE => (HAS_IOMEM && VT)
(HAS_IOMEM && (VT && (PARISC && DUMMY_CONSOLE))) || ~DUMMY_CONSOLE_COLUMNS
(HAS_IOMEM && (VT && (PARISC && DUMMY_CONSOLE))) || ~DUMMY_CONSOLE_ROWS
(HAS_IOMEM && (VT && FRAMEBUFFER_CONSOLE)) || ~FRAMEBUFFER_CONSOLE_DETECT_PRIMARY
(HAS_IOMEM && (VT && FRAMEBUFFER_CONSOLE)) || ~FRAMEBUFFER_CONSOLE_ROTATION
(HAS_IOMEM && (VT && FB)) || (FRAMEBUFFER_CONSOLE => (DRM_KMS_HELPER && (HAS_IOMEM && (DRM && ~EMBEDDED))))
(HAS_IOMEM && (VT && FB)) || ((DRM_KMS_HELPER && (HAS_IOMEM && (DRM && ~EMBEDDED))) => FRAMEBUFFER_CONSOLE)
(HAS_IOMEM && (VT && PARISC)) || (STI_CONSOLE => ((FB_STI && (HAS_IOMEM && (FB && PARISC))) || (HAS_IOMEM && (VT && PARISC))))
(HAS_IOMEM && (VT && PARISC)) || ((FB_STI && (HAS_IOMEM && (FB && PARISC))) => STI_CONSOLE)
(HAS_IOMEM && (VT && PARISC)) || ((HAS_IOMEM && (VT && PARISC)) => STI_CONSOLE)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS))) || (FONT_8x8 => (HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && (~SPARC && ~FONTS)))))
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS))) || ((HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && (~SPARC && ~FONTS)))) => FONT_8x8)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || (FONT_8x16 => ((((((FB_VGA16 && (HAS_IOMEM && (FB && ((X86 || PPC) && FRAMEBUFFER_CONSOLE)))) || (FB_S3 && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE))))) || (FB_ARK && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE))))) || (USB_SISUSBVGA_CON && (USB_SUPPORT && VT))) || (FB_VT8623 && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE))))) || (HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && (~SPARC && ~FONTS))))))
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((FB_VGA16 && (HAS_IOMEM && (FB && ((X86 || PPC) && FRAMEBUFFER_CONSOLE)))) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((FB_S3 && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE)))) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((FB_ARK && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE)))) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((USB_SISUSBVGA_CON && (USB_SUPPORT && VT)) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((FB_VT8623 && (HAS_IOMEM && (FB && (PCI && FRAMEBUFFER_CONSOLE)))) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && FONTS))) || ((HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || (SGI_NEWPORT_CONSOLE || (STI_CONSOLE || USB_SISUSBVGA_CON))) && (~SPARC && ~FONTS)))) => FONT_8x16)
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS))) || (FONT_6x11 => (HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && (~SPARC && (~FONTS && MAC))))))
(HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && FONTS))) || ((HAS_IOMEM && (VT && ((FRAMEBUFFER_CONSOLE || STI_CONSOLE) && (~SPARC && (~FONTS && MAC))))) => FONT_6x11)
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || ~FONT_7x14
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || (FONT_PEARL_8x8 => (HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && (~SPARC && (~FONTS && AMIGA))))))
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || ((HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && (~SPARC && (~FONTS && AMIGA))))) => FONT_PEARL_8x8)
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || (FONT_ACORN_8x8 => (HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && (~SPARC && (~FONTS && (ARM && ARCH_ACORN)))))))
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || ((HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && (~SPARC && (~FONTS && (ARM && ARCH_ACORN)))))) => FONT_ACORN_8x8)
(HAS_IOMEM && (VT && (~SPARC && FONTS))) || ~FONT_MINI_4x6
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE || STI_CONSOLE))) || ~FONTS
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && ((~SPARC && FONTS) || SPARC)))) || ~FONT_SUN8x16
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && ((~SPARC && FONTS) || SPARC)))) || ~FONT_SUN12x22
(HAS_IOMEM && (VT && (FRAMEBUFFER_CONSOLE && FONTS))) || ~FONT_10x18
FB_LOGO_EXTRA => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (FB && SPU_BASE))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || (LOGO_LINUX_MONO => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) => LOGO_LINUX_MONO)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || (LOGO_LINUX_VGA16 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) => LOGO_LINUX_VGA16)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || (LOGO_LINUX_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && LOGO)) => LOGO_LINUX_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) || (LOGO_BLACKFIN_VGA16 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) => LOGO_BLACKFIN_VGA16)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) || (LOGO_BLACKFIN_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && BLACKFIN))) => LOGO_BLACKFIN_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (MACH_DECSTATION || ALPHA)))) || (LOGO_DEC_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (MACH_DECSTATION || ALPHA)))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (MACH_DECSTATION || ALPHA)))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (MACH_DECSTATION || ALPHA)))) => LOGO_DEC_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && MAC))) || (LOGO_MAC_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && MAC))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && MAC))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && MAC))) => LOGO_MAC_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && PARISC))) || (LOGO_PARISC_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && PARISC))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && PARISC))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && PARISC))) => LOGO_PARISC_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (SGI_IP22 || (SGI_IP27 || (SGI_IP32 || X86_VISWS)))))) || (LOGO_SGI_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (SGI_IP22 || (SGI_IP27 || (SGI_IP32 || X86_VISWS)))))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (SGI_IP22 || (SGI_IP27 || (SGI_IP32 || X86_VISWS)))))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && (SGI_IP22 || (SGI_IP27 || (SGI_IP32 || X86_VISWS)))))) => LOGO_SGI_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SPARC))) || (LOGO_SUN_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SPARC))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SPARC))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SPARC))) => LOGO_SUN_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || (LOGO_SUPERH_MONO => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) => LOGO_SUPERH_MONO)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || (LOGO_SUPERH_VGA16 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) => LOGO_SUPERH_VGA16)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || (LOGO_SUPERH_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && SUPERH))) => LOGO_SUPERH_CLUT224)
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && M32R))) || (LOGO_M32R_CLUT224 => (HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && M32R))))
(HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && M32R))) || ((HAS_IOMEM && ((FB || SGI_NEWPORT_CONSOLE) && (LOGO && M32R))) => LOGO_M32R_CLUT224)
(HAS_IOMEM && (FB || SGI_NEWPORT_CONSOLE)) || ~LOGO
SOUND_OSS_CORE => (((DMASOUND && SOUND) || (SOUND_PRIME && (SOUND && ~M68K))) || (SND_OSSEMUL && (SOUND && (~M68K && SND))))
(DMASOUND && SOUND) => SOUND_OSS_CORE
(SOUND_PRIME && (SOUND && ~M68K)) => SOUND_OSS_CORE
(SND_OSSEMUL && (SOUND && (~M68K && SND))) => SOUND_OSS_CORE
(SOUND && SOUND_OSS_CORE) || (SOUND_OSS_CORE_PRECLAIM => (SOUND && SOUND_OSS_CORE))
(SOUND && SOUND_OSS_CORE) || ((SOUND && SOUND_OSS_CORE) => SOUND_OSS_CORE_PRECLAIM)
(ATARI && SOUND) || ~DMASOUND_ATARI
(AMIGA && SOUND) || ~DMASOUND_PAULA
(Q40 && SOUND) || ~DMASOUND_Q40
DMASOUND => (((DMASOUND_ATARI && (ATARI && SOUND)) || (DMASOUND_PAULA && (AMIGA && SOUND))) || (DMASOUND_Q40 && (Q40 && SOUND)))
(DMASOUND_ATARI && (ATARI && SOUND)) => DMASOUND
(DMASOUND_PAULA && (AMIGA && SOUND)) => DMASOUND
(DMASOUND_Q40 && (Q40 && SOUND)) => DMASOUND
SND_TIMER => (((((((SND_OPL3_LIB && (SOUND && (~M68K && SND))) || (SND_VIRMIDI && (SOUND && (~M68K && (SND && (SND_DRIVERS && SND_SEQUENCER)))))) || (SND_PCM && (SOUND && (~M68K && SND)))) || (SND_HRTIMER && (SOUND && (~M68K && (SND && HIGH_RES_TIMERS))))) || (SND_OPL4_LIB && (SOUND && (~M68K && SND)))) || (SND_SEQUENCER && (SOUND && (~M68K && SND)))) || (SND_RTCTIMER && (SOUND && (~M68K && (SND && RTC)))))
(SND_OPL3_LIB && (SOUND && (~M68K && SND))) => SND_TIMER
(SND_VIRMIDI && (SOUND && (~M68K && (SND && (SND_DRIVERS && SND_SEQUENCER))))) => SND_TIMER
(SND_PCM && (SOUND && (~M68K && SND))) => SND_TIMER
(SND_HRTIMER && (SOUND && (~M68K && (SND && HIGH_RES_TIMERS)))) => SND_TIMER
(SND_OPL4_LIB && (SOUND && (~M68K && SND))) => SND_TIMER
(SND_SEQUENCER && (SOUND && (~M68K && SND))) => SND_TIMER
(SND_RTCTIMER && (SOUND && (~M68K && (SND && RTC)))) => SND_TIMER
SND_PCM => (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MONA && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_RME96 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_GINA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))))) || (SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SUN_CS4231 && (SOUND && (~M68K && (SND && SND_SPARC))))) || (SND_PXA2XX_PCM && (SOUND && (~M68K && (SND && SND_ARM))))) || (SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SUN_AMD7930 && (SOUND && (~M68K && (SND && (SND_SPARC && SBUS)))))) || (SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (SND_ARMAACI && (SOUND && (~M68K && (SND && (SND_ARM && ARM_AMBA)))))) || (SND_INDIGOIOX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS5535AUDIO && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_GINA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB)))))) || (SND_OXYGEN_LIB && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MIA && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ATMEL_ABDAC && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32))))))) || (SND_GUSCLASSIC && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SUN_DBRI && (SOUND && (~M68K && (SND && (SND_SPARC && SBUS)))))) || (SND_AT73C213 && (SOUND && (~M68K && (SND && (SND_SPI && ATMEL_SSC)))))) || (SND_HARMONY && (SOUND && (~M68K && (SND && SND_GSC))))) || (SND_DUMMY && (SOUND && (~M68K && (SND && SND_DRIVERS))))) || (SND_SB16_DSP && (SOUND && (~M68K && SND)))) || (SND_POWERMAC && (SOUND && (~M68K && (SND && (SND_PPC && (I2C && (INPUT && PPC_PMAC)))))))) || (SND_INDIGODJ && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ENS1370 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_DARLA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_PCXHR && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SB8_DSP && (SOUND && (~M68K && SND)))) || (VIDEO_CX88_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (SND && EXPERIMENTAL))))))) || (SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_INDIGO && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CTXFI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_WSS_LIB && (SOUND && (~M68K && SND)))) || (SND_RME9652 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AC97_CODEC && (SOUND && (~M68K && SND)))) || (SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB)))))) || (SND_PCSP && (SOUND && (~M68K && (SND && (SND_DRIVERS && (PCSPKR_PLATFORM && (X86 && (HIGH_RES_TIMERS && (INPUT && EXPERIMENTAL)))))))))) || (SND_SOC && (SOUND && (~M68K && SND)))) || (SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA))))))))) || (VIDEO_CX25821_ALSA && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_CX25821 && (SND && EXPERIMENTAL)))))) || (SND_RME32 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AICA && (SOUND && (~M68K && (SND && (SND_SUPERH && SH_DREAMCAST)))))) || (SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (VIDEO_CX231XX_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && SND)))))))) || (SND_MX1_MX2_SOC && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_MX2 || ARCH_MX1))))))) || (SND_ATMEL_AC97C && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32))))))) || (SND_BT87X && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_KORG1212 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))))) || (SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI))))) || (USB_AUDIO && SND)) || (SND_PS3 && (SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV)))))) || (SND_MIXART && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_DARLA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (VIDEO_EM28XX_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && SND)))))))) || (SND_PCM_OSS && (SOUND && (~M68K && SND)))) || (SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AOA && (SOUND && (~M68K && (SND && PPC_PMAC))))) || (SND_PDAUDIOCF && (SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA)))))) || (SND_INDIGODJX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_INDIGOIO && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AOA_SOUNDBUS && (SOUND && (~M68K && (SND && SND_AOA))))) || (VIDEO_SAA7134_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && SND)))))) || (SND_AU1X00 && (SOUND && (~M68K && (SND && (SND_MIPS && (SOC_AU1000 || (SOC_AU1100 || SOC_AU1500)))))))) || (SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_HDA_INTEL && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_VX_LIB && (SOUND && (~M68K && SND)))) || (SND_LX6464ES && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_MONA && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_RME96 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_PCM
(SND_GINA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(VIDEO_GO7007 && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND))))))) => SND_PCM
(SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_PCM
(SND_SUN_CS4231 && (SOUND && (~M68K && (SND && SND_SPARC)))) => SND_PCM
(SND_PXA2XX_PCM && (SOUND && (~M68K && (SND && SND_ARM)))) => SND_PCM
(SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_SUN_AMD7930 && (SOUND && (~M68K && (SND && (SND_SPARC && SBUS))))) => SND_PCM
(SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => SND_PCM
(SND_ARMAACI && (SOUND && (~M68K && (SND && (SND_ARM && ARM_AMBA))))) => SND_PCM
(SND_INDIGOIOX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_CS5535AUDIO && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_GINA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_PCM
(SND_OXYGEN_LIB && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_MIA && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_ATMEL_ABDAC && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32)))))) => SND_PCM
(SND_GUSCLASSIC && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_PCM
(SND_SUN_DBRI && (SOUND && (~M68K && (SND && (SND_SPARC && SBUS))))) => SND_PCM
(SND_AT73C213 && (SOUND && (~M68K && (SND && (SND_SPI && ATMEL_SSC))))) => SND_PCM
(SND_HARMONY && (SOUND && (~M68K && (SND && SND_GSC)))) => SND_PCM
(SND_DUMMY && (SOUND && (~M68K && (SND && SND_DRIVERS)))) => SND_PCM
(SND_SB16_DSP && (SOUND && (~M68K && SND))) => SND_PCM
(SND_POWERMAC && (SOUND && (~M68K && (SND && (SND_PPC && (I2C && (INPUT && PPC_PMAC))))))) => SND_PCM
(SND_INDIGODJ && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_ENS1370 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_PCM
(SND_DARLA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_PCXHR && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_SB8_DSP && (SOUND && (~M68K && SND))) => SND_PCM
(VIDEO_CX88_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_CX88 && (SND && EXPERIMENTAL)))))) => SND_PCM
(SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_INDIGO && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_PCM
(SND_CTXFI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_WSS_LIB && (SOUND && (~M68K && SND))) => SND_PCM
(SND_RME9652 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_AC97_CODEC && (SOUND && (~M68K && SND))) => SND_PCM
(SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_PCM
(SND_PCSP && (SOUND && (~M68K && (SND && (SND_DRIVERS && (PCSPKR_PLATFORM && (X86 && (HIGH_RES_TIMERS && (INPUT && EXPERIMENTAL))))))))) => SND_PCM
(SND_SOC && (SOUND && (~M68K && SND))) => SND_PCM
(SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA)))))))) => SND_PCM
(VIDEO_CX25821_ALSA && (STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_CX25821 && (SND && EXPERIMENTAL))))) => SND_PCM
(SND_RME32 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_AICA && (SOUND && (~M68K && (SND && (SND_SUPERH && SH_DREAMCAST))))) => SND_PCM
(SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(VIDEO_CX231XX_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_CX231XX && SND))))))) => SND_PCM
(SND_MX1_MX2_SOC && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_MX2 || ARCH_MX1)))))) => SND_PCM
(SND_ATMEL_AC97C && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32)))))) => SND_PCM
(SND_BT87X && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_KORG1212 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API))))) => SND_PCM
(SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(USB_AUDIO && SND) => SND_PCM
(SND_PS3 && (SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV))))) => SND_PCM
(SND_MIXART && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_DARLA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(VIDEO_EM28XX_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (V4L_USB_DRIVERS && (USB && (VIDEO_EM28XX && SND))))))) => SND_PCM
(SND_PCM_OSS && (SOUND && (~M68K && SND))) => SND_PCM
(SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_AOA && (SOUND && (~M68K && (SND && PPC_PMAC)))) => SND_PCM
(SND_PDAUDIOCF && (SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA))))) => SND_PCM
(SND_INDIGODJX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_INDIGOIO && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_AOA_SOUNDBUS && (SOUND && (~M68K && (SND && SND_AOA)))) => SND_PCM
(VIDEO_SAA7134_ALSA && (MEDIA_SUPPORT && (VIDEO_CAPTURE_DRIVERS && (VIDEO_V4L2 && (VIDEO_SAA7134 && SND))))) => SND_PCM
(SND_AU1X00 && (SOUND && (~M68K && (SND && (SND_MIPS && (SOC_AU1000 || (SOC_AU1100 || SOC_AU1500))))))) => SND_PCM
(SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => SND_PCM
(SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_PCM
(SND_HDA_INTEL && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
(SND_VX_LIB && (SOUND && (~M68K && SND))) => SND_PCM
(SND_LX6464ES && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_PCM
SND_HWDEP => ((((((((((((((SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB))))) || (SND_OPL3_LIB && (SOUND && (~M68K && SND)))) || (SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB)))))) || (SND_MIXART && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_HDA_HWDEP && (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))) || (SND_USB_US122L && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 && EXPERIMENTAL)))))))) || (SND_OPL4_LIB && (SOUND && (~M68K && SND)))) || (SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA))))))))) || (SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_PCXHR && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_VX_LIB && (SOUND && (~M68K && SND)))) || (SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_HWDEP
(SND_OPL3_LIB && (SOUND && (~M68K && SND))) => SND_HWDEP
(SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_HWDEP
(SND_MIXART && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_HWDEP
(SND_HDA_HWDEP && (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL))))) => SND_HWDEP
(SND_USB_US122L && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 && EXPERIMENTAL))))))) => SND_HWDEP
(SND_OPL4_LIB && (SOUND && (~M68K && SND))) => SND_HWDEP
(SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA)))))))) => SND_HWDEP
(SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_HWDEP
(SND_PCXHR && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_HWDEP
(SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_HWDEP
(SND_VX_LIB && (SOUND && (~M68K && SND))) => SND_HWDEP
(SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_HWDEP
(SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_HWDEP
SND_RAWMIDI => (((((((((((((((((((((((((((((((((SND_INTERWAVE_STB && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) || (SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MONA && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB)))))) || (SND_VIRMIDI && (SOUND && (~M68K && (SND && (SND_DRIVERS && SND_SEQUENCER)))))) || (SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA))))))))) || (SND_PORTMAN2X4 && (SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT)))))) || (SND_INTERWAVE && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (USB_MIDI_GADGET && (SND && EXPERIMENTAL))) || (SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SERIAL_U16550 && (SOUND && (~M68K && (SND && SND_DRIVERS))))) || (SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB)))))) || (SND_CS46XX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MIA && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MTPAV && (SOUND && (~M68K && (SND && SND_DRIVERS))))) || (SND_MPU401_UART && (SOUND && (~M68K && SND)))) || (SND_GUSCLASSIC && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_GUSMAX && (SOUND && (~M68K && (SND && SND_ISA))))) || (LINE6_USB && (STAGING && (~STAGING_EXCLUDE_BUILD && (USB && SND))))) || (SND_USB_US122L && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 && EXPERIMENTAL)))))))) || (SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ENS1370 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MTS64 && (SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT)))))) || (SND_EMU10K1X && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ENS1371 && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_INTERWAVE_STB && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_RAWMIDI
(SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_MONA && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_RAWMIDI
(SND_USB_CAIAQ && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_RAWMIDI
(SND_VIRMIDI && (SOUND && (~M68K && (SND && (SND_DRIVERS && SND_SEQUENCER))))) => SND_RAWMIDI
(SND_USB_USX2Y && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA)))))))) => SND_RAWMIDI
(SND_PORTMAN2X4 && (SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT))))) => SND_RAWMIDI
(SND_INTERWAVE && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_RAWMIDI
(USB_MIDI_GADGET && (SND && EXPERIMENTAL)) => SND_RAWMIDI
(SND_LAYLA20 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_HDSP && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_SERIAL_U16550 && (SOUND && (~M68K && (SND && SND_DRIVERS)))) => SND_RAWMIDI
(SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_USB_AUDIO && (SOUND && (~M68K && (SND && (SND_USB && USB))))) => SND_RAWMIDI
(SND_CS46XX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_ECHO3G && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_MIA && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_MTPAV && (SOUND && (~M68K && (SND && SND_DRIVERS)))) => SND_RAWMIDI
(SND_MPU401_UART && (SOUND && (~M68K && SND))) => SND_RAWMIDI
(SND_GUSCLASSIC && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_RAWMIDI
(SND_GUSMAX && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_RAWMIDI
(LINE6_USB && (STAGING && (~STAGING_EXCLUDE_BUILD && (USB && SND)))) => SND_RAWMIDI
(SND_USB_US122L && (SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 && EXPERIMENTAL))))))) => SND_RAWMIDI
(SND_LAYLA24 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_ENS1370 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_MTS64 && (SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT))))) => SND_RAWMIDI
(SND_EMU10K1X && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_HDSPM && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
(SND_ENS1371 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_RAWMIDI
SND_JACK => ((SND_SOC && (SOUND && (~M68K && (SND && (INPUT || INPUT))))) || (SND_HDA_INPUT_JACK && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && (INPUT || INPUT))))))))
(SOUND && (~M68K && (SND && SND_SEQUENCER))) || ~SND_SEQ_DUMMY
(SOUND && (~M68K && SND)) || ~SND_SEQUENCER
SND_OSSEMUL => (((SND_MIXER_OSS && (SOUND && (~M68K && SND))) || (SND_SEQUENCER_OSS && (SOUND && (~M68K && (SND && SND_SEQUENCER))))) || (SND_PCM_OSS && (SOUND && (~M68K && SND))))
(SND_MIXER_OSS && (SOUND && (~M68K && SND))) => SND_OSSEMUL
(SND_SEQUENCER_OSS && (SOUND && (~M68K && (SND && SND_SEQUENCER)))) => SND_OSSEMUL
(SND_PCM_OSS && (SOUND && (~M68K && SND))) => SND_OSSEMUL
(SOUND && (~M68K && SND)) || ~SND_MIXER_OSS
(SOUND && (~M68K && (SND && SND_PCM_OSS))) || (SND_PCM_OSS_PLUGINS => (SOUND && (~M68K && (SND && SND_PCM_OSS))))
(SOUND && (~M68K && (SND && SND_PCM_OSS))) || ((SOUND && (~M68K && (SND && SND_PCM_OSS))) => SND_PCM_OSS_PLUGINS)
(SOUND && (~M68K && SND)) || ~SND_PCM_OSS
(SOUND && (~M68K && (SND && SND_SEQUENCER))) || ~SND_SEQUENCER_OSS
(SOUND && (~M68K && (SND && (SND_HRTIMER && SND_SEQUENCER)))) || (SND_SEQ_HRTIMER_DEFAULT => (SOUND && (~M68K && (SND && (SND_HRTIMER && SND_SEQUENCER)))))
(SOUND && (~M68K && (SND && (SND_HRTIMER && SND_SEQUENCER)))) || ((SOUND && (~M68K && (SND && (SND_HRTIMER && SND_SEQUENCER)))) => SND_SEQ_HRTIMER_DEFAULT)
(SOUND && (~M68K && (SND && HIGH_RES_TIMERS))) || ~SND_HRTIMER
(SOUND && (~M68K && (SND && (SND_RTCTIMER && (SND_SEQUENCER && ~SND_SEQ_HRTIMER_DEFAULT))))) || (SND_SEQ_RTCTIMER_DEFAULT => (SOUND && (~M68K && (SND && (SND_RTCTIMER && (SND_SEQUENCER && ~SND_SEQ_HRTIMER_DEFAULT))))))
(SOUND && (~M68K && (SND && (SND_RTCTIMER && (SND_SEQUENCER && ~SND_SEQ_HRTIMER_DEFAULT))))) || ((SOUND && (~M68K && (SND && (SND_RTCTIMER && (SND_SEQUENCER && ~SND_SEQ_HRTIMER_DEFAULT))))) => SND_SEQ_RTCTIMER_DEFAULT)
(SOUND && (~M68K && (SND && RTC))) || ~SND_RTCTIMER
(SOUND && (~M68K && SND)) || ~SND_DYNAMIC_MINORS
(SOUND && (~M68K && SND)) || (SND_SUPPORT_OLD_API => (SOUND && (~M68K && SND)))
(SOUND && (~M68K && SND)) || ((SOUND && (~M68K && SND)) => SND_SUPPORT_OLD_API)
(SOUND && (~M68K && (SND && PROC_FS))) || (SND_VERBOSE_PROCFS => (SOUND && (~M68K && (SND && PROC_FS))))
(SOUND && (~M68K && (SND && PROC_FS))) || ((SOUND && (~M68K && (SND && PROC_FS))) => SND_VERBOSE_PROCFS)
(SOUND && (~M68K && SND)) || ~SND_VERBOSE_PRINTK
(SOUND && (~M68K && (SND && SND_DEBUG))) || ~SND_DEBUG_VERBOSE
(SOUND && (~M68K && (SND && (SND_DEBUG && SND_VERBOSE_PROCFS)))) || ~SND_PCM_XRUN_DEBUG
(SOUND && (~M68K && SND)) || ~SND_DEBUG
SND_VMASTER => (((((SND_HDA_INTEL && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_POWERMAC && (SOUND && (~M68K && (SND && (SND_PPC && (I2C && (INPUT && PPC_PMAC)))))))) || (SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AC97_CODEC && (SOUND && (~M68K && SND)))) || (SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_HDA_INTEL && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_VMASTER
(SND_POWERMAC && (SOUND && (~M68K && (SND && (SND_PPC && (I2C && (INPUT && PPC_PMAC))))))) => SND_VMASTER
(SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_VMASTER
(SND_AC97_CODEC && (SOUND && (~M68K && SND))) => SND_VMASTER
(SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_VMASTER
SND_DMA_SGBUF => (SOUND && (~M68K && (SND && X86)))
(SOUND && (~M68K && (SND && X86))) => SND_DMA_SGBUF
SND_RAWMIDI_SEQ => ((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_RAWMIDI))
((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_RAWMIDI)) => SND_RAWMIDI_SEQ
SND_OPL3_LIB_SEQ => ((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_OPL3_LIB))
((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_OPL3_LIB)) => SND_OPL3_LIB_SEQ
SND_OPL4_LIB_SEQ => ((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_OPL4_LIB))
((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_OPL4_LIB)) => SND_OPL4_LIB_SEQ
SND_SBAWE_SEQ => ((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_SBAWE))
((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_SBAWE)) => SND_SBAWE_SEQ
SND_EMU10K1_SEQ => ((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_EMU10K1))
((SOUND && (~M68K && SND)) && (SND_SEQUENCER && SND_EMU10K1)) => SND_EMU10K1_SEQ
SND_MPU401_UART => (((((((((((((((((((((((((((((((((((((((((SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES1968 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AU8810 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_ICE1712 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_TRIDENT && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT)))))) || (SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))))) || (SND_VIA82XX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_OXYGEN_LIB && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AU8820 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ALI5451 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))))) || (SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AU8830 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_MPU401 && (SOUND && (~M68K && (SND && SND_DRIVERS))))) || (SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))))
(SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_ES1968 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_AU8810 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_ICE1712 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_TRIDENT && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_MSND_PINNACLE && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => SND_MPU401_UART
(SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_MPU401_UART
(SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT))))) => SND_MPU401_UART
(SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_MPU401_UART
(SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API))))) => SND_MPU401_UART
(SND_VIA82XX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_OXYGEN_LIB && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_AU8820 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_ALI5451 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_MPU401_UART
(SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_MSND_CLASSIC && (SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL)))))) => SND_MPU401_UART
(SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_AU8830 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_MPU401_UART
(SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_MPU401_UART
(SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_MPU401_UART
(SND_MPU401 && (SOUND && (~M68K && (SND && SND_DRIVERS)))) => SND_MPU401_UART
(SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_MPU401_UART
SND_OPL3_LIB => (((((((((((((((((((((((((((((SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT)))))) || (SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))))) || (SND_ADLIB && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_AZT3328 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_ES1688 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_ES18XX && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_OPL3_LIB
(SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT))))) => SND_OPL3_LIB
(SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_OPL3_LIB
(SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API))))) => SND_OPL3_LIB
(SND_ADLIB && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_OPL3_LIB
(SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_GUSEXTREME && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL3_LIB
(SND_AD1816A && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_OPL3_LIB
(SND_CMIPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
(SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OPL3_LIB
SND_OPL4_LIB => (((SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) || (SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA)))))
(SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL4_LIB
(SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL4_LIB
(SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_OPL4_LIB
SND_VX_LIB => ((SND_VXPOCKET && (SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA))))) || (SND_VX222 && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_VXPOCKET && (SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA))))) => SND_VX_LIB
(SND_VX222 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_VX_LIB
SND_AC97_CODEC => (((((((((((((((((((((((((((((((((((((((((SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ES1968 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_INTEL8X0 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AU8810 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ICE1712 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_TRIDENT && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_ML403_AC97CR && (SOUND && (~M68K && (SND && (SND_DRIVERS && XILINX_VIRTEX)))))) || (SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA)))))) || (SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ATMEL_AC97C && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32))))))) || (SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ARMAACI && (SOUND && (~M68K && (SND && (SND_ARM && ARM_AMBA)))))) || (SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_MAESTRO3 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS5535AUDIO && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_NM256 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AD1889 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS46XX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_VIA82XX && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_PXA2XX_LIB && (SOUND && (~M68K && (SND && (SND_ARM && SND_PXA2XX_LIB_AC97)))))) || (SND_AU8820 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_ALI5451 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SOC_AC97_CODEC && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_INTEL8X0M && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ATIIXP_MODEM && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AU1X00 && (SOUND && (~M68K && (SND && (SND_MIPS && (SOC_AU1000 || (SOC_AU1100 || SOC_AU1500)))))))) || (SND_VIA82XX_MODEM && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_ATIIXP && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_AU8830 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_EMU10K1X && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_SIS7019 && (SOUND && (~M68K && (SND && (SND_PCI && (X86 && ~X86_64))))))) || (SND_ENS1371 && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_RIPTIDE && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ALS300 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ES1968 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_INTEL8X0 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_AU8810 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ICE1712 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_AC97_CODEC
(SND_TRIDENT && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_AC97_CODEC
(SND_ML403_AC97CR && (SOUND && (~M68K && (SND && (SND_DRIVERS && XILINX_VIRTEX))))) => SND_AC97_CODEC
(SND_ES1938 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) => SND_AC97_CODEC
(SND_EMU10K1 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ATMEL_AC97C && (SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32)))))) => SND_AC97_CODEC
(SND_SONICVIBES && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ARMAACI && (SOUND && (~M68K && (SND && (SND_ARM && ARM_AMBA))))) => SND_AC97_CODEC
(SND_YMFPCI && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_MAESTRO3 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_CS5535AUDIO && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_CA0106 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_NM256 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_AD1889 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_CS46XX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_VIA82XX && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_PXA2XX_LIB && (SOUND && (~M68K && (SND && (SND_ARM && SND_PXA2XX_LIB_AC97))))) => SND_AC97_CODEC
(SND_AU8820 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_AC97_CODEC
(SND_ALI5451 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ICE1724 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_SOC_AC97_CODEC && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_AC97_CODEC
(SND_INTEL8X0M && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ATIIXP_MODEM && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_AU1X00 && (SOUND && (~M68K && (SND && (SND_MIPS && (SOC_AU1000 || (SOC_AU1100 || SOC_AU1500))))))) => SND_AC97_CODEC
(SND_VIA82XX_MODEM && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_FM801 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_ATIIXP && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_AU8830 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_EMU10K1X && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_CS4281 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SND_SIS7019 && (SOUND && (~M68K && (SND && (SND_PCI && (X86 && ~X86_64)))))) => SND_AC97_CODEC
(SND_ENS1371 && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_AC97_CODEC
(SOUND && (~M68K && (SND && (SND_DRIVERS && (PCSPKR_PLATFORM && (X86 && (HIGH_RES_TIMERS && (INPUT && EXPERIMENTAL)))))))) || ~SND_PCSP
(SOUND && (~M68K && (SND && SND_DRIVERS))) || ~SND_DUMMY
(SOUND && (~M68K && (SND && (SND_DRIVERS && SND_SEQUENCER)))) || ~SND_VIRMIDI
(SOUND && (~M68K && (SND && SND_DRIVERS))) || ~SND_MTPAV
(SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT)))) || ~SND_MTS64
(SOUND && (~M68K && (SND && SND_DRIVERS))) || ~SND_SERIAL_U16550
(SOUND && (~M68K && (SND && SND_DRIVERS))) || ~SND_MPU401
(SOUND && (~M68K && (SND && (SND_DRIVERS && PARPORT)))) || ~SND_PORTMAN2X4
(SOUND && (~M68K && (SND && (SND_DRIVERS && XILINX_VIRTEX)))) || ~SND_ML403_AC97CR
(SOUND && (~M68K && (SND && (SND_DRIVERS && SND_AC97_POWER_SAVE)))) || ~SND_AC97_POWER_SAVE_DEFAULT
(SOUND && (~M68K && (SND && (SND_DRIVERS && SND_AC97_CODEC)))) || ~SND_AC97_POWER_SAVE
(SOUND && (~M68K && SND)) || (SND_DRIVERS => (SOUND && (~M68K && SND)))
(SOUND && (~M68K && SND)) || ((SOUND && (~M68K && SND)) => SND_DRIVERS)
SND_WSS_LIB => (((((((((((((((((SND_INTERWAVE_STB && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) || (SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_GUSMAX && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SGALAXY && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CS4231 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_INTERWAVE && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_AD1848 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT))))))
(SND_INTERWAVE_STB && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_WSS_LIB
(SND_WAVEFRONT && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_OPTI93X && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_GUSMAX && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_OPTI92X_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_SGALAXY && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_CS4231 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_AZT2320 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_WSS_LIB
(SND_INTERWAVE && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_WSS_LIB
(SND_CS4236 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_OPTI92X_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_AD1848 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_OPL3SA2 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_MIRO && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_SSCAPE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_WSS_LIB
(SND_SC6000 && (SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT))))) => SND_WSS_LIB
SND_SB_COMMON => (((SND_SB8_DSP && (SOUND && (~M68K && SND))) || (SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))))) || (SND_SB16_DSP && (SOUND && (~M68K && SND))))
(SND_SB8_DSP && (SOUND && (~M68K && SND))) => SND_SB_COMMON
(SND_ALS4000 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API))))) => SND_SB_COMMON
(SND_SB16_DSP && (SOUND && (~M68K && SND))) => SND_SB_COMMON
SND_SB8_DSP => ((SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) || (SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA)))))
(SND_ES968 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_SB8_DSP
(SND_SB8 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_SB8_DSP
SND_SB16_DSP => ((((((SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) || (SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_CS5530 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))))) || (SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA))))) || (SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP)))))) || (SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA)))))
(SND_ALS100 && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_SB16_DSP
(SND_CMI8330 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_SB16_DSP
(SND_CS5530 && (SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API))))) => SND_SB16_DSP
(SND_SBAWE && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_SB16_DSP
(SND_DT019X && (SOUND && (~M68K && (SND && (SND_ISA && PNP))))) => SND_SB16_DSP
(SND_SB16 && (SOUND && (~M68K && (SND && SND_ISA)))) => SND_SB16_DSP
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_ADLIB
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_AD1816A
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_AD1848
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_ALS100
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_AZT2320
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_CMI8330
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_CS4231
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_CS4236
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_DT019X
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_ES968
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_ES1688
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_ES18XX
(SOUND && (~M68K && (SND && (SND_ISA && HAS_IOPORT)))) || ~SND_SC6000
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_GUSCLASSIC
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_GUSEXTREME
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_GUSMAX
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_INTERWAVE
(SOUND && (~M68K && (SND && (SND_ISA && PNP)))) || ~SND_INTERWAVE_STB
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_OPL3SA2
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_OPTI92X_AD1848
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_OPTI92X_CS4231
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_OPTI93X
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_MIRO
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_SB8
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_SB16
(SOUND && (~M68K && (SND && (SND_ISA && ((SND_SB16 || SND_SBAWE) && (BROKEN || ~PPC)))))) || ~SND_SB16_CSP
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_SBAWE
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_SGALAXY
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_SSCAPE
(SOUND && (~M68K && (SND && SND_ISA))) || ~SND_WAVEFRONT
(SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))) || ~SND_MSND_PINNACLE
(SOUND && (~M68K && (SND && (SND_ISA && (X86 && EXPERIMENTAL))))) || ~SND_MSND_CLASSIC
(SOUND && (~M68K && (SND && (ISA && ISA_DMA_API)))) || (SND_ISA => (SOUND && (~M68K && (SND && (ISA && ISA_DMA_API)))))
(SOUND && (~M68K && (SND && (ISA && ISA_DMA_API)))) || ((SOUND && (~M68K && (SND && (ISA && ISA_DMA_API)))) => SND_ISA)
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AD1889
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ALS300
(SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))) || ~SND_ALS4000
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ALI5451
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ATIIXP
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ATIIXP_MODEM
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AU8810
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AU8820
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AU8830
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AW2
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_AZT3328
(SOUND && (~M68K && (SND && (SND_PCI && SND_BT87X)))) || ~SND_BT87X_OVERCLOCK
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_BT87X
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CA0106
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CMIPCI
SND_OXYGEN_LIB => (((SND_HIFIER && (SOUND && (~M68K && (SND && SND_PCI)))) || (SND_OXYGEN && (SOUND && (~M68K && (SND && SND_PCI))))) || (SND_VIRTUOSO && (SOUND && (~M68K && (SND && SND_PCI)))))
(SND_HIFIER && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OXYGEN_LIB
(SND_OXYGEN && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OXYGEN_LIB
(SND_VIRTUOSO && (SOUND && (~M68K && (SND && SND_PCI)))) => SND_OXYGEN_LIB
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_OXYGEN
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CS4281
(SOUND && (~M68K && (SND && (SND_PCI && SND_CS46XX)))) || (SND_CS46XX_NEW_DSP => (SOUND && (~M68K && (SND && (SND_PCI && SND_CS46XX)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_CS46XX)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_CS46XX)))) => SND_CS46XX_NEW_DSP)
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CS46XX
(SOUND && (~M68K && (SND && (SND_PCI && ISA_DMA_API)))) || ~SND_CS5530
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CS5535AUDIO
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_CTXFI
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_DARLA20
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_GINA20
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_LAYLA20
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_DARLA24
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_GINA24
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_LAYLA24
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_MONA
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_MIA
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ECHO3G
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INDIGO
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INDIGOIO
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INDIGODJ
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INDIGOIOX
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INDIGODJX
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_EMU10K1
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_EMU10K1X
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ENS1370
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ENS1371
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ES1938
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ES1968
SND_FM801_TEA575X => ((SOUND && (~M68K && (SND && (SND_PCI && SND_FM801_TEA575X_BOOL)))) && SND_FM801)
((SOUND && (~M68K && (SND && (SND_PCI && SND_FM801_TEA575X_BOOL)))) && SND_FM801) => SND_FM801_TEA575X
(SOUND && (~M68K && (SND && (SND_PCI && (SND_FM801 && (VIDEO_V4L2 || VIDEO_V4L2)))))) || ~SND_FM801_TEA575X_BOOL
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_FM801
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && (SND_HDA_HWDEP && EXPERIMENTAL)))))) || (SND_HDA_RECONFIG => (SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL)))))))
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && (SND_HDA_HWDEP && EXPERIMENTAL)))))) || ((SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL)))))) => SND_HDA_RECONFIG)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_HWDEP => (SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL)))))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SND_HDA_PATCH_LOADER && (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL)))))) => SND_HDA_HWDEP)
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && (INPUT || INPUT)))))) || ~SND_HDA_INPUT_BEEP
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && (INPUT || INPUT)))))) || ~SND_HDA_INPUT_JACK
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && EXPERIMENTAL))))) || ~SND_HDA_PATCH_LOADER
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_REALTEK => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_REALTEK)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_ANALOG => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_ANALOG)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_SIGMATEL => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_SIGMATEL)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_VIA => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_VIA)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_ATIHDMI => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_ATIHDMI)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_NVHDMI => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_NVHDMI)
SND_HDA_ELD => (SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && SND_HDA_CODEC_INTELHDMI)))))
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && SND_HDA_CODEC_INTELHDMI))))) => SND_HDA_ELD
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_INTELHDMI => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_INTELHDMI)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_CIRRUS => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_CIRRUS)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_CONEXANT => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_CONEXANT)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_CA0110 => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_CA0110)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_CMEDIA => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_CMEDIA)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_CODEC_SI3054 => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_CODEC_SI3054)
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || (SND_HDA_GENERIC => (SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))))
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ((SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) => SND_HDA_GENERIC)
(SOUND && (~M68K && (SND && (SND_PCI && (SND_HDA_INTEL && SND_HDA_POWER_SAVE))))) || ~SND_HDA_POWER_SAVE_DEFAULT
(SOUND && (~M68K && (SND && (SND_PCI && SND_HDA_INTEL)))) || ~SND_HDA_POWER_SAVE
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_HDA_INTEL
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_HDSP
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_HDSPM
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_HIFIER
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ICE1712
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_ICE1724
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INTEL8X0
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_INTEL8X0M
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_KORG1212
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_LX6464ES
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_MAESTRO3
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_MIXART
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_NM256
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_PCXHR
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_RIPTIDE
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_RME32
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_RME96
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_RME9652
(SOUND && (~M68K && (SND && (SND_PCI && (X86 && ~X86_64))))) || ~SND_SIS7019
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_SONICVIBES
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_TRIDENT
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_VIA82XX
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_VIA82XX_MODEM
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_VIRTUOSO
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_VX222
(SOUND && (~M68K && (SND && SND_PCI))) || ~SND_YMFPCI
(SOUND && (~M68K && (SND && PCI))) || (SND_PCI => (SOUND && (~M68K && (SND && PCI))))
(SOUND && (~M68K && (SND && PCI))) || ((SOUND && (~M68K && (SND && PCI))) => SND_PCI)
(SOUND && (~M68K && (SND && (SND_PPC && SND_POWERMAC)))) || (SND_POWERMAC_AUTO_DRC => (SOUND && (~M68K && (SND && (SND_PPC && SND_POWERMAC)))))
(SOUND && (~M68K && (SND && (SND_PPC && SND_POWERMAC)))) || ((SOUND && (~M68K && (SND && (SND_PPC && SND_POWERMAC)))) => SND_POWERMAC_AUTO_DRC)
(SOUND && (~M68K && (SND && (SND_PPC && (I2C && (INPUT && PPC_PMAC)))))) || ~SND_POWERMAC
(SOUND && (~M68K && (SND && (SND_PPC && SND_PS3)))) || ~SND_PS3_DEFAULT_START_DELAY
(SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV)))) || (SND_PS3 => (SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV)))))
(SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV)))) || ((SOUND && (~M68K && (SND && (SND_PPC && PS3_PS3AV)))) => SND_PS3)
(SOUND && (~M68K && (SND && PPC))) || (SND_PPC => (SOUND && (~M68K && (SND && PPC))))
(SOUND && (~M68K && (SND && PPC))) || ((SOUND && (~M68K && (SND && PPC))) => SND_PPC)
(SOUND && (~M68K && (SND && SND_AOA))) || ~SND_AOA_FABRIC_LAYOUT
(SOUND && (~M68K && (SND && SND_AOA))) || ~SND_AOA_ONYX
(SOUND && (~M68K && (SND && SND_AOA))) || ~SND_AOA_TAS
(SOUND && (~M68K && (SND && SND_AOA))) || ~SND_AOA_TOONIE
(SOUND && (~M68K && (SND && (SND_AOA && (SND_AOA_SOUNDBUS && PCI))))) || (SND_AOA_SOUNDBUS_I2S => (SND_AOA_FABRIC_LAYOUT && (SOUND && (~M68K && (SND && SND_AOA)))))
(SOUND && (~M68K && (SND && (SND_AOA && (SND_AOA_SOUNDBUS && PCI))))) || ((SND_AOA_FABRIC_LAYOUT && (SOUND && (~M68K && (SND && SND_AOA)))) => SND_AOA_SOUNDBUS_I2S)
(SOUND && (~M68K && (SND && SND_AOA))) || (SND_AOA_SOUNDBUS => (SND_AOA_FABRIC_LAYOUT && (SOUND && (~M68K && (SND && SND_AOA)))))
(SOUND && (~M68K && (SND && SND_AOA))) || ((SND_AOA_FABRIC_LAYOUT && (SOUND && (~M68K && (SND && SND_AOA)))) => SND_AOA_SOUNDBUS)
(SOUND && (~M68K && (SND && PPC_PMAC))) || ~SND_AOA
(SOUND && (~M68K && (SND && (SND_ARM && ARM_AMBA)))) || ~SND_ARMAACI
SND_PXA2XX_PCM => (SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA)))))
(SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) => SND_PXA2XX_PCM
SND_PXA2XX_LIB => ((SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) || (SND_PXA2XX_SOC && (SOUND && (~M68K && (SND && (SND_SOC && ARCH_PXA))))))
(SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) => SND_PXA2XX_LIB
(SND_PXA2XX_SOC && (SOUND && (~M68K && (SND && (SND_SOC && ARCH_PXA))))) => SND_PXA2XX_LIB
SND_PXA2XX_LIB_AC97 => ((SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) || (SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_PXA2XX_AC97 && (SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA))))) => SND_PXA2XX_LIB_AC97
(SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_PXA2XX_LIB_AC97
(SOUND && (~M68K && (SND && (SND_ARM && ARCH_PXA)))) || ~SND_PXA2XX_AC97
(SOUND && (~M68K && (SND && ARM))) || (SND_ARM => ((SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) || (SOUND && (~M68K && (SND && ARM)))))
(SOUND && (~M68K && (SND && ARM))) || ((SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_ARM)
(SOUND && (~M68K && (SND && ARM))) || ((SOUND && (~M68K && (SND && ARM))) => SND_ARM)
(SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32))))) || ~SND_ATMEL_ABDAC
(SOUND && (~M68K && (SND && ((AVR32 || ARCH_AT91) && (DW_DMAC && AVR32))))) || ~SND_ATMEL_AC97C
(SOUND && (~M68K && (SND && (SND_SPI && SND_AT73C213)))) || ~SND_AT73C213_TARGET_BITRATE
(SOUND && (~M68K && (SND && (SND_SPI && ATMEL_SSC)))) || ~SND_AT73C213
(SOUND && (~M68K && (SND && SPI))) || (SND_SPI => (SOUND && (~M68K && (SND && SPI))))
(SOUND && (~M68K && (SND && SPI))) || ((SOUND && (~M68K && (SND && SPI))) => SND_SPI)
(SOUND && (~M68K && (SND && (SND_MIPS && SGI_IP32)))) || ~SND_SGI_O2
(SOUND && (~M68K && (SND && (SND_MIPS && SGI_HAS_HAL2)))) || ~SND_SGI_HAL2
(SOUND && (~M68K && (SND && (SND_MIPS && (SOC_AU1000 || (SOC_AU1100 || SOC_AU1500)))))) || ~SND_AU1X00
(SOUND && (~M68K && (SND && MIPS))) || (SND_MIPS => (SOUND && (~M68K && (SND && MIPS))))
(SOUND && (~M68K && (SND && MIPS))) || ((SOUND && (~M68K && (SND && MIPS))) => SND_MIPS)
(SOUND && (~M68K && (SND && (SND_SUPERH && SH_DREAMCAST)))) || ~SND_AICA
(SOUND && (~M68K && (SND && SUPERH))) || (SND_SUPERH => (SOUND && (~M68K && (SND && SUPERH))))
(SOUND && (~M68K && (SND && SUPERH))) || ((SOUND && (~M68K && (SND && SUPERH))) => SND_SUPERH)
(SOUND && (~M68K && (SND && (SND_USB && USB)))) || ~SND_USB_AUDIO
(SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 || (PPC || ALPHA))))))) || ~SND_USB_USX2Y
(SOUND && (~M68K && (SND && (SND_USB && (USB && (SND_USB_CAIAQ && (INPUT || INPUT))))))) || ~SND_USB_CAIAQ_INPUT
(SOUND && (~M68K && (SND && (SND_USB && USB)))) || ~SND_USB_CAIAQ
(SOUND && (~M68K && (SND && (SND_USB && (USB && (X86 && EXPERIMENTAL)))))) || ~SND_USB_US122L
(SOUND && (~M68K && (SND && USB))) || (SND_USB => (SOUND && (~M68K && (SND && USB))))
(SOUND && (~M68K && (SND && USB))) || ((SOUND && (~M68K && (SND && USB))) => SND_USB)
(SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA)))) || ~SND_VXPOCKET
(SOUND && (~M68K && (SND && (SND_PCMCIA && PCMCIA)))) || ~SND_PDAUDIOCF
(SOUND && (~M68K && (SND && PCMCIA))) || (SND_PCMCIA => (SOUND && (~M68K && (SND && PCMCIA))))
(SOUND && (~M68K && (SND && PCMCIA))) || ((SOUND && (~M68K && (SND && PCMCIA))) => SND_PCMCIA)
(SOUND && (~M68K && (SND && (SND_SPARC && SBUS)))) || ~SND_SUN_AMD7930
(SOUND && (~M68K && (SND && SND_SPARC))) || ~SND_SUN_CS4231
(SOUND && (~M68K && (SND && (SND_SPARC && SBUS)))) || ~SND_SUN_DBRI
(SOUND && (~M68K && (SND && SPARC))) || (SND_SPARC => (SOUND && (~M68K && (SND && SPARC))))
(SOUND && (~M68K && (SND && SPARC))) || ((SOUND && (~M68K && (SND && SPARC))) => SND_SPARC)
(SOUND && (~M68K && (SND && SND_GSC))) || ~SND_HARMONY
(SOUND && (~M68K && (SND && GSC))) || (SND_GSC => (SOUND && (~M68K && (SND && GSC))))
(SOUND && (~M68K && (SND && GSC))) || ((SOUND && (~M68K && (SND && GSC))) => SND_GSC)
SND_SOC_AC97_BUS => (((((((SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_SOC_MPC5200_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM))))))) || (SND_SOC_SH4_HAC && (SOUND && (~M68K && (SND && (SND_SOC && SUPERH)))))) || (SND_S3C2443_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_AC97_BUS
(SND_SOC_MPC5200_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM)))))) => SND_SOC_AC97_BUS
(SND_SOC_SH4_HAC && (SOUND && (~M68K && (SND && (SND_SOC && SUPERH))))) => SND_SOC_AC97_BUS
(SND_S3C2443_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_AC97_BUS
(SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_AC97_BUS
(SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_AC97_BUS
(SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_AC97_BUS
SND_ATMEL_SOC_SSC => (((SND_AT32_SOC_PLAYPAQ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_ATMEL_SOC && BOARD_PLAYPAQ)))))) || (SND_AT91_SOC_AFEB9260 && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 && (MACH_AFEB9260 && SND_ATMEL_SOC)))))))) || (SND_AT91_SOC_SAM9G20_WM8731 && (SOUND && (~M68K && (SND && (SND_SOC && (ATMEL_SSC && (ARCH_AT91SAM9G20 && SND_ATMEL_SOC))))))))
(SND_AT32_SOC_PLAYPAQ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_ATMEL_SOC && BOARD_PLAYPAQ)))))) => SND_ATMEL_SOC_SSC
(SND_AT91_SOC_AFEB9260 && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 && (MACH_AFEB9260 && SND_ATMEL_SOC))))))) => SND_ATMEL_SOC_SSC
(SND_AT91_SOC_SAM9G20_WM8731 && (SOUND && (~M68K && (SND && (SND_SOC && (ATMEL_SSC && (ARCH_AT91SAM9G20 && SND_ATMEL_SOC))))))) => SND_ATMEL_SOC_SSC
(SOUND && (~M68K && (SND && (SND_SOC && (ATMEL_SSC && (ARCH_AT91SAM9G20 && SND_ATMEL_SOC)))))) || ~SND_AT91_SOC_SAM9G20_WM8731
(SOUND && (~M68K && (SND && (SND_SOC && SND_AT32_SOC_PLAYPAQ)))) || ~SND_AT32_SOC_PLAYPAQ_SLAVE
(SOUND && (~M68K && (SND && (SND_SOC && (SND_ATMEL_SOC && BOARD_PLAYPAQ))))) || ~SND_AT32_SOC_PLAYPAQ
(SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 && (MACH_AFEB9260 && SND_ATMEL_SOC)))))) || ~SND_AT91_SOC_AFEB9260
(SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 || AVR32))))) || ~SND_ATMEL_SOC
(SOUND && (~M68K && (SND && (SND_SOC && (SOC_AU1200 || SOC_AU1550))))) || ~SND_SOC_AU1XPSC
~SND_SOC_AU1XPSC_I2S
SND_SOC_AU1XPSC_AC97 => (SND_SOC_SAMPLE_PSC_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AU1XPSC)))))
(SND_SOC_SAMPLE_PSC_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AU1XPSC))))) => SND_SOC_AU1XPSC_AC97
(SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AU1XPSC)))) || ~SND_SOC_SAMPLE_PSC_AC97
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S)))) || ~SND_BF5XX_SOC_SSM2602
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_SOC_AD73311)))) || ~SND_BFIN_AD73311_SE
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S)))) || ~SND_BF5XX_SOC_AD73311
(SOUND && (~M68K && (SND && (SND_SOC && BLACKFIN)))) || ~SND_BF5XX_I2S
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM)))) || ~SND_BF5XX_SOC_AD1836
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM)))) || ~SND_BF5XX_SOC_AD1938
(SOUND && (~M68K && (SND && (BLACKFIN && SND_SOC)))) || ~SND_BF5XX_TDM
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || (SND_BF5XX_MMAP_SUPPORT => (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))))
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || ((SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) => SND_BF5XX_MMAP_SUPPORT)
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || ~SND_BF5XX_MULTICHAN_SUPPORT
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_HAVE_COLD_RESET)))) || ~SND_BF5XX_RESET_GPIO_NUM
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || (SND_BF5XX_HAVE_COLD_RESET => (SOUND && (~M68K && (SND && (SND_SOC && (SND_BF5XX_AC97 && BFIN548_EZKIT))))))
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || ((SOUND && (~M68K && (SND && (SND_SOC && (SND_BF5XX_AC97 && BFIN548_EZKIT))))) => SND_BF5XX_HAVE_COLD_RESET)
(SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))) || ~SND_BF5XX_SOC_AD1980
(SOUND && (~M68K && (SND && (SND_SOC && BLACKFIN)))) || ~SND_BF5XX_AC97
SND_BF5XX_SOC_SPORT => (((SND_BF5XX_SOC_TDM && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_BF5XX_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_BF5XX_SOC_TDM && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_BF5XX_SOC_SPORT
(SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_BF5XX_SOC_SPORT
(SND_BF5XX_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_BF5XX_SOC_SPORT
SND_BF5XX_SOC_I2S => ((SND_BF5XX_SOC_AD73311 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) || (SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))))
(SND_BF5XX_SOC_AD73311 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) => SND_BF5XX_SOC_I2S
(SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) => SND_BF5XX_SOC_I2S
SND_BF5XX_SOC_TDM => ((SND_BF5XX_SOC_AD1836 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))) || (SND_BF5XX_SOC_AD1938 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))))
(SND_BF5XX_SOC_AD1836 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))) => SND_BF5XX_SOC_TDM
(SND_BF5XX_SOC_AD1938 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))) => SND_BF5XX_SOC_TDM
SND_BF5XX_SOC_AC97 => (SND_BF5XX_SOC_AD1980 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97)))))
(SND_BF5XX_SOC_AD1980 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97))))) => SND_BF5XX_SOC_AC97
(SOUND && (~M68K && (SND && (SND_SOC && (SND_BF5XX_I2S || (SND_BF5XX_AC97 || SND_BF5XX_TDM)))))) || ~SND_BF5XX_SPORT_NUM
(SOUND && (~M68K && (SND && (SND_SOC && ARCH_DAVINCI)))) || ~SND_DAVINCI_SOC
SND_DAVINCI_SOC_I2S => ((SND_DAVINCI_SOC_SFFSDR && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_SFFSDR)))))) || (SND_DAVINCI_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM))))))))
(SND_DAVINCI_SOC_SFFSDR && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_SFFSDR)))))) => SND_DAVINCI_SOC_I2S
(SND_DAVINCI_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM))))))) => SND_DAVINCI_SOC_I2S
SND_DAVINCI_SOC_MCASP => (((SND_DA830_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM)))))) || (SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM))))))) || (SND_DA850_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM)))))))
(SND_DA830_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM)))))) => SND_DAVINCI_SOC_MCASP
(SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM)))))) => SND_DAVINCI_SOC_MCASP
(SND_DA850_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM)))))) => SND_DAVINCI_SOC_MCASP
(SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)))))) || ~SND_DAVINCI_SOC_EVM
(SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM))))) || ~SND_DM6467_SOC_EVM
(SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_SFFSDR))))) || ~SND_DAVINCI_SOC_SFFSDR
(SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM))))) || ~SND_DA830_SOC_EVM
(SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM))))) || ~SND_DA850_SOC_EVM
~SND_SOC_OF_SIMPLE
SND_MPC52xx_DMA => ((SND_SOC_MPC5200_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM)))))) || (SND_SOC_MPC5200_I2S && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM)))))))
(SND_SOC_MPC5200_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM)))))) => SND_MPC52xx_DMA
(SND_SOC_MPC5200_I2S && (SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM)))))) => SND_MPC52xx_DMA
SND_SOC_MPC8610 => (SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C))))))
(SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C)))))) => SND_SOC_MPC8610
(SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C))))) || (SND_SOC_MPC8610_HPCD => (SOUND && (~M68K && (SND && (SND_SOC && (I2C && MPC8610_HPCD))))))
(SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C))))) || ((SOUND && (~M68K && (SND && (SND_SOC && (I2C && MPC8610_HPCD))))) => SND_SOC_MPC8610_HPCD)
(SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM))))) || ~SND_SOC_MPC5200_I2S
(SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM))))) || (SND_SOC_MPC5200_AC97 => ((SND_MPC52xx_SOC_EFIKA && (SOUND && (~M68K && (SND && (SND_SOC && PPC_EFIKA))))) || (SND_MPC52xx_SOC_PCM030 && (SOUND && (~M68K && (SND && (SND_SOC && PPC_MPC5200_SIMPLE)))))))
(SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM))))) || ((SND_MPC52xx_SOC_EFIKA && (SOUND && (~M68K && (SND && (SND_SOC && PPC_EFIKA))))) => SND_SOC_MPC5200_AC97)
(SOUND && (~M68K && (SND && (SND_SOC && (PPC_MPC52xx && PPC_BESTCOMM))))) || ((SND_MPC52xx_SOC_PCM030 && (SOUND && (~M68K && (SND && (SND_SOC && PPC_MPC5200_SIMPLE))))) => SND_SOC_MPC5200_AC97)
(SOUND && (~M68K && (SND && (SND_SOC && PPC_MPC5200_SIMPLE)))) || ~SND_MPC52xx_SOC_PCM030
(SOUND && (~M68K && (SND && (SND_SOC && PPC_EFIKA)))) || ~SND_MPC52xx_SOC_EFIKA
(SOUND && (~M68K && (SND && (SND_SOC && (ARCH_MX2 || ARCH_MX1))))) || ~SND_MX1_MX2_SOC
SND_MXC_SOC_SSI => (SND_SOC_MX27VIS_WM8974 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_MX1_MX2_SOC && (MACH_MX27 && MACH_IMX27_VISSTRIM_M10)))))))
(SND_SOC_MX27VIS_WM8974 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_MX1_MX2_SOC && (MACH_MX27 && MACH_IMX27_VISSTRIM_M10))))))) => SND_MXC_SOC_SSI
(SOUND && (~M68K && (SND && (SND_SOC && (SND_MX1_MX2_SOC && (MACH_MX27 && MACH_IMX27_VISSTRIM_M10)))))) || ~SND_SOC_MX27VIS_WM8974
(SOUND && (~M68K && (SND && (SND_SOC && ARCH_OMAP)))) || ~SND_OMAP_SOC
SND_OMAP_SOC_MCBSP => ((((((((((SND_OMAP_SOC_OVERO && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OVERO))))))) || (SND_OMAP_SOC_OMAP3_BEAGLE && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_BEAGLE)))))))) || (SND_OMAP_SOC_OSK5912 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_OMAP_OSK && I2C)))))))) || (SND_OMAP_SOC_OMAP2EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP2EVM)))))))) || (SND_OMAP_SOC_N810 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_NOKIA_N810 && I2C)))))))) || (SND_OMAP_SOC_OMAP3EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3EVM)))))))) || (SND_OMAP_SOC_AMS_DELTA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && MACH_AMS_DELTA))))))) || (SND_OMAP_SOC_OMAP3_PANDORA && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_PANDORA)))))))) || (SND_OMAP_SOC_ZOOM2 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_ZOOM2)))))))) || (SND_OMAP_SOC_SDP3430 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_3430SDP))))))))
(SND_OMAP_SOC_OVERO && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OVERO))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_OMAP3_BEAGLE && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_BEAGLE))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_OSK5912 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_OMAP_OSK && I2C))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_OMAP2EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP2EVM))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_N810 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_NOKIA_N810 && I2C))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_OMAP3EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3EVM))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_AMS_DELTA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && MACH_AMS_DELTA)))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_OMAP3_PANDORA && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_PANDORA))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_ZOOM2 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_ZOOM2))))))) => SND_OMAP_SOC_MCBSP
(SND_OMAP_SOC_SDP3430 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_3430SDP))))))) => SND_OMAP_SOC_MCBSP
(SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_NOKIA_N810 && I2C)))))) || ~SND_OMAP_SOC_N810
(SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && MACH_AMS_DELTA))))) || ~SND_OMAP_SOC_AMS_DELTA
(SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_OMAP_OSK && I2C)))))) || ~SND_OMAP_SOC_OSK5912
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OVERO)))))) || ~SND_OMAP_SOC_OVERO
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP2EVM)))))) || ~SND_OMAP_SOC_OMAP2EVM
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3EVM)))))) || ~SND_OMAP_SOC_OMAP3EVM
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_3430SDP)))))) || ~SND_OMAP_SOC_SDP3430
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_PANDORA)))))) || ~SND_OMAP_SOC_OMAP3_PANDORA
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_BEAGLE)))))) || ~SND_OMAP_SOC_OMAP3_BEAGLE
(SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_ZOOM2)))))) || ~SND_OMAP_SOC_ZOOM2
(SOUND && (~M68K && (SND && (SND_SOC && ARCH_PXA)))) || ~SND_PXA2XX_SOC
SND_PXA2XX_SOC_AC97 => ((((((((SND_PXA2XX_SOC_PALM27X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_PALMLD || (MACH_PALMTX || (MACH_PALMT5 || MACH_PALMTE2))))))))) || (SND_PXA2XX_SOC_E750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E750))))))) || (SND_PXA2XX_SOC_MIOA701 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MIOA701))))))) || (SND_PXA2XX_SOC_E800 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E800))))))) || (SND_PXA2XX_SOC_E740 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E740))))))) || (SND_PXA2XX_SOC_TOSA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_TOSA && MFD_TC6393XB)))))))) || (SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE))))))) || (SND_PXA2XX_SOC_EM_X270 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_EM_X270)))))))
(SND_PXA2XX_SOC_PALM27X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_PALMLD || (MACH_PALMTX || (MACH_PALMT5 || MACH_PALMTE2))))))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_E750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E750)))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_MIOA701 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MIOA701)))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_E800 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E800)))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_E740 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E740)))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_TOSA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_TOSA && MFD_TC6393XB))))))) => SND_PXA2XX_SOC_AC97
(SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE)))))) => SND_PXA2XX_SOC_AC97
(SND_PXA2XX_SOC_EM_X270 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_EM_X270)))))) => SND_PXA2XX_SOC_AC97
SND_PXA2XX_SOC_I2S => (((((SND_PXA2XX_SOC_IMOTE2 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_INTELMOTE2 && I2C))))))) || (SND_PXA2XX_SOC_SPITZ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_Cxx00))))))) || (SND_PXA2XX_SOC_CORGI && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_C7xx))))))) || (SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN))))))) || (SND_PXA2XX_SOC_POODLE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_POODLE)))))))
(SND_PXA2XX_SOC_IMOTE2 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_INTELMOTE2 && I2C))))))) => SND_PXA2XX_SOC_I2S
(SND_PXA2XX_SOC_SPITZ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_Cxx00)))))) => SND_PXA2XX_SOC_I2S
(SND_PXA2XX_SOC_CORGI && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_C7xx)))))) => SND_PXA2XX_SOC_I2S
(SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN)))))) => SND_PXA2XX_SOC_I2S
(SND_PXA2XX_SOC_POODLE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_POODLE)))))) => SND_PXA2XX_SOC_I2S
SND_PXA_SOC_SSP => ((SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE)))))) || (SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN)))))))
(SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE)))))) => SND_PXA_SOC_SSP
(SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN)))))) => SND_PXA_SOC_SSP
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_C7xx))))) || ~SND_PXA2XX_SOC_CORGI
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_Cxx00))))) || ~SND_PXA2XX_SOC_SPITZ
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_POODLE))))) || ~SND_PXA2XX_SOC_POODLE
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_TOSA && MFD_TC6393XB)))))) || ~SND_PXA2XX_SOC_TOSA
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E740))))) || ~SND_PXA2XX_SOC_E740
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E750))))) || ~SND_PXA2XX_SOC_E750
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E800))))) || ~SND_PXA2XX_SOC_E800
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_EM_X270))))) || ~SND_PXA2XX_SOC_EM_X270
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_PALMLD || (MACH_PALMTX || (MACH_PALMT5 || MACH_PALMTE2)))))))) || ~SND_PXA2XX_SOC_PALM27X
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE))))) || ~SND_SOC_ZYLONITE
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN))))) || ~SND_PXA2XX_SOC_MAGICIAN
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MIOA701))))) || ~SND_PXA2XX_SOC_MIOA701
(SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_INTELMOTE2 && I2C)))))) || ~SND_PXA2XX_SOC_IMOTE2
(SOUND && (~M68K && (SND && (SND_SOC && (ARCH_S3C2410 || ARCH_S3C64XX))))) || ~SND_S3C24XX_SOC
SND_S3C24XX_SOC_I2S => (((((SND_S3C24XX_SOC_NEO1973_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA01)))))) || (SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))))) || (SND_S3C24XX_SOC_NEO1973_GTA02_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA02))))))) || (SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))))) || (SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))))
(SND_S3C24XX_SOC_NEO1973_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA01)))))) => SND_S3C24XX_SOC_I2S
(SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C24XX_SOC_I2S
(SND_S3C24XX_SOC_NEO1973_GTA02_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA02)))))) => SND_S3C24XX_SOC_I2S
(SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C24XX_SOC_I2S
(SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C24XX_SOC_I2S
SND_S3C_I2SV2_SOC => ((SND_S3C2412_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_S3C64XX_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_S3C2412_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_S3C_I2SV2_SOC
(SND_S3C64XX_SOC_I2S && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_S3C_I2SV2_SOC
SND_S3C2412_SOC_I2S => (SND_S3C24XX_SOC_JIVE_WM8750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_JIVE))))))
(SND_S3C24XX_SOC_JIVE_WM8750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_JIVE)))))) => SND_S3C2412_SOC_I2S
~SND_S3C64XX_SOC_I2S
SND_S3C2443_SOC_AC97 => ((SND_S3C24XX_SOC_SMDK2443_WM9710 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_SMDK2443)))))) || (SND_S3C24XX_SOC_LN2440SBC_ALC650 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))))
(SND_S3C24XX_SOC_SMDK2443_WM9710 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_SMDK2443)))))) => SND_S3C2443_SOC_AC97
(SND_S3C24XX_SOC_LN2440SBC_ALC650 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C2443_SOC_AC97
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA01))))) || ~SND_S3C24XX_SOC_NEO1973_WM8753
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA02))))) || ~SND_S3C24XX_SOC_NEO1973_GTA02_WM8753
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_JIVE))))) || ~SND_S3C24XX_SOC_JIVE_WM8750
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_SMDK2443))))) || ~SND_S3C24XX_SOC_SMDK2443_WM9710
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))) || ~SND_S3C24XX_SOC_LN2440SBC_ALC650
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))) || ~SND_S3C24XX_SOC_S3C24XX_UDA134X
SND_S3C24XX_SOC_SIMTEC => ((SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) || (SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))))
(SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C24XX_SOC_SIMTEC
(SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_S3C24XX_SOC_SIMTEC
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))) || ~SND_S3C24XX_SOC_SIMTEC_TLV320AIC23
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))) || ~SND_S3C24XX_SOC_SIMTEC_HERMES
(SOUND && (~M68K && (SND && (SND_SOC && XTENSA_VARIANT_S6000)))) || ~SND_S6000_SOC
SND_S6000_SOC_I2S => (SND_S6000_SOC_S6IPCAM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S6000_SOC && XTENSA_PLATFORM_S6105))))))
(SND_S6000_SOC_S6IPCAM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S6000_SOC && XTENSA_PLATFORM_S6105)))))) => SND_S6000_SOC_I2S
(SOUND && (~M68K && (SND && (SND_SOC && (SND_S6000_SOC && XTENSA_PLATFORM_S6105))))) || ~SND_S6000_SOC_S6IPCAM
(SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SH_DMABRG)))))) || ~SND_SOC_PCM_SH7760
SND_SOC_SH4_HAC => (SND_SH7760_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760)))))))
(SND_SH7760_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760))))))) => SND_SOC_SH4_HAC
~SND_SOC_SH4_SSI
(SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && CPU_SUBTYPE_SH7724))))) || ~SND_SOC_SH4_FSI
(SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760)))))) || ~SND_SH7760_AC97
(SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && SND_SOC_SH4_FSI))))) || ~SND_FSI_AK4642
(SOUND && (~M68K && (SND && (SND_SOC && (HAS_TXX9_ACLC && TXX9_DMAC))))) || ~SND_SOC_TXX9ACLC
~HAS_TXX9_ACLC
SND_SOC_TXX9ACLC_AC97 => (SND_SOC_TXX9ACLC_GENERIC && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_TXX9ACLC)))))
(SND_SOC_TXX9ACLC_GENERIC && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_TXX9ACLC))))) => SND_SOC_TXX9ACLC_AC97
(SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_TXX9ACLC)))) || ~SND_SOC_TXX9ACLC_GENERIC
SND_SOC_I2C_AND_SPI => (((SOUND && (~M68K && (SND && (SND_SOC && I2C)))) || (~SOUND && (~M68K && (SND && (SND_SOC && I2C))) && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))) || ((~SOUND && (~M68K && (SND && (SND_SOC && I2C))) && ~SOUND && (~M68K && (SND && (SND_SOC && I2C)))) && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))))
(SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER)))) => SND_SOC_I2C_AND_SPI
(SOUND && (~M68K && (SND && SND_SOC))) || ~SND_SOC_ALL_CODECS
SND_SOC_WM_HUBS => ((SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_WM8993)))) || (~SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_WM8993))) && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_WM8993))))))
SND_SOC_AC97_CODEC => ((((((SND_S3C24XX_SOC_SMDK2443_WM9710 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_SMDK2443)))))) || (SND_SOC_SAMPLE_PSC_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AU1XPSC)))))) || (SND_S3C24XX_SOC_LN2440SBC_ALC650 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))))) || (SND_SOC_TXX9ACLC_GENERIC && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_TXX9ACLC)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS)))))) || (SND_SH7760_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760))))))))
(SND_S3C24XX_SOC_SMDK2443_WM9710 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_SMDK2443)))))) => SND_SOC_AC97_CODEC
(SND_SOC_SAMPLE_PSC_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AU1XPSC))))) => SND_SOC_AC97_CODEC
(SND_S3C24XX_SOC_LN2440SBC_ALC650 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_SOC_AC97_CODEC
(SND_SOC_TXX9ACLC_GENERIC && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_TXX9ACLC))))) => SND_SOC_AC97_CODEC
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_AC97_CODEC
(SND_SH7760_AC97 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && (CPU_SUBTYPE_SH7760 && SND_SOC_PCM_SH7760))))))) => SND_SOC_AC97_CODEC
SND_SOC_AD1836 => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) || (SND_BF5XX_SOC_AD1836 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) => SND_SOC_AD1836
(SND_BF5XX_SOC_AD1836 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))) => SND_SOC_AD1836
SND_SOC_AD1938 => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) || (SND_BF5XX_SOC_AD1938 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) => SND_SOC_AD1938
(SND_BF5XX_SOC_AD1938 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_TDM))))) => SND_SOC_AD1938
SND_SOC_AD1980 => ((SND_BF5XX_SOC_AD1980 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))))
(SND_BF5XX_SOC_AD1980 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_AC97))))) => SND_SOC_AD1980
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_AD1980
SND_SOC_AD73311 => ((SND_BF5XX_SOC_AD73311 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_BF5XX_SOC_AD73311 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) => SND_SOC_AD73311
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_AD73311
SND_SOC_AK4104 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) => SND_SOC_AK4104
SND_SOC_AK4535 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_AK4535
SND_SOC_AK4642 => ((SND_FSI_AK4642 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && SND_SOC_SH4_FSI)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_FSI_AK4642 && (SOUND && (~M68K && (SND && (SND_SOC && (SUPERH && SND_SOC_SH4_FSI)))))) => SND_SOC_AK4642
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_AK4642
SND_SOC_CS4270 => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) || (SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C)))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_CS4270
(SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C)))))) => SND_SOC_CS4270
SND_SOC_CS4270_VD33_ERRATA => (SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C))))))
(SND_SOC_MPC8610_HPCD && (SOUND && (~M68K && (SND && (SND_SOC && (MPC8610_HPCD && I2C)))))) => SND_SOC_CS4270_VD33_ERRATA
SND_SOC_CX20442 => (SND_OMAP_SOC_AMS_DELTA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && MACH_AMS_DELTA))))))
(SND_OMAP_SOC_AMS_DELTA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && MACH_AMS_DELTA)))))) => SND_SOC_CX20442
SND_SOC_L3 => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_L3
(SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_SOC_L3
SND_SOC_PCM3008 => ((SND_DAVINCI_SOC_SFFSDR && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_SFFSDR)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_DAVINCI_SOC_SFFSDR && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_SFFSDR)))))) => SND_SOC_PCM3008
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_PCM3008
SND_SOC_SPDIF => ((SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM)))))) => SND_SOC_SPDIF
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_SPDIF
SND_SOC_SSM2602 => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) || (SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_SSM2602
(SND_BF5XX_SOC_SSM2602 && (SOUND && (~M68K && (SND && (SND_SOC && SND_BF5XX_I2S))))) => SND_SOC_SSM2602
SND_SOC_STAC9766 => ((SND_MPC52xx_SOC_EFIKA && (SOUND && (~M68K && (SND && (SND_SOC && PPC_EFIKA))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))))
(SND_MPC52xx_SOC_EFIKA && (SOUND && (~M68K && (SND && (SND_SOC && PPC_EFIKA))))) => SND_SOC_STAC9766
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_STAC9766
SND_SOC_TLV320AIC23 => ((((SND_OMAP_SOC_OSK5912 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_OMAP_OSK && I2C))))))) || (SND_AT91_SOC_AFEB9260 && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 && (MACH_AFEB9260 && SND_ATMEL_SOC)))))))) || (SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_OMAP_SOC_OSK5912 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_OMAP_OSK && I2C))))))) => SND_SOC_TLV320AIC23
(SND_AT91_SOC_AFEB9260 && (SOUND && (~M68K && (SND && (SND_SOC && (ARCH_AT91 && (MACH_AFEB9260 && SND_ATMEL_SOC))))))) => SND_SOC_TLV320AIC23
(SND_S3C24XX_SOC_SIMTEC_TLV320AIC23 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_SOC_TLV320AIC23
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_TLV320AIC23
(SOUND && (~M68K && (SND && (SND_SOC && (SPI && SND_SOC_OF_SIMPLE))))) || (SND_SOC_TLV320AIC26 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))))
(SOUND && (~M68K && (SND && (SND_SOC && (SPI && SND_SOC_OF_SIMPLE))))) || ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SPI_MASTER))))) => SND_SOC_TLV320AIC26)
SND_SOC_TLV320AIC3X => ((((((((SND_S6000_SOC_S6IPCAM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S6000_SOC && XTENSA_PLATFORM_S6105)))))) || (SND_DA830_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM))))))) || (SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410))))))) || (SND_DAVINCI_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM)))))))) || (SND_OMAP_SOC_N810 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_NOKIA_N810 && I2C)))))))) || (SND_DA850_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM))))))) || (SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_S6000_SOC_S6IPCAM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S6000_SOC && XTENSA_PLATFORM_S6105)))))) => SND_SOC_TLV320AIC3X
(SND_DA830_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA830_EVM)))))) => SND_SOC_TLV320AIC3X
(SND_S3C24XX_SOC_SIMTEC_HERMES && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_SOC_TLV320AIC3X
(SND_DAVINCI_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && (MACH_DAVINCI_EVM || MACH_DAVINCI_DM355_EVM))))))) => SND_SOC_TLV320AIC3X
(SND_OMAP_SOC_N810 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_OMAP_SOC && (MACH_NOKIA_N810 && I2C))))))) => SND_SOC_TLV320AIC3X
(SND_DA850_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DA850_EVM)))))) => SND_SOC_TLV320AIC3X
(SND_DM6467_SOC_EVM && (SOUND && (~M68K && (SND && (SND_SOC && (SND_DAVINCI_SOC && MACH_DAVINCI_DM6467_EVM)))))) => SND_SOC_TLV320AIC3X
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_TLV320AIC3X
SND_SOC_TWL4030 => ((((((((SND_OMAP_SOC_OVERO && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OVERO))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && TWL4030_CORE)))))) || (SND_OMAP_SOC_OMAP3_BEAGLE && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_BEAGLE)))))))) || (SND_OMAP_SOC_OMAP2EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP2EVM)))))))) || (SND_OMAP_SOC_OMAP3EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3EVM)))))))) || (SND_OMAP_SOC_OMAP3_PANDORA && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_PANDORA)))))))) || (SND_OMAP_SOC_ZOOM2 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_ZOOM2)))))))) || (SND_OMAP_SOC_SDP3430 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_3430SDP))))))))
(SND_OMAP_SOC_OVERO && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OVERO))))))) => SND_SOC_TWL4030
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && TWL4030_CORE))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_OMAP3_BEAGLE && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_BEAGLE))))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_OMAP2EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP2EVM))))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_OMAP3EVM && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3EVM))))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_OMAP3_PANDORA && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP3_PANDORA))))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_ZOOM2 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_ZOOM2))))))) => SND_SOC_TWL4030
(SND_OMAP_SOC_SDP3430 && (SOUND && (~M68K && (SND && (SND_SOC && (TWL4030_CORE && (SND_OMAP_SOC && MACH_OMAP_3430SDP))))))) => SND_SOC_TWL4030
SND_SOC_UDA134X => ((SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && SND_SOC)))) => SND_SOC_UDA134X
(SND_S3C24XX_SOC_S3C24XX_UDA134X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && ARCH_S3C2410)))))) => SND_SOC_UDA134X
SND_SOC_UDA1380 => ((SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_PXA2XX_SOC_MAGICIAN && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MAGICIAN)))))) => SND_SOC_UDA1380
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_UDA1380
SND_SOC_WM8350 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && MFD_WM8350)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && MFD_WM8350))))) => SND_SOC_WM8350
SND_SOC_WM8400 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && MFD_WM8400)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && MFD_WM8400))))) => SND_SOC_WM8400
SND_SOC_WM8510 => ((SND_AT32_SOC_PLAYPAQ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_ATMEL_SOC && BOARD_PLAYPAQ)))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))))
(SND_AT32_SOC_PLAYPAQ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_ATMEL_SOC && BOARD_PLAYPAQ)))))) => SND_SOC_WM8510
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8510
SND_SOC_WM8523 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8523
SND_SOC_WM8580 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8580
SND_SOC_WM8728 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8728
SND_SOC_WM8731 => ((((SND_PXA2XX_SOC_CORGI && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_C7xx)))))) || (SND_PXA2XX_SOC_POODLE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_POODLE))))))) || (SND_AT91_SOC_SAM9G20_WM8731 && (SOUND && (~M68K && (SND && (SND_SOC && (ATMEL_SSC && (ARCH_AT91SAM9G20 && SND_ATMEL_SOC)))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))))
(SND_PXA2XX_SOC_CORGI && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_C7xx)))))) => SND_SOC_WM8731
(SND_PXA2XX_SOC_POODLE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_POODLE)))))) => SND_SOC_WM8731
(SND_AT91_SOC_SAM9G20_WM8731 && (SOUND && (~M68K && (SND && (SND_SOC && (ATMEL_SSC && (ARCH_AT91SAM9G20 && SND_ATMEL_SOC))))))) => SND_SOC_WM8731
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8731
SND_SOC_WM8750 => (((SND_S3C24XX_SOC_JIVE_WM8750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_JIVE)))))) || (SND_PXA2XX_SOC_SPITZ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_Cxx00))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))))
(SND_S3C24XX_SOC_JIVE_WM8750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_JIVE)))))) => SND_SOC_WM8750
(SND_PXA2XX_SOC_SPITZ && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && PXA_SHARP_Cxx00)))))) => SND_SOC_WM8750
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8750
SND_SOC_WM8753 => (((SND_S3C24XX_SOC_NEO1973_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA01)))))) || (SND_S3C24XX_SOC_NEO1973_GTA02_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA02))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))))
(SND_S3C24XX_SOC_NEO1973_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA01)))))) => SND_SOC_WM8753
(SND_S3C24XX_SOC_NEO1973_GTA02_WM8753 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_S3C24XX_SOC && MACH_NEO1973_GTA02)))))) => SND_SOC_WM8753
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8753
SND_SOC_WM8776 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8776
SND_SOC_WM8900 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8900
SND_SOC_WM8903 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8903
SND_SOC_WM8940 => ((SND_PXA2XX_SOC_IMOTE2 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_INTELMOTE2 && I2C))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_PXA2XX_SOC_IMOTE2 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_INTELMOTE2 && I2C))))))) => SND_SOC_WM8940
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8940
SND_SOC_WM8960 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8960
SND_SOC_WM8961 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8961
SND_SOC_WM8971 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8971
SND_SOC_WM8974 => ((SND_SOC_MX27VIS_WM8974 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_MX1_MX2_SOC && (MACH_MX27 && MACH_IMX27_VISSTRIM_M10))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))))
(SND_SOC_MX27VIS_WM8974 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_MX1_MX2_SOC && (MACH_MX27 && MACH_IMX27_VISSTRIM_M10))))))) => SND_SOC_WM8974
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8974
SND_SOC_WM8988 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_I2C_AND_SPI))))) => SND_SOC_WM8988
SND_SOC_WM8990 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8990
SND_SOC_WM8993 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM8993
SND_SOC_WM9081 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_WM9081
SND_SOC_WM9705 => (((SND_PXA2XX_SOC_E750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E750)))))) || (SND_PXA2XX_SOC_E740 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E740))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))))
(SND_PXA2XX_SOC_E750 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E750)))))) => SND_SOC_WM9705
(SND_PXA2XX_SOC_E740 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E740)))))) => SND_SOC_WM9705
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_WM9705
SND_SOC_WM9712 => ((((((SND_PXA2XX_SOC_PALM27X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_PALMLD || (MACH_PALMTX || (MACH_PALMT5 || MACH_PALMTE2))))))))) || (SND_PXA2XX_SOC_TOSA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_TOSA && MFD_TC6393XB)))))))) || (SND_MPC52xx_SOC_PCM030 && (SOUND && (~M68K && (SND && (SND_SOC && PPC_MPC5200_SIMPLE)))))) || (SND_PXA2XX_SOC_EM_X270 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_EM_X270))))))) || (SND_PXA2XX_SOC_E800 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E800))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))))
(SND_PXA2XX_SOC_PALM27X && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_PALMLD || (MACH_PALMTX || (MACH_PALMT5 || MACH_PALMTE2))))))))) => SND_SOC_WM9712
(SND_PXA2XX_SOC_TOSA && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && (MACH_TOSA && MFD_TC6393XB))))))) => SND_SOC_WM9712
(SND_MPC52xx_SOC_PCM030 && (SOUND && (~M68K && (SND && (SND_SOC && PPC_MPC5200_SIMPLE))))) => SND_SOC_WM9712
(SND_PXA2XX_SOC_EM_X270 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_EM_X270)))))) => SND_SOC_WM9712
(SND_PXA2XX_SOC_E800 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_E800)))))) => SND_SOC_WM9712
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_WM9712
SND_SOC_WM9713 => (((SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE)))))) || (SND_PXA2XX_SOC_MIOA701 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MIOA701))))))) || (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))))
(SND_SOC_ZYLONITE && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_ZYLONITE)))))) => SND_SOC_WM9713
(SND_PXA2XX_SOC_MIOA701 && (SOUND && (~M68K && (SND && (SND_SOC && (SND_PXA2XX_SOC && MACH_MIOA701)))))) => SND_SOC_WM9713
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && SND_SOC_AC97_BUS))))) => SND_SOC_WM9713
SND_SOC_MAX9877 => (SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C)))))
(SND_SOC_ALL_CODECS && (SOUND && (~M68K && (SND && (SND_SOC && I2C))))) => SND_SOC_MAX9877
(SOUND && (~M68K && SND)) || ~SND_SOC
(SOUND && ~M68K) || ~SND
(SOUND && (~M68K && (SOUND_PRIME && SIBYTE_SWARM))) || ~SOUND_BCM_CS4297A
(SOUND && (~M68K && (SOUND_PRIME && X86_VISWS))) || ~SOUND_VWSND
(SOUND && (~M68K && (SOUND_PRIME && (SOC_AU1550 || SOC_AU1200)))) || ~SOUND_AU1550_AC97
MSNDCLAS_HAVE_BOOT => (SOUND && (~M68K && (SOUND_PRIME && (SOUND_MSNDCLAS && ~STANDALONE))))
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) || ~MSNDCLAS_INIT_FILE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) || ~MSNDCLAS_PERM_FILE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) || ~MSNDCLAS_IRQ
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) || (MSNDCLAS_MEM => ((SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) && D0000))
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDCLAS))) || ~MSNDCLAS_IO
(SOUND && (~M68K && (SOUND_PRIME && ISA))) || ~SOUND_MSNDCLAS
MSNDPIN_HAVE_BOOT => (SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN)))
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_INIT_FILE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_PERM_FILE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_IRQ
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || (MSNDPIN_MEM => ((SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) && D0000))
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_IO
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_DIGITAL
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_CFG
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_MPU_IO
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_MPU_IRQ
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_IDE_IO0
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_IDE_IO1
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_IDE_IRQ
(SOUND && (~M68K && (SOUND_PRIME && MSNDPIN_NONPNP))) || ~MSNDPIN_JOYSTICK_IO
(SOUND && (~M68K && (SOUND_PRIME && SOUND_MSNDPIN))) || ~MSNDPIN_NONPNP
(SOUND && (~M68K && (SOUND_PRIME && ISA))) || ~SOUND_MSNDPIN
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_MSNDPIN || SOUND_MSNDCLAS)))) || ~MSND_FIFOSIZE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_TRACEINIT
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_DMAP
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_SSCAPE
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_VMIDI
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && TRIX_HAVE_BOOT)))) || ~TRIX_BOOT_FILE
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && (SOUND_TRIX && ~STANDALONE))))) || ~TRIX_HAVE_BOOT
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_TRIX
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_MSS
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_MPU401
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SOUND_PAS)))) || ~PAS_JOYSTICK
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_PAS
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SOUND_PSS)))) || ~PSS_MIXER
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && PSS_HAVE_BOOT)))) || ~PSS_BOOT_FILE
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && (SOUND_PSS && ~STANDALONE))))) || ~PSS_HAVE_BOOT
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_PSS
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_SB
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_YM3812
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_UART6850
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SC6600)))) || ~SC6600_JOY
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SC6600)))) || ~SC6600_CDROM
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SC6600)))) || ~SC6600_CDROMBASE
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SOUND_AEDSP16)))) || ~SC6600
(SOUND && (~M68K && (SOUND_PRIME && SOUND_OSS))) || ~SOUND_AEDSP16
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && (ARM && (ARCH_ACORN || ARCH_CLPS7500)))))) || ~SOUND_VIDC
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && (ARM && ARCH_NETWINDER))))) || ~SOUND_WAVEARTIST
(SOUND && (~M68K && (SOUND_PRIME && (SOUND_OSS && SOUND_SB)))) || ~SOUND_KAHLUA
(SOUND && (~M68K && (SOUND_PRIME && (ISA_DMA_API && VIRT_TO_BUS)))) || ~SOUND_OSS
(SOUND && (~M68K && (SOUND_PRIME && SOUND_SH_DAC_AUDIO))) || ~SOUND_SH_DAC_AUDIO_CHANNEL
(SOUND && (~M68K && (SOUND_PRIME && (CPU_SH3 && HIGH_RES_TIMERS)))) || ~SOUND_SH_DAC_AUDIO
(SOUND && ~M68K) || ~SOUND_PRIME
HAS_IOMEM || ~SOUND
AC97_BUS => ((((((((SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) || (SND_SOC && (SOUND && (~M68K && (SND && SND_SOC_AC97_BUS))))) || (SND_SOC_SH4_HAC && (SOUND && (~M68K && (SND && (SND_SOC && SUPERH)))))) || (SND_S3C2443_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_AC97_CODEC && (SOUND && (~M68K && SND)))) || (SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC))))) || (SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))))
(SND_PXA2XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => AC97_BUS
(SND_SOC && (SOUND && (~M68K && (SND && SND_SOC_AC97_BUS)))) => AC97_BUS
(SND_SOC_SH4_HAC && (SOUND && (~M68K && (SND && (SND_SOC && SUPERH))))) => AC97_BUS
(SND_S3C2443_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => AC97_BUS
(SND_BF5XX_SOC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => AC97_BUS
(SND_AC97_CODEC && (SOUND && (~M68K && SND))) => AC97_BUS
(SND_SOC_AU1XPSC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => AC97_BUS
(SND_SOC_TXX9ACLC_AC97 && (SOUND && (~M68K && (SND && SND_SOC)))) => AC97_BUS
(HID_SUPPORT && HID) || ~HIDRAW
(HID_SUPPORT && INPUT) || (HID => (((BT_HIDP && (NET && (BT && (BT_L2CAP && INPUT)))) || (USB_HID && (HID_SUPPORT && (USB && INPUT)))) || (HID_SUPPORT && INPUT)))
(HID_SUPPORT && INPUT) || ((BT_HIDP && (NET && (BT && (BT_L2CAP && INPUT)))) => HID)
(HID_SUPPORT && INPUT) || ((USB_HID && (HID_SUPPORT && (USB && INPUT))) => HID)
(HID_SUPPORT && INPUT) || ((HID_SUPPORT && INPUT) => HID)
(HID_SUPPORT && (USB && INPUT)) || (USB_HID => (HID_SUPPORT && (USB && INPUT)))
(HID_SUPPORT && (USB && INPUT)) || ((HID_SUPPORT && (USB && INPUT)) => USB_HID)
HID_SUPPORT || ~HID_PID
(HID_SUPPORT && USB_HID) || ~USB_HIDDEV
(HID_SUPPORT && (EMBEDDED && (USB && INPUT))) || ~USB_KBD
(HID_SUPPORT && (EMBEDDED && (USB && INPUT))) || ~USB_MOUSE
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_A4TECH => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_A4TECH)
(HID_SUPPORT && (HID && ((USB_HID || BT_HIDP) && EMBEDDED))) || (HID_APPLE => ((HID_SUPPORT && (HID && (USB_HID || BT_HIDP))) && ~EMBEDDED))
(HID_SUPPORT && (HID && ((USB_HID || BT_HIDP) && EMBEDDED))) || (((HID_SUPPORT && (HID && (USB_HID || BT_HIDP))) && ~EMBEDDED) => HID_APPLE)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_BELKIN => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_BELKIN)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_CHERRY => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_CHERRY)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_CHICONY => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_CHICONY)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_CYPRESS => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_CYPRESS)
(HID_SUPPORT && (HID && HID_DRAGONRISE)) || ~DRAGONRISE_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_DRAGONRISE => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_DRAGONRISE)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_EZKEY => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_EZKEY)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_KYE => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_KYE)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_GYRATION => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_GYRATION)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_TWINHAN => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_TWINHAN)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_KENSINGTON => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_KENSINGTON)
(HID_SUPPORT && (HID && HID_LOGITECH)) || ~LOGITECH_FF
(HID_SUPPORT && (HID && HID_LOGITECH)) || ~LOGIRUMBLEPAD2_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_LOGITECH => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_LOGITECH)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_MICROSOFT => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_MICROSOFT)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_MONTEREY => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_MONTEREY)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_NTRIG => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_NTRIG)
(HID_SUPPORT && (HID && HID_PANTHERLORD)) || ~PANTHERLORD_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_PANTHERLORD => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_PANTHERLORD)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_PETALYNX => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_PETALYNX)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_SAMSUNG => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_SAMSUNG)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_SONY => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_SONY)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_SUNPLUS => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_SUNPLUS)
(HID_SUPPORT && (HID && HID_GREENASIA)) || ~GREENASIA_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_GREENASIA => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_GREENASIA)
(HID_SUPPORT && (HID && HID_SMARTJOYPLUS)) || ~SMARTJOYPLUS_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_SMARTJOYPLUS => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_SMARTJOYPLUS)
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_TOPSEED => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_TOPSEED)
(HID_SUPPORT && (HID && HID_THRUSTMASTER)) || ~THRUSTMASTER_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_THRUSTMASTER => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_THRUSTMASTER)
(HID_SUPPORT && (HID && (BT_HIDP && EMBEDDED))) || (HID_WACOM => ((HID_SUPPORT && (HID && BT_HIDP)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (BT_HIDP && EMBEDDED))) || (((HID_SUPPORT && (HID && BT_HIDP)) && ~EMBEDDED) => HID_WACOM)
(HID_SUPPORT && (HID && HID_ZEROPLUS)) || ~ZEROPLUS_FF
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (HID_ZEROPLUS => ((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED))
(HID_SUPPORT && (HID && (USB_HID && EMBEDDED))) || (((HID_SUPPORT && (HID && USB_HID)) && ~EMBEDDED) => HID_ZEROPLUS)
INPUT || (HID_SUPPORT => INPUT)
INPUT || (INPUT => HID_SUPPORT)
USB_ARCH_HAS_HCD => ((((((USB_SUPPORT && USB_ARCH_HAS_OHCI) || (~USB_SUPPORT && USB_ARCH_HAS_OHCI && (USB_SUPPORT && USB_ARCH_HAS_EHCI))) || ((~USB_SUPPORT && USB_ARCH_HAS_EHCI && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && (PCMCIA && ~M32R)))) || (((~USB_SUPPORT && (PCMCIA && ~M32R) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && ARM))) || ((((~USB_SUPPORT && ARM && ~USB_SUPPORT && (PCMCIA && ~M32R)) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && SUPERH))) || ((((((~USB_SUPPORT && SUPERH && ~USB_SUPPORT && ARM) && ~USB_SUPPORT && (PCMCIA && ~M32R)) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && USB_SUPPORT) && PCI))
(USB_SUPPORT && USB_ARCH_HAS_OHCI) => USB_ARCH_HAS_HCD
(~USB_SUPPORT && USB_ARCH_HAS_OHCI && (USB_SUPPORT && USB_ARCH_HAS_EHCI)) => USB_ARCH_HAS_HCD
((~USB_SUPPORT && USB_ARCH_HAS_EHCI && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && (PCMCIA && ~M32R))) => USB_ARCH_HAS_HCD
(((~USB_SUPPORT && (PCMCIA && ~M32R) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && ARM)) => USB_ARCH_HAS_HCD
((((~USB_SUPPORT && ARM && ~USB_SUPPORT && (PCMCIA && ~M32R)) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && (USB_SUPPORT && SUPERH)) => USB_ARCH_HAS_HCD
((((((~USB_SUPPORT && SUPERH && ~USB_SUPPORT && ARM) && ~USB_SUPPORT && (PCMCIA && ~M32R)) && ~USB_SUPPORT && USB_ARCH_HAS_EHCI) && ~USB_SUPPORT && USB_ARCH_HAS_OHCI) && USB_SUPPORT) && PCI) => USB_ARCH_HAS_HCD
USB_ARCH_HAS_OHCI => (((((((((((((((((((USB_SUPPORT && SA1111) || (~USB_SUPPORT && SA1111 && (USB_SUPPORT && ARCH_OMAP))) || ((~USB_SUPPORT && ARCH_OMAP && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_LH7A404))) || (((~USB_SUPPORT && ARCH_LH7A404 && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_S3C2410))) || ((((~USB_SUPPORT && ARCH_S3C2410 && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PXA27x))) || (((((~USB_SUPPORT && PXA27x && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PXA3xx))) || ((((((~USB_SUPPORT && PXA3xx && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_EP93XX))) || (((((((~USB_SUPPORT && ARCH_EP93XX && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_AT91))) || ((((((((~USB_SUPPORT && ARCH_AT91 && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && (ARCH_PNX4008 && I2C)))) || (((((((((~USB_SUPPORT && (ARCH_PNX4008 && I2C) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && MFD_TC6393XB))) || ((((((((((~USB_SUPPORT && MFD_TC6393XB && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_W90X900))) || (((((((((((~USB_SUPPORT && ARCH_W90X900 && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && STB03xxx))) || ((((((((((((~USB_SUPPORT && STB03xxx && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PPC_MPC52xx))) || (((((((((((((~USB_SUPPORT && PPC_MPC52xx && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && SOC_AU1X00))) || ((((((((((((((~USB_SUPPORT && SOC_AU1X00 && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7720))) || (((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7720 && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7721))) || ((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7721 && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7763))) || (((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7763 && ~USB_SUPPORT && CPU_SUBTYPE_SH7721) && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7786))) || (((((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7786 && ~USB_SUPPORT && CPU_SUBTYPE_SH7763) && ~USB_SUPPORT && CPU_SUBTYPE_SH7721) && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && USB_SUPPORT) && PCI))
(USB_SUPPORT && SA1111) => USB_ARCH_HAS_OHCI
(~USB_SUPPORT && SA1111 && (USB_SUPPORT && ARCH_OMAP)) => USB_ARCH_HAS_OHCI
((~USB_SUPPORT && ARCH_OMAP && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_LH7A404)) => USB_ARCH_HAS_OHCI
(((~USB_SUPPORT && ARCH_LH7A404 && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_S3C2410)) => USB_ARCH_HAS_OHCI
((((~USB_SUPPORT && ARCH_S3C2410 && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PXA27x)) => USB_ARCH_HAS_OHCI
(((((~USB_SUPPORT && PXA27x && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PXA3xx)) => USB_ARCH_HAS_OHCI
((((((~USB_SUPPORT && PXA3xx && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_EP93XX)) => USB_ARCH_HAS_OHCI
(((((((~USB_SUPPORT && ARCH_EP93XX && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_AT91)) => USB_ARCH_HAS_OHCI
((((((((~USB_SUPPORT && ARCH_AT91 && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && (ARCH_PNX4008 && I2C))) => USB_ARCH_HAS_OHCI
(((((((((~USB_SUPPORT && (ARCH_PNX4008 && I2C) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && MFD_TC6393XB)) => USB_ARCH_HAS_OHCI
((((((((((~USB_SUPPORT && MFD_TC6393XB && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && ARCH_W90X900)) => USB_ARCH_HAS_OHCI
(((((((((((~USB_SUPPORT && ARCH_W90X900 && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && STB03xxx)) => USB_ARCH_HAS_OHCI
((((((((((((~USB_SUPPORT && STB03xxx && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && PPC_MPC52xx)) => USB_ARCH_HAS_OHCI
(((((((((((((~USB_SUPPORT && PPC_MPC52xx && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && SOC_AU1X00)) => USB_ARCH_HAS_OHCI
((((((((((((((~USB_SUPPORT && SOC_AU1X00 && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7720)) => USB_ARCH_HAS_OHCI
(((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7720 && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7721)) => USB_ARCH_HAS_OHCI
((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7721 && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7763)) => USB_ARCH_HAS_OHCI
(((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7763 && ~USB_SUPPORT && CPU_SUBTYPE_SH7721) && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && (USB_SUPPORT && CPU_SUBTYPE_SH7786)) => USB_ARCH_HAS_OHCI
(((((((((((((((((((~USB_SUPPORT && CPU_SUBTYPE_SH7786 && ~USB_SUPPORT && CPU_SUBTYPE_SH7763) && ~USB_SUPPORT && CPU_SUBTYPE_SH7721) && ~USB_SUPPORT && CPU_SUBTYPE_SH7720) && ~USB_SUPPORT && SOC_AU1X00) && ~USB_SUPPORT && PPC_MPC52xx) && ~USB_SUPPORT && STB03xxx) && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && MFD_TC6393XB) && ~USB_SUPPORT && (ARCH_PNX4008 && I2C)) && ~USB_SUPPORT && ARCH_AT91) && ~USB_SUPPORT && ARCH_EP93XX) && ~USB_SUPPORT && PXA3xx) && ~USB_SUPPORT && PXA27x) && ~USB_SUPPORT && ARCH_S3C2410) && ~USB_SUPPORT && ARCH_LH7A404) && ~USB_SUPPORT && ARCH_OMAP) && ~USB_SUPPORT && SA1111) && USB_SUPPORT) && PCI) => USB_ARCH_HAS_OHCI
USB_ARCH_HAS_EHCI => ((((((USB_SUPPORT && PPC_83xx) || (~USB_SUPPORT && PPC_83xx && (USB_SUPPORT && SOC_AU1200))) || ((~USB_SUPPORT && SOC_AU1200 && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_IXP4XX))) || (((~USB_SUPPORT && ARCH_IXP4XX && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_W90X900))) || ((((~USB_SUPPORT && ARCH_W90X900 && ~USB_SUPPORT && ARCH_IXP4XX) && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_AT91SAM9G45))) || ((((((~USB_SUPPORT && ARCH_AT91SAM9G45 && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && ARCH_IXP4XX) && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && USB_SUPPORT) && PCI))
(USB_SUPPORT && PPC_83xx) => USB_ARCH_HAS_EHCI
(~USB_SUPPORT && PPC_83xx && (USB_SUPPORT && SOC_AU1200)) => USB_ARCH_HAS_EHCI
((~USB_SUPPORT && SOC_AU1200 && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_IXP4XX)) => USB_ARCH_HAS_EHCI
(((~USB_SUPPORT && ARCH_IXP4XX && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_W90X900)) => USB_ARCH_HAS_EHCI
((((~USB_SUPPORT && ARCH_W90X900 && ~USB_SUPPORT && ARCH_IXP4XX) && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && (USB_SUPPORT && ARCH_AT91SAM9G45)) => USB_ARCH_HAS_EHCI
((((((~USB_SUPPORT && ARCH_AT91SAM9G45 && ~USB_SUPPORT && ARCH_W90X900) && ~USB_SUPPORT && ARCH_IXP4XX) && ~USB_SUPPORT && SOC_AU1200) && ~USB_SUPPORT && PPC_83xx) && USB_SUPPORT) && PCI) => USB_ARCH_HAS_EHCI
(USB_SUPPORT && USB) || ~USB_DEBUG
(USB_SUPPORT && USB) || ~USB_ANNOUNCE_NEW_DEVICES
(USB_SUPPORT && USB) || ~USB_DEVICEFS
(USB_SUPPORT && USB) || (USB_DEVICE_CLASS => (USB_SUPPORT && USB))
(USB_SUPPORT && USB) || ((USB_SUPPORT && USB) => USB_DEVICE_CLASS)
(USB_SUPPORT && USB) || ~USB_DYNAMIC_MINORS
(USB_SUPPORT && (USB && PM)) || (USB_SUSPEND => (USB_OTG && (USB_SUPPORT && (USB && EXPERIMENTAL))))
(USB_SUPPORT && (USB && PM)) || ((USB_OTG && (USB_SUPPORT && (USB && EXPERIMENTAL))) => USB_SUSPEND)
(USB_GADGET_OMAP && (ARCH_OMAP_OTG && USB_OHCI_HCD)) || (USB_OTG => ((USB_MUSB_HDRC_HCD && (USB_SUPPORT && (USB_MUSB_HDRC && ((USB_MUSB_HOST || USB_MUSB_OTG) && USB_GADGET_MUSB_HDRC)))) || (USB_MUSB_OTG && (USB && (USB_GADGET && (PM && EXPERIMENTAL))))))
(USB_GADGET_OMAP && (ARCH_OMAP_OTG && USB_OHCI_HCD)) || ((USB_MUSB_HDRC_HCD && (USB_SUPPORT && (USB_MUSB_HDRC && ((USB_MUSB_HOST || USB_MUSB_OTG) && USB_GADGET_MUSB_HDRC)))) => USB_OTG)
(USB_GADGET_OMAP && (ARCH_OMAP_OTG && USB_OHCI_HCD)) || ((USB_MUSB_OTG && (USB && (USB_GADGET && (PM && EXPERIMENTAL)))) => USB_OTG)
(USB_SUPPORT && (USB_OTG || EMBEDDED)) || (USB_OTG_WHITELIST => (USB_SUPPORT && ((USB_OTG || EMBEDDED) && USB_OTG)))
(USB_SUPPORT && (USB_OTG || EMBEDDED)) || ((USB_SUPPORT && ((USB_OTG || EMBEDDED) && USB_OTG)) => USB_OTG_WHITELIST)
(USB_SUPPORT && (USB_OTG || EMBEDDED)) || ~USB_OTG_BLACKLIST_HUB
(USB_SUPPORT && USB) || ~USB_MON
(USB_SUPPORT && (EXPERIMENTAL && USB)) || (USB_WUSB => ((USB_HWA_HCD && (USB_SUPPORT && (EXPERIMENTAL && USB))) || (USB_WHCI_HCD && (USB_SUPPORT && (EXPERIMENTAL && (PCI && USB))))))
(USB_SUPPORT && (EXPERIMENTAL && USB)) || ((USB_HWA_HCD && (USB_SUPPORT && (EXPERIMENTAL && USB))) => USB_WUSB)
(USB_SUPPORT && (EXPERIMENTAL && USB)) || ((USB_WHCI_HCD && (USB_SUPPORT && (EXPERIMENTAL && (PCI && USB)))) => USB_WUSB)
(USB_SUPPORT && USB_WUSB_CBAF) || ~USB_WUSB_CBAF_DEBUG
(USB_SUPPORT && USB) || ~USB_WUSB_CBAF
(USB_SUPPORT && USB) || ~USB_C67X00_HCD
(USB_SUPPORT && USB_XHCI_HCD) || ~USB_XHCI_HCD_DEBUGGING
(USB_SUPPORT && (USB && (PCI && EXPERIMENTAL))) || ~USB_XHCI_HCD
(USB_SUPPORT && USB_EHCI_HCD) || (USB_EHCI_ROOT_HUB_TT => (USB_EHCI_FSL && (USB_SUPPORT && (USB_EHCI_HCD && FSL_SOC))))
(USB_SUPPORT && USB_EHCI_HCD) || ((USB_EHCI_FSL && (USB_SUPPORT && (USB_EHCI_HCD && FSL_SOC))) => USB_EHCI_ROOT_HUB_TT)
(USB_SUPPORT && (USB_EHCI_HCD && EXPERIMENTAL)) || ~USB_EHCI_TT_NEWSCHED
USB_EHCI_BIG_ENDIAN_MMIO => (USB_SUPPORT && (USB_EHCI_HCD && (PPC_CELLEB || (PPC_PS3 || (c440EPX || ARCH_IXP4XX)))))
(USB_SUPPORT && (USB_EHCI_HCD && (PPC_CELLEB || (PPC_PS3 || (c440EPX || ARCH_IXP4XX))))) => USB_EHCI_BIG_ENDIAN_MMIO
USB_EHCI_BIG_ENDIAN_DESC => (USB_SUPPORT && (USB_EHCI_HCD && (c440EPX || ARCH_IXP4XX)))
(USB_SUPPORT && (USB_EHCI_HCD && (c440EPX || ARCH_IXP4XX))) => USB_EHCI_BIG_ENDIAN_DESC
(USB_SUPPORT && (USB_EHCI_HCD && FSL_SOC)) || ~USB_EHCI_FSL
(USB_SUPPORT && (USB_EHCI_HCD && PPC_OF)) || (USB_EHCI_HCD_PPC_OF => (USB_SUPPORT && (USB_EHCI_HCD && PPC_OF)))
(USB_SUPPORT && (USB_EHCI_HCD && PPC_OF)) || ((USB_SUPPORT && (USB_EHCI_HCD && PPC_OF)) => USB_EHCI_HCD_PPC_OF)
(USB_SUPPORT && (USB_EHCI_HCD && ARCH_W90X900)) || ~USB_W90X900_EHCI
(USB_SUPPORT && (USB && USB_ARCH_HAS_EHCI)) || ~USB_EHCI_HCD
(USB_SUPPORT && USB) || ~USB_OXU210HP_HCD
(USB_SUPPORT && USB) || ~USB_ISP116X_HCD
(USB_SUPPORT && (USB && EXPERIMENTAL)) || ~USB_ISP1760_HCD
(USB_SUPPORT && USB) || ~USB_ISP1362_HCD
(USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx))) || (USB_OHCI_HCD_PPC_SOC => (USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx))))
(USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx))) || ((USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx))) => USB_OHCI_HCD_PPC_SOC)
(USB_SUPPORT && (USB_OHCI_HCD && PPC_OF)) || ~USB_OHCI_HCD_PPC_OF_BE
(USB_SUPPORT && (USB_OHCI_HCD && PPC_OF)) || ~USB_OHCI_HCD_PPC_OF_LE
USB_OHCI_HCD_PPC_OF => ((USB_SUPPORT && (USB_OHCI_HCD && PPC_OF)) && (USB_OHCI_HCD_PPC_OF_BE || USB_OHCI_HCD_PPC_OF_LE))
((USB_SUPPORT && (USB_OHCI_HCD && PPC_OF)) && (USB_OHCI_HCD_PPC_OF_BE || USB_OHCI_HCD_PPC_OF_LE)) => USB_OHCI_HCD_PPC_OF
(USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF))))) || (USB_OHCI_HCD_PCI => (USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF))))))
(USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF))))) || ((USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF))))) => USB_OHCI_HCD_PCI)
(USB_SUPPORT && (USB_OHCI_HCD && ((SSB || SSB) && EXPERIMENTAL))) || ~USB_OHCI_HCD_SSB
USB_OHCI_BIG_ENDIAN_DESC => ((USB_OHCI_HCD_PPC_SOC && (USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)))) || (USB_OHCI_HCD_PPC_OF_BE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF))))
(USB_OHCI_HCD_PPC_SOC && (USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)))) => USB_OHCI_BIG_ENDIAN_DESC
(USB_OHCI_HCD_PPC_OF_BE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF))) => USB_OHCI_BIG_ENDIAN_DESC
USB_OHCI_BIG_ENDIAN_MMIO => ((USB_OHCI_HCD_PPC_SOC && (USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)))) || (USB_OHCI_HCD_PPC_OF_BE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF))))
(USB_OHCI_HCD_PPC_SOC && (USB_SUPPORT && (USB_OHCI_HCD && (STB03xxx || PPC_MPC52xx)))) => USB_OHCI_BIG_ENDIAN_MMIO
(USB_OHCI_HCD_PPC_OF_BE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF))) => USB_OHCI_BIG_ENDIAN_MMIO
USB_OHCI_LITTLE_ENDIAN => (((USB_OHCI_HCD_PCI && (USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)))))) || (USB_OHCI_HCD_PPC_OF_LE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF)))) || (USB_SUPPORT && USB_OHCI_HCD))
(USB_OHCI_HCD_PCI && (USB_SUPPORT && (USB_OHCI_HCD && (PCI && (STB03xxx || (PPC_MPC52xx || USB_OHCI_HCD_PPC_OF)))))) => USB_OHCI_LITTLE_ENDIAN
(USB_OHCI_HCD_PPC_OF_LE && (USB_SUPPORT && (USB_OHCI_HCD && PPC_OF))) => USB_OHCI_LITTLE_ENDIAN
(USB_SUPPORT && USB_OHCI_HCD) => USB_OHCI_LITTLE_ENDIAN
(USB_SUPPORT && (USB && USB_ARCH_HAS_OHCI)) || ~USB_OHCI_HCD
(USB_SUPPORT && (USB && PCI)) || ~USB_UHCI_HCD
(USB_SUPPORT && (USB_FHCI_HCD && DEBUG_FS)) || ~FHCI_DEBUG
(USB_SUPPORT && (USB && (OF_GPIO && (QE_GPIO && QUICC_ENGINE)))) || ~USB_FHCI_HCD
(USB_SUPPORT && (USB && USB_FTDI_ELAN)) || (USB_U132_HCD => (USB_SUPPORT && (USB && USB_FTDI_ELAN)))
(USB_SUPPORT && (USB && USB_FTDI_ELAN)) || ((USB_SUPPORT && (USB && USB_FTDI_ELAN)) => USB_U132_HCD)
(USB_SUPPORT && (USB_SL811_HCD && PCMCIA)) || ~USB_SL811_CS
(USB_SUPPORT && USB) || ~USB_SL811_HCD
(USB_SUPPORT && USB) || ~USB_R8A66597_HCD
(USB_SUPPORT && (EXPERIMENTAL && (PCI && USB))) || ~USB_WHCI_HCD
(USB_SUPPORT && (EXPERIMENTAL && USB)) || ~USB_HWA_HCD
(USB_SUPPORT && USB_ARCH_HAS_HCD) || (USB => ((((((((((((((MOUSE_APPLETOUCH && (~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD)))) || (MOUSE_BCM5974 && (~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD))))) || (INPUT_POWERMATE && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))))) || (INPUT_ATI_REMOTE && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))))) || (INPUT_CM109 && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))))) || (JOYSTICK_XPAD && (~S390 && (INPUT && (INPUT_JOYSTICK && USB_ARCH_HAS_HCD))))) || (INPUT_KEYSPAN_REMOTE && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))))) || (TABLET_USB_ACECAD && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))))) || (INPUT_ATI_REMOTE2 && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD))))) || (TOUCHSCREEN_USB_COMPOSITE && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD))))) || (TABLET_USB_KBTAB && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))))) || (TABLET_USB_AIPTEK && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))))) || (INPUT_YEALINK && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD)))))) || (TABLET_USB_WACOM && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD))))))
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((MOUSE_APPLETOUCH && (~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((MOUSE_BCM5974 && (~S390 && (INPUT && (INPUT_MOUSE && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_POWERMATE && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_ATI_REMOTE && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_CM109 && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD))))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((JOYSTICK_XPAD && (~S390 && (INPUT && (INPUT_JOYSTICK && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_KEYSPAN_REMOTE && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD))))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((TABLET_USB_ACECAD && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_ATI_REMOTE2 && (~S390 && (INPUT && (INPUT_MISC && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((TOUCHSCREEN_USB_COMPOSITE && (~S390 && (INPUT && (INPUT_TOUCHSCREEN && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((TABLET_USB_KBTAB && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((TABLET_USB_AIPTEK && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD)))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((INPUT_YEALINK && (~S390 && (INPUT && (INPUT_MISC && (EXPERIMENTAL && USB_ARCH_HAS_HCD))))) => USB)
(USB_SUPPORT && USB_ARCH_HAS_HCD) || ((TABLET_USB_WACOM && (~S390 && (INPUT && (INPUT_TABLET && USB_ARCH_HAS_HCD)))) => USB)
USB_MUSB_SOC => (((((USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) || (~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI) && (USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430)))) || ((~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX)))) || (((~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && (BF54x && ~BF544))))) || ((((~USB_SUPPORT && (USB_MUSB_HDRC && (BF54x && ~BF544)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && (BF52x && (~BF522 && ~BF523))))))
(USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) => USB_MUSB_SOC
(~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI) && (USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430))) => USB_MUSB_SOC
((~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX))) => USB_MUSB_SOC
(((~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && (BF54x && ~BF544)))) => USB_MUSB_SOC
((((~USB_SUPPORT && (USB_MUSB_HDRC && (BF54x && ~BF544)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP34XX)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_OMAP2430)) && ~USB_SUPPORT && (USB_MUSB_HDRC && ARCH_DAVINCI)) && (USB_SUPPORT && (USB_MUSB_HDRC && (BF52x && (~BF522 && ~BF523))))) => USB_MUSB_SOC
(USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC)) || (USB_TUSB6010 => (USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC)))
(USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC)) || ((USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC)) => USB_TUSB6010)
USB || ~USB_MUSB_HOST
USB_GADGET || ~USB_MUSB_PERIPHERAL
(USB && (USB_GADGET && (PM && EXPERIMENTAL))) || ~USB_MUSB_OTG
USB_SUPPORT && USB_MUSB_HDRC
(USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)) || (USB_GADGET_MUSB_HDRC => ((USB_MUSB_PERIPHERAL && USB_GADGET) || (USB_MUSB_OTG && (USB && (USB_GADGET && (PM && EXPERIMENTAL))))))
(USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)) || ((USB_MUSB_PERIPHERAL && USB_GADGET) => USB_GADGET_MUSB_HDRC)
(USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)) || ((USB_MUSB_OTG && (USB && (USB_GADGET && (PM && EXPERIMENTAL)))) => USB_GADGET_MUSB_HDRC)
USB_MUSB_HDRC_HCD => (USB_SUPPORT && (USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG)))
(USB_SUPPORT && (USB_MUSB_HDRC && (USB_MUSB_HOST || USB_MUSB_OTG))) => USB_MUSB_HDRC_HCD
USB_INVENTRA_DMA => ((USB_SUPPORT && (USB_MUSB_HDRC && ~MUSB_PIO_ONLY)) && (ARCH_OMAP2430 || (ARCH_OMAP34XX || BLACKFIN)))
((USB_SUPPORT && (USB_MUSB_HDRC && ~MUSB_PIO_ONLY)) && (ARCH_OMAP2430 || (ARCH_OMAP34XX || BLACKFIN))) => USB_INVENTRA_DMA
USB_TI_CPPI_DMA => ((USB_SUPPORT && (USB_MUSB_HDRC && ~MUSB_PIO_ONLY)) && ARCH_DAVINCI)
((USB_SUPPORT && (USB_MUSB_HDRC && ~MUSB_PIO_ONLY)) && ARCH_DAVINCI) => USB_TI_CPPI_DMA
USB_TUSB_OMAP_DMA => (USB_SUPPORT && (USB_MUSB_HDRC && (~MUSB_PIO_ONLY && (USB_TUSB6010 && ARCH_OMAP))))
(USB_SUPPORT && (USB_MUSB_HDRC && (~MUSB_PIO_ONLY && (USB_TUSB6010 && ARCH_OMAP)))) => USB_TUSB_OMAP_DMA
(USB_SUPPORT && USB_MUSB_HDRC) || (MUSB_PIO_ONLY => (USB_SUPPORT && (USB_MUSB_HDRC && USB_TUSB6010)))
(USB_SUPPORT && USB_MUSB_HDRC) || ((USB_SUPPORT && (USB_MUSB_HDRC && USB_TUSB6010)) => MUSB_PIO_ONLY)
(USB_SUPPORT && USB_MUSB_HDRC) || ~USB_MUSB_DEBUG
(USB_SUPPORT && ((USB || USB_GADGET) && (ARM || BLACKFIN))) || ~USB_MUSB_HDRC
(USB_SUPPORT && USB) || ~USB_ACM
(USB_SUPPORT && USB) || ~USB_PRINTER
(USB_SUPPORT && USB) || ~USB_WDM
(USB_SUPPORT && USB) || ~USB_TMC
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_DEBUG
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_DATAFAB
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_FREECOM
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_ISD200
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_USBAT
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_SDDR09
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_SDDR55
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_JUMPSHOT
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_ALAUDA
(USB_SUPPORT && (USB_STORAGE && (INPUT || INPUT))) || ~USB_STORAGE_ONETOUCH
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_KARMA
(USB_SUPPORT && USB_STORAGE) || ~USB_STORAGE_CYPRESS_ATACB
(USB_SUPPORT && (USB && SCSI)) || ~USB_STORAGE
(USB_SUPPORT && USB) || ~USB_LIBUSUAL
(USB_SUPPORT && USB) || ~USB_MDC800
(USB_SUPPORT && (USB && SCSI)) || ~USB_MICROTEK
(USB_SUPPORT && (USB && PARPORT)) || ~USB_USS720
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_CONSOLE
(USB_SUPPORT && USB_SERIAL) || (USB_EZUSB => ((((USB_SERIAL_WHITEHEAT && (USB_SUPPORT && USB_SERIAL)) || (USB_SERIAL_XIRCOM && (USB_SUPPORT && USB_SERIAL))) || (USB_SERIAL_KEYSPAN && (USB_SUPPORT && USB_SERIAL))) || (USB_SERIAL_KEYSPAN_PDA && (USB_SUPPORT && USB_SERIAL))))
(USB_SUPPORT && USB_SERIAL) || ((USB_SERIAL_WHITEHEAT && (USB_SUPPORT && USB_SERIAL)) => USB_EZUSB)
(USB_SUPPORT && USB_SERIAL) || ((USB_SERIAL_XIRCOM && (USB_SUPPORT && USB_SERIAL)) => USB_EZUSB)
(USB_SUPPORT && USB_SERIAL) || ((USB_SERIAL_KEYSPAN && (USB_SUPPORT && USB_SERIAL)) => USB_EZUSB)
(USB_SUPPORT && USB_SERIAL) || ((USB_SERIAL_KEYSPAN_PDA && (USB_SUPPORT && USB_SERIAL)) => USB_EZUSB)
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_GENERIC
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_AIRCABLE
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_ARK3116
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_BELKIN
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_CH341
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_WHITEHEAT
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_DIGI_ACCELEPORT
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_CP210X
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_CYPRESS_M8
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_EMPEG
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_FTDI_SIO
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_FUNSOFT
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_VISOR
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_IPAQ
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_IR
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_EDGEPORT
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_EDGEPORT_TI
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_GARMIN
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_IPW
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_IUU
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_KEYSPAN_PDA
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_MPR
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA28
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA28X
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA28XA
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA28XB
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA19
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA18X
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA19W
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA19QW
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA19QI
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA49W
(USB_SUPPORT && (USB_SERIAL && (USB_SERIAL_KEYSPAN && FIRMWARE_IN_KERNEL))) || ~USB_SERIAL_KEYSPAN_USA49WLC
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_KEYSPAN
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_KLSI
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_KOBIL_SCT
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_MCT_U232
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_MOS7720
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_MOS7840
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_MOTOROLA
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_NAVMAN
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_PL2303
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_OTI6858
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_QUALCOMM
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_SPCP8X5
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_HP4X
(USB_SUPPORT && (USB_SERIAL && USB_SERIAL_SAFE)) || ~USB_SERIAL_SAFE_PADDED
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_SAFE
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_SIEMENS_MPI
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_SIERRAWIRELESS
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_SYMBOL
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_TI
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_CYBERJACK
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_XIRCOM
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_OPTION
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_OMNINET
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_OPTICON
(USB_SUPPORT && USB_SERIAL) || ~USB_SERIAL_DEBUG
(USB_SUPPORT && USB) || ~USB_SERIAL
(USB_SUPPORT && USB) || ~USB_EMI62
(USB_SUPPORT && USB) || ~USB_EMI26
(USB_SUPPORT && USB) || ~USB_ADUTUX
(USB_SUPPORT && USB) || ~USB_SEVSEG
(USB_SUPPORT && USB) || ~USB_RIO500
(USB_SUPPORT && USB) || ~USB_LEGOTOWER
(USB_SUPPORT && USB) || ~USB_LCD
(USB_SUPPORT && USB) || ~USB_BERRY_CHARGE
(USB_SUPPORT && USB) || ~USB_LED
(USB_SUPPORT && USB) || ~USB_CYPRESS_CY7C63
(USB_SUPPORT && USB) || ~USB_CYTHERM
(USB_SUPPORT && USB) || ~USB_IDMOUSE
(USB_SUPPORT && USB) || (USB_FTDI_ELAN => (USB_SUPPORT && USB))
(USB_SUPPORT && USB) || ((USB_SUPPORT && USB) => USB_FTDI_ELAN)
(USB_SUPPORT && USB) || ~USB_APPLEDISPLAY
(USB_SUPPORT && (VT && USB_SISUSBVGA)) || ~USB_SISUSBVGA_CON
(USB_SUPPORT && (USB && (USB_MUSB_HDRC || USB_EHCI_HCD))) || ~USB_SISUSBVGA
(USB_SUPPORT && USB) || ~USB_LD
(USB_SUPPORT && USB) || ~USB_TRANCEVIBRATOR
(USB_SUPPORT && USB) || ~USB_IOWARRIOR
(USB_SUPPORT && USB) || ~USB_TEST
(USB_SUPPORT && USB) || ~USB_ISIGHTFW
(USB_SUPPORT && USB) || ~USB_VST
(USB_SUPPORT && USB_ATM) || ~USB_SPEEDTOUCH
(USB_SUPPORT && USB_ATM) || ~USB_CXACRU
(USB_SUPPORT && USB_ATM) || ~USB_UEAGLEATM
(USB_SUPPORT && USB_ATM) || ~USB_XUSBATM
(USB_SUPPORT && (USB && ATM)) || ~USB_ATM
(USB_SUPPORT && (USB_GADGET && DEBUG_KERNEL)) || ~USB_GADGET_DEBUG
(USB_SUPPORT && (USB_GADGET && PROC_FS)) || ~USB_GADGET_DEBUG_FILES
(USB_SUPPORT && (USB_GADGET && DEBUG_FS)) || ~USB_GADGET_DEBUG_FS
(USB_SUPPORT && USB_GADGET) || ~USB_GADGET_VBUS_DRAW
USB_GADGET_SELECTED => ((((((((((((((((((((USB_S3C_HSOTG && USB_GADGET_S3C_HSOTG) || (USB_OMAP && USB_GADGET_OMAP)) || (USB_CI13XXX && USB_GADGET_CI13XXX)) || (USB_GADGET_MUSB_HDRC && (USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)))) || (USB_ATMEL_USBA && USB_GADGET_ATMEL_USBA)) || (USB_PXA27X && USB_GADGET_PXA27X)) || (USB_S3C2410 && USB_GADGET_S3C2410)) || (USB_IMX && USB_GADGET_IMX)) || (USB_FSL_QE && USB_GADGET_FSL_QE)) || (USB_NET2280 && USB_GADGET_NET2280)) || (USB_FSL_USB2 && USB_GADGET_FSL_USB2)) || (USB_GOKU && USB_GADGET_GOKU)) || (USB_AMD5536UDC && USB_GADGET_AMD5536UDC)) || (USB_PXA25X && USB_GADGET_PXA25X)) || (USB_LH7A40X && USB_GADGET_LH7A40X)) || (USB_M66592 && USB_GADGET_M66592)) || (USB_R8A66597 && USB_GADGET_R8A66597)) || (USB_DUMMY_HCD && USB_GADGET_DUMMY_HCD)) || (USB_GADGET_AT91 && (ARCH_AT91 && (~ARCH_AT91SAM9RL && (~ARCH_AT91CAP9 && ~ARCH_AT91SAM9G45))))) || (USB_LANGWELL && USB_GADGET_LANGWELL))
(USB_S3C_HSOTG && USB_GADGET_S3C_HSOTG) => USB_GADGET_SELECTED
(USB_OMAP && USB_GADGET_OMAP) => USB_GADGET_SELECTED
(USB_CI13XXX && USB_GADGET_CI13XXX) => USB_GADGET_SELECTED
(USB_GADGET_MUSB_HDRC && (USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG))) => USB_GADGET_SELECTED
(USB_ATMEL_USBA && USB_GADGET_ATMEL_USBA) => USB_GADGET_SELECTED
(USB_PXA27X && USB_GADGET_PXA27X) => USB_GADGET_SELECTED
(USB_S3C2410 && USB_GADGET_S3C2410) => USB_GADGET_SELECTED
(USB_IMX && USB_GADGET_IMX) => USB_GADGET_SELECTED
(USB_FSL_QE && USB_GADGET_FSL_QE) => USB_GADGET_SELECTED
(USB_NET2280 && USB_GADGET_NET2280) => USB_GADGET_SELECTED
(USB_FSL_USB2 && USB_GADGET_FSL_USB2) => USB_GADGET_SELECTED
(USB_GOKU && USB_GADGET_GOKU) => USB_GADGET_SELECTED
(USB_AMD5536UDC && USB_GADGET_AMD5536UDC) => USB_GADGET_SELECTED
(USB_PXA25X && USB_GADGET_PXA25X) => USB_GADGET_SELECTED
(USB_LH7A40X && USB_GADGET_LH7A40X) => USB_GADGET_SELECTED
(USB_M66592 && USB_GADGET_M66592) => USB_GADGET_SELECTED
(USB_R8A66597 && USB_GADGET_R8A66597) => USB_GADGET_SELECTED
(USB_DUMMY_HCD && USB_GADGET_DUMMY_HCD) => USB_GADGET_SELECTED
(USB_GADGET_AT91 && (ARCH_AT91 && (~ARCH_AT91SAM9RL && (~ARCH_AT91CAP9 && ~ARCH_AT91SAM9G45)))) => USB_GADGET_SELECTED
(USB_LANGWELL && USB_GADGET_LANGWELL) => USB_GADGET_SELECTED
USB_AT91 => (USB_GADGET_AT91 && USB_GADGET)
(USB_GADGET_AT91 && USB_GADGET) => USB_AT91
(ARCH_AT91 && (~ARCH_AT91SAM9RL && (~ARCH_AT91CAP9 && ~ARCH_AT91SAM9G45))) || ~USB_GADGET_AT91
USB_ATMEL_USBA => (USB_GADGET_ATMEL_USBA && USB_GADGET)
(USB_GADGET_ATMEL_USBA && USB_GADGET) => USB_ATMEL_USBA
(AVR32 || (ARCH_AT91CAP9 || (ARCH_AT91SAM9RL || ARCH_AT91SAM9G45))) || ~USB_GADGET_ATMEL_USBA
USB_FSL_USB2 => (USB_GADGET_FSL_USB2 && USB_GADGET)
(USB_GADGET_FSL_USB2 && USB_GADGET) => USB_FSL_USB2
(FSL_SOC || ARCH_MXC) || ~USB_GADGET_FSL_USB2
USB_LH7A40X => (USB_GADGET_LH7A40X && USB_GADGET)
(USB_GADGET_LH7A40X && USB_GADGET) => USB_LH7A40X
ARCH_LH7A40X || ~USB_GADGET_LH7A40X
USB_OMAP => (USB_GADGET_OMAP && USB_GADGET)
(USB_GADGET_OMAP && USB_GADGET) => USB_OMAP
ARCH_OMAP || ~USB_GADGET_OMAP
USB_PXA25X => (USB_GADGET_PXA25X && USB_GADGET)
(USB_GADGET_PXA25X && USB_GADGET) => USB_PXA25X
USB_PXA25X_SMALL => (((USB_GADGET_PXA25X && USB_ZERO) || (~USB_GADGET_PXA25X && USB_ZERO && (USB_GADGET_PXA25X && USB_ETH))) || ((~USB_GADGET_PXA25X && USB_ETH && ~USB_GADGET_PXA25X && USB_ZERO) && (USB_GADGET_PXA25X && USB_G_SERIAL)))
(USB_GADGET_PXA25X && USB_ZERO) => USB_PXA25X_SMALL
(~USB_GADGET_PXA25X && USB_ZERO && (USB_GADGET_PXA25X && USB_ETH)) => USB_PXA25X_SMALL
((~USB_GADGET_PXA25X && USB_ETH && ~USB_GADGET_PXA25X && USB_ZERO) && (USB_GADGET_PXA25X && USB_G_SERIAL)) => USB_PXA25X_SMALL
((ARCH_PXA && PXA25x) || ARCH_IXP4XX) || ~USB_GADGET_PXA25X
USB_R8A66597 => (USB_GADGET_R8A66597 && USB_GADGET)
(USB_GADGET_R8A66597 && USB_GADGET) => USB_R8A66597
USB_PXA27X => (USB_GADGET_PXA27X && USB_GADGET)
(USB_GADGET_PXA27X && USB_GADGET) => USB_PXA27X
(ARCH_PXA && (PXA27x || PXA3xx)) || ~USB_GADGET_PXA27X
USB_S3C_HSOTG => (USB_GADGET_S3C_HSOTG && USB_GADGET)
(USB_GADGET_S3C_HSOTG && USB_GADGET) => USB_S3C_HSOTG
S3C_DEV_USB_HSOTG || ~USB_GADGET_S3C_HSOTG
USB_IMX => (USB_GADGET_IMX && USB_GADGET)
(USB_GADGET_IMX && USB_GADGET) => USB_IMX
ARCH_MX1 || ~USB_GADGET_IMX
USB_S3C2410 => (USB_GADGET_S3C2410 && USB_GADGET)
(USB_GADGET_S3C2410 && USB_GADGET) => USB_S3C2410
USB_GADGET_S3C2410 || ~USB_S3C2410_DEBUG
ARCH_S3C2410 || ~USB_GADGET_S3C2410
USB_M66592 => (USB_GADGET_M66592 && USB_GADGET)
(USB_GADGET_M66592 && USB_GADGET) => USB_M66592
USB_AMD5536UDC => (USB_GADGET_AMD5536UDC && USB_GADGET)
(USB_GADGET_AMD5536UDC && USB_GADGET) => USB_AMD5536UDC
PCI || ~USB_GADGET_AMD5536UDC
USB_FSL_QE => (USB_GADGET_FSL_QE && USB_GADGET)
(USB_GADGET_FSL_QE && USB_GADGET) => USB_FSL_QE
(FSL_SOC && (QUICC_ENGINE || CPM)) || ~USB_GADGET_FSL_QE
USB_CI13XXX => (USB_GADGET_CI13XXX && USB_GADGET)
(USB_GADGET_CI13XXX && USB_GADGET) => USB_CI13XXX
PCI || ~USB_GADGET_CI13XXX
USB_NET2280 => (USB_GADGET_NET2280 && USB_GADGET)
(USB_GADGET_NET2280 && USB_GADGET) => USB_NET2280
PCI || ~USB_GADGET_NET2280
USB_GOKU => (USB_GADGET_GOKU && USB_GADGET)
(USB_GADGET_GOKU && USB_GADGET) => USB_GOKU
PCI || ~USB_GADGET_GOKU
USB_LANGWELL => (USB_GADGET_LANGWELL && USB_GADGET)
(USB_GADGET_LANGWELL && USB_GADGET) => USB_LANGWELL
PCI || ~USB_GADGET_LANGWELL
USB_DUMMY_HCD => (USB_GADGET_DUMMY_HCD && USB_GADGET)
(USB_GADGET_DUMMY_HCD && USB_GADGET) => USB_DUMMY_HCD
(USB || (USB && USB_GADGET)) || ~USB_GADGET_DUMMY_HCD
USB_SUPPORT && USB_GADGET
USB_GADGET_DUALSPEED => ((((((((((USB_GADGET_AMD5536UDC && PCI) || (USB_GADGET_DUMMY_HCD && (USB || (USB && USB_GADGET)))) || (USB_GADGET_MUSB_HDRC && (USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG)))) || (USB_GADGET_FSL_USB2 && (FSL_SOC || ARCH_MXC))) || (USB_GADGET_ATMEL_USBA && (AVR32 || (ARCH_AT91CAP9 || (ARCH_AT91SAM9RL || ARCH_AT91SAM9G45))))) || USB_GADGET_R8A66597) || (USB_GADGET_CI13XXX && PCI)) || USB_GADGET_M66592) || (USB_GADGET_NET2280 && PCI)) || (USB_GADGET_LANGWELL && PCI))
(USB_GADGET_AMD5536UDC && PCI) => USB_GADGET_DUALSPEED
(USB_GADGET_MUSB_HDRC && (USB_MUSB_HDRC && (USB_MUSB_PERIPHERAL || USB_MUSB_OTG))) => USB_GADGET_DUALSPEED
(USB_GADGET_FSL_USB2 && (FSL_SOC || ARCH_MXC)) => USB_GADGET_DUALSPEED
(USB_GADGET_ATMEL_USBA && (AVR32 || (ARCH_AT91CAP9 || (ARCH_AT91SAM9RL || ARCH_AT91SAM9G45)))) => USB_GADGET_DUALSPEED
USB_GADGET_R8A66597 => USB_GADGET_DUALSPEED
(USB_GADGET_CI13XXX && PCI) => USB_GADGET_DUALSPEED
USB_GADGET_M66592 => USB_GADGET_DUALSPEED
(USB_GADGET_NET2280 && PCI) => USB_GADGET_DUALSPEED
(USB_GADGET_LANGWELL && PCI) => USB_GADGET_DUALSPEED
(USB_ZERO && USB_OTG) || ~USB_ZERO_HNPTEST
SND || ~USB_AUDIO
USB_ETH || (USB_ETH_RNDIS => USB_ETH)
USB_ETH || (USB_ETH => USB_ETH_RNDIS)
USB_ETH || ~USB_ETH_EEM
NET || ~USB_ETH
EXPERIMENTAL || ~USB_GADGETFS
USB_FILE_STORAGE || ~USB_FILE_STORAGE_TEST
BLOCK || ~USB_FILE_STORAGE
(SND && EXPERIMENTAL) || ~USB_MIDI_GADGET
NET || ~USB_CDC_COMPOSITE
USB_SUPPORT && (USB_GADGET && USB_GADGET_SELECTED)
USB_SUPPORT || ~USB_GADGET
USB_OTG_UTILS => (((((((((USB_GADGET_OMAP && ARCH_OMAP) || (USB_GADGET_PXA25X && ((ARCH_PXA && PXA25x) || ARCH_IXP4XX))) || (USB_OHCI_HCD && (USB_SUPPORT && (USB && (USB_ARCH_HAS_OHCI && ARCH_OMAP))))) || (USB_GPIO_VBUS && (USB_SUPPORT && ((USB || USB_GADGET) && GENERIC_GPIO)))) || (ISP1301_OMAP && (USB_SUPPORT && ((USB || USB_GADGET) && (I2C && ARCH_OMAP_OTG))))) || (NOP_USB_XCEIV && (USB_SUPPORT && (USB || USB_GADGET)))) || (USB_GADGET_PXA27X && (ARCH_PXA && (PXA27x || PXA3xx)))) || (TWL4030_USB && (USB_SUPPORT && ((USB || USB_GADGET) && (TWL4030_CORE && REGULATOR_TWL4030))))) || (USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && (ARM || BLACKFIN)))))
(USB_GADGET_OMAP && ARCH_OMAP) => USB_OTG_UTILS
(USB_GADGET_PXA25X && ((ARCH_PXA && PXA25x) || ARCH_IXP4XX)) => USB_OTG_UTILS
(USB_OHCI_HCD && (USB_SUPPORT && (USB && (USB_ARCH_HAS_OHCI && ARCH_OMAP)))) => USB_OTG_UTILS
(USB_GPIO_VBUS && (USB_SUPPORT && ((USB || USB_GADGET) && GENERIC_GPIO))) => USB_OTG_UTILS
(ISP1301_OMAP && (USB_SUPPORT && ((USB || USB_GADGET) && (I2C && ARCH_OMAP_OTG)))) => USB_OTG_UTILS
(NOP_USB_XCEIV && (USB_SUPPORT && (USB || USB_GADGET))) => USB_OTG_UTILS
(USB_GADGET_PXA27X && (ARCH_PXA && (PXA27x || PXA3xx))) => USB_OTG_UTILS
(TWL4030_USB && (USB_SUPPORT && ((USB || USB_GADGET) && (TWL4030_CORE && REGULATOR_TWL4030)))) => USB_OTG_UTILS
(USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && (ARM || BLACKFIN)))) => USB_OTG_UTILS
(USB_SUPPORT && ((USB || USB_GADGET) && GENERIC_GPIO)) || ~USB_GPIO_VBUS
(USB_SUPPORT && ((USB || USB_GADGET) && (I2C && ARCH_OMAP_OTG))) || (ISP1301_OMAP => ((USB_OHCI_HCD && (USB_SUPPORT && (USB && (USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3))))) || (USB_GADGET_OMAP && (ARCH_OMAP && (MACH_OMAP_H2 || (MACH_OMAP_H3 || MACH_OMAP_H4_OTG))))))
(USB_SUPPORT && ((USB || USB_GADGET) && (I2C && ARCH_OMAP_OTG))) || ((USB_OHCI_HCD && (USB_SUPPORT && (USB && (USB_ARCH_HAS_OHCI && (MACH_OMAP_H2 || MACH_OMAP_H3))))) => ISP1301_OMAP)
(USB_SUPPORT && ((USB || USB_GADGET) && (I2C && ARCH_OMAP_OTG))) || ((USB_GADGET_OMAP && (ARCH_OMAP && (MACH_OMAP_H2 || (MACH_OMAP_H3 || MACH_OMAP_H4_OTG)))) => ISP1301_OMAP)
(USB_SUPPORT && ((USB || USB_GADGET) && (TWL4030_CORE && REGULATOR_TWL4030))) || (TWL4030_USB => (USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && MACH_OMAP_3430SDP)))))
(USB_SUPPORT && ((USB || USB_GADGET) && (TWL4030_CORE && REGULATOR_TWL4030))) || ((USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && MACH_OMAP_3430SDP)))) => TWL4030_USB)
(USB_SUPPORT && (USB || USB_GADGET)) || (NOP_USB_XCEIV => (((USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && ARCH_DAVINCI)))) || (USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && MACH_OMAP3EVM))))) || (USB_TUSB6010 && (USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC)))))
(USB_SUPPORT && (USB || USB_GADGET)) || ((USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && ARCH_DAVINCI)))) => NOP_USB_XCEIV)
(USB_SUPPORT && (USB || USB_GADGET)) || ((USB_MUSB_HDRC && (USB_SUPPORT && ((USB || USB_GADGET) && ((ARM || BLACKFIN) && MACH_OMAP3EVM)))) => NOP_USB_XCEIV)
(USB_SUPPORT && (USB || USB_GADGET)) || ((USB_TUSB6010 && (USB_SUPPORT && (USB_MUSB_HDRC && ~USB_MUSB_SOC))) => NOP_USB_XCEIV)
HAS_IOMEM || (USB_SUPPORT => HAS_IOMEM)
HAS_IOMEM || (HAS_IOMEM => USB_SUPPORT)
(UWB && USB) || (UWB_HWA => (USB_HWA_HCD && (USB_SUPPORT && (EXPERIMENTAL && USB))))
(UWB && USB) || ((USB_HWA_HCD && (USB_SUPPORT && (EXPERIMENTAL && USB))) => UWB_HWA)
(UWB && PCI) || (UWB_WHCI => (USB_WHCI_HCD && (USB_SUPPORT && (EXPERIMENTAL && (PCI && USB)))))
(UWB && PCI) || ((USB_WHCI_HCD && (USB_SUPPORT && (EXPERIMENTAL && (PCI && USB)))) => UWB_WHCI)
(UWB && NET) || ~UWB_WLP
(UWB && (UWB_I1480U && (UWB_WLP && NET))) || ~UWB_I1480U_WLP
(UWB && UWB_HWA) || ~UWB_I1480U
(EXPERIMENTAL && PCI) || (UWB => (USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))))
(EXPERIMENTAL && PCI) || ((USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))) => UWB)
MMC || ~MMC_DEBUG
MMC || ~MMC_UNSAFE_RESUME
(MMC && MMC_BLOCK) || (MMC_BLOCK_BOUNCE => (MMC && MMC_BLOCK))
(MMC && MMC_BLOCK) || ((MMC && MMC_BLOCK) => MMC_BLOCK_BOUNCE)
(MMC && BLOCK) || (MMC_BLOCK => (MMC && BLOCK))
(MMC && BLOCK) || ((MMC && BLOCK) => MMC_BLOCK)
MMC || ~SDIO_UART
MMC || ~MMC_TEST
(MMC && ARM_AMBA) || ~MMC_ARMMMCI
(MMC && ARCH_PXA) || ~MMC_PXA
MMC_SDHCI_IO_ACCESSORS => (MMC_SDHCI_OF && (MMC && (MMC_SDHCI && PPC_OF)))
(MMC_SDHCI_OF && (MMC && (MMC_SDHCI && PPC_OF))) => MMC_SDHCI_IO_ACCESSORS
(MMC && MMC_SDHCI_PCI) || ~MMC_RICOH_MMC
(MMC && (MMC_SDHCI && PCI)) || ~MMC_SDHCI_PCI
(MMC && (MMC_SDHCI && PPC_OF)) || ~MMC_SDHCI_OF
(MMC && MMC_SDHCI) || ~MMC_SDHCI_PLTFM
(MMC && (MMC_SDHCI_S3C && EXPERIMENTAL)) || ~MMC_SDHCI_S3C_DMA
(MMC && (MMC_SDHCI && (PLAT_S3C24XX || PLAT_S3C64XX))) || ~MMC_SDHCI_S3C
(MMC && HAS_DMA) || ~MMC_SDHCI
(MMC && ARCH_OMAP) || ~MMC_OMAP
(MMC && (ARCH_OMAP2430 || (ARCH_OMAP3 || ARCH_OMAP4))) || ~MMC_OMAP_HS
(MMC && ISA_DMA_API) || ~MMC_WBSD
(MMC && SOC_AU1200) || ~MMC_AU1X
ARCH_AT91 || ~MMC_AT91
(AVR32 || ARCH_AT91) || ~MMC_ATMELMCI
MMC
(MMC && (MMC_ATMELMCI && (AVR32 && (DMA_ENGINE && EXPERIMENTAL)))) || ~MMC_ATMELMCI_DMA
(MMC && ARCH_MX1) || ~MMC_IMX
(MMC && ARCH_MSM) || ~MMC_MSM7X00A
(MMC && ARCH_MXC) || ~MMC_MXC
(MMC && (EXPERIMENTAL && PCI)) || ~MMC_TIFM_SD
(MMC && PLAT_ORION) || ~MMC_MVSDIO
(MMC && (SPI_MASTER && (~HIGHMEM && HAS_DMA))) || ~MMC_SPI
(MMC && MMC_S3C) || ~MMC_S3C_HW_SDIO_IRQ
EXPERIMENTAL || ~MMC_S3C_DMA
MMC && MMC_S3C
(MMC && ARCH_S3C2410) || ~MMC_S3C
(MMC && (EXPERIMENTAL && (PCI && PCMCIA))) || ~MMC_SDRICOH_CS
(MMC && (MFD_TMIO || MFD_ASIC3)) || ~MMC_TMIO
(MMC && PCI) || ~MMC_CB710
(MMC && PCI) || ~MMC_VIA_SDMMC
HAS_IOMEM || ~MMC
MEMSTICK || ~MEMSTICK_DEBUG
MEMSTICK || ~MEMSTICK_UNSAFE_RESUME
(MEMSTICK && BLOCK) || ~MSPRO_BLOCK
(MEMSTICK && (EXPERIMENTAL && PCI)) || ~MEMSTICK_TIFM_MS
(MEMSTICK && (EXPERIMENTAL && PCI)) || ~MEMSTICK_JMICRON_38X
NEW_LEDS || (LEDS_CLASS => ((((((((((ATH5K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) || (ASUS_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (~ACPI_ASUS && INPUT)))))) || (SENSORS_LIS3LV02D && (HWMON && (ACPI && INPUT)))) || (THINKPAD_ACPI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))))) || (ADB_PMU_LED && (MACINTOSH_DRIVERS && ADB_PMU))) || (ATH9K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211))))))) || (INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP)))))) || (INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64)))))) || (IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && (EXPERIMENTAL && IWLWIFI_LEDS)))))))) || (SENSORS_APPLESMC && (HWMON && (INPUT && X86)))))
NEW_LEDS || ((ATH5K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) => LEDS_CLASS)
NEW_LEDS || ((ASUS_LAPTOP && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (~ACPI_ASUS && INPUT))))) => LEDS_CLASS)
NEW_LEDS || ((SENSORS_LIS3LV02D && (HWMON && (ACPI && INPUT))) => LEDS_CLASS)
NEW_LEDS || ((ADB_PMU_LED && (MACINTOSH_DRIVERS && ADB_PMU)) => LEDS_CLASS)
NEW_LEDS || ((ATH9K && (NETDEVICES && (WLAN && (ATH_COMMON && (PCI && (MAC80211 && WLAN_80211)))))) => LEDS_CLASS)
NEW_LEDS || ((INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP))))) => LEDS_CLASS)
NEW_LEDS || ((INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64))))) => LEDS_CLASS)
NEW_LEDS || ((IWLWIFI && (NETDEVICES && (WLAN && (PCI && (MAC80211 && (WLAN_80211 && (EXPERIMENTAL && IWLWIFI_LEDS))))))) => LEDS_CLASS)
NEW_LEDS || ((SENSORS_APPLESMC && (HWMON && (INPUT && X86))) => LEDS_CLASS)
(NEW_LEDS && (LEDS_CLASS && ATMEL_PWM)) || ~LEDS_ATMEL_PWM
(NEW_LEDS && (LEDS_CLASS && SHARP_LOCOMO)) || ~LEDS_LOCOMO
(NEW_LEDS && (LEDS_CLASS && MIKROTIK_RB532)) || ~LEDS_MIKROTIK_RB532
(NEW_LEDS && (LEDS_CLASS && ARCH_S3C2410)) || ~LEDS_S3C24XX
(NEW_LEDS && (LEDS_CLASS && MACH_AMS_DELTA)) || ~LEDS_AMS_DELTA
(NEW_LEDS && (LEDS_CLASS && SCx200_GPIO)) || ~LEDS_NET48XX
(NEW_LEDS && (LEDS_CLASS && MACH_FSG)) || ~LEDS_FSG
(NEW_LEDS && (LEDS_CLASS && SCx200_GPIO)) || ~LEDS_WRAP
(NEW_LEDS && (LEDS_CLASS && (X86 && EXPERIMENTAL))) || ~LEDS_ALIX2
(NEW_LEDS && (LEDS_CLASS && ARCH_H1940)) || ~LEDS_H1940
(NEW_LEDS && (LEDS_CLASS && MIPS_COBALT)) || ~LEDS_COBALT_QUBE
(NEW_LEDS && (LEDS_CLASS && MIPS_COBALT)) || ~LEDS_COBALT_RAQ
(NEW_LEDS && (LEDS_CLASS && SPARC64)) || ~LEDS_SUNFIRE
(NEW_LEDS && (LEDS_CLASS && SH_HP6XX)) || ~LEDS_HP6XX
(NEW_LEDS && (LEDS_CLASS && (I2C && (INPUT && EXPERIMENTAL)))) || ~LEDS_PCA9532
(NEW_LEDS && LEDS_GPIO) || (LEDS_GPIO_PLATFORM => (NEW_LEDS && LEDS_GPIO))
(NEW_LEDS && LEDS_GPIO) || ((NEW_LEDS && LEDS_GPIO) => LEDS_GPIO_PLATFORM)
(NEW_LEDS && (LEDS_GPIO && OF_DEVICE)) || (LEDS_GPIO_OF => (NEW_LEDS && (LEDS_GPIO && OF_DEVICE)))
(NEW_LEDS && (LEDS_GPIO && OF_DEVICE)) || ((NEW_LEDS && (LEDS_GPIO && OF_DEVICE)) => LEDS_GPIO_OF)
(NEW_LEDS && (LEDS_CLASS && GENERIC_GPIO)) || ~LEDS_GPIO
(NEW_LEDS && (LEDS_CLASS && I2C)) || ~LEDS_LP3944
(NEW_LEDS && (LEDS_CLASS && (X86 && (SERIO_I8042 && DMI)))) || ~LEDS_CLEVO_MAIL
(NEW_LEDS && (LEDS_CLASS && I2C)) || ~LEDS_PCA955X
(NEW_LEDS && (LEDS_CLASS && MFD_WM831X)) || ~LEDS_WM831X_STATUS
(NEW_LEDS && (LEDS_CLASS && MFD_WM8350)) || ~LEDS_WM8350
(NEW_LEDS && (LEDS_CLASS && PMIC_DA903X)) || ~LEDS_DA903X
(NEW_LEDS && (LEDS_CLASS && SPI)) || ~LEDS_DAC124S085
(NEW_LEDS && (LEDS_CLASS && HAVE_PWM)) || ~LEDS_PWM
(NEW_LEDS && (LEDS_CLASS && I2C)) || ~LEDS_BD2802
(NEW_LEDS && LEDS_TRIGGERS) || ~LEDS_TRIGGER_TIMER
(NEW_LEDS && (LEDS_TRIGGERS && IDE_GD_ATA)) || (LEDS_TRIGGER_IDE_DISK => (ADB_PMU_LED_IDE && (MACINTOSH_DRIVERS && ADB_PMU_LED)))
(NEW_LEDS && (LEDS_TRIGGERS && IDE_GD_ATA)) || ((ADB_PMU_LED_IDE && (MACINTOSH_DRIVERS && ADB_PMU_LED)) => LEDS_TRIGGER_IDE_DISK)
(NEW_LEDS && LEDS_TRIGGERS) || ~LEDS_TRIGGER_HEARTBEAT
(NEW_LEDS && LEDS_TRIGGERS) || ~LEDS_TRIGGER_BACKLIGHT
(NEW_LEDS && (LEDS_TRIGGERS && GPIOLIB)) || ~LEDS_TRIGGER_GPIO
(NEW_LEDS && LEDS_TRIGGERS) || ~LEDS_TRIGGER_DEFAULT_ON
NEW_LEDS || (LEDS_TRIGGERS => (((((LEDS_COBALT_RAQ && (NEW_LEDS && (LEDS_CLASS && MIPS_COBALT))) || (INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP)))))) || (ADB_PMU_LED_IDE && (MACINTOSH_DRIVERS && ADB_PMU_LED))) || (MAC80211_LEDS && (NET && (WIRELESS && MAC80211)))) || (LEDS_SUNFIRE && (NEW_LEDS && (LEDS_CLASS && SPARC64)))))
NEW_LEDS || ((INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP))))) => LEDS_TRIGGERS)
NEW_LEDS || ((ADB_PMU_LED_IDE && (MACINTOSH_DRIVERS && ADB_PMU_LED)) => LEDS_TRIGGERS)
NEW_LEDS || ((MAC80211_LEDS && (NET && (WIRELESS && MAC80211))) => LEDS_TRIGGERS)
NEW_LEDS || ((LEDS_SUNFIRE && (NEW_LEDS && (LEDS_CLASS && SPARC64))) => LEDS_TRIGGERS)
(ACCESSIBILITY && (VT && SERIAL_CORE_CONSOLE)) || ~A11Y_BRAILLE_CONSOLE
INFINIBAND || ~INFINIBAND_USER_MAD
INFINIBAND_USER_MEM => (INFINIBAND && INFINIBAND_USER_ACCESS)
(INFINIBAND && INFINIBAND_USER_ACCESS) => INFINIBAND_USER_MEM
INFINIBAND || ~INFINIBAND_USER_ACCESS
INFINIBAND_ADDR_TRANS => (INFINIBAND && INET)
(INFINIBAND && (INFINIBAND_MTHCA && EMBEDDED)) || (INFINIBAND_MTHCA_DEBUG => (INFINIBAND && INFINIBAND_MTHCA))
(INFINIBAND && (INFINIBAND_MTHCA && EMBEDDED)) || ((INFINIBAND && INFINIBAND_MTHCA) => INFINIBAND_MTHCA_DEBUG)
(INFINIBAND && PCI) || ~INFINIBAND_MTHCA
(INFINIBAND && (c64BIT && NET)) || ~INFINIBAND_IPATH
(INFINIBAND && IBMEBUS) || ~INFINIBAND_EHCA
(INFINIBAND && INFINIBAND_AMSO1100) || ~INFINIBAND_AMSO1100_DEBUG
(INFINIBAND && (PCI && INET)) || ~INFINIBAND_AMSO1100
(INFINIBAND && INFINIBAND_CXGB3) || ~INFINIBAND_CXGB3_DEBUG
(INFINIBAND && (CHELSIO_T3 && INET)) || ~INFINIBAND_CXGB3
INFINIBAND || ~MLX4_INFINIBAND
(INFINIBAND && INFINIBAND_NES) || ~INFINIBAND_NES_DEBUG
(PCI && (INET && INFINIBAND)) || ~INFINIBAND_NES
(INFINIBAND && INFINIBAND_IPOIB) || ~INFINIBAND_IPOIB_CM
(INFINIBAND && INFINIBAND_IPOIB_DEBUG) || ~INFINIBAND_IPOIB_DEBUG_DATA
(INFINIBAND && (INFINIBAND_IPOIB && EMBEDDED)) || (INFINIBAND_IPOIB_DEBUG => (INFINIBAND && INFINIBAND_IPOIB))
(INFINIBAND && (INFINIBAND_IPOIB && EMBEDDED)) || ((INFINIBAND && INFINIBAND_IPOIB) => INFINIBAND_IPOIB_DEBUG)
(INFINIBAND && (NETDEVICES && (INET && (IPV6 || ~IPV6)))) || ~INFINIBAND_IPOIB
(INFINIBAND && SCSI) || ~INFINIBAND_SRP
(INFINIBAND && (SCSI && (INET && INFINIBAND_ADDR_TRANS))) || ~INFINIBAND_ISER
((PCI || BROKEN) && HAS_IOMEM) || ~INFINIBAND
(EDAC && EDAC_DEBUG) || ~EDAC_DEBUG_VERBOSE
EDAC || ~EDAC_DEBUG
(EDAC && (CPU_SUP_AMD && X86_MCE)) || (EDAC_DECODE_MCE => (EDAC && (CPU_SUP_AMD && X86_MCE)))
(EDAC && (CPU_SUP_AMD && X86_MCE)) || ((EDAC && (CPU_SUP_AMD && X86_MCE)) => EDAC_DECODE_MCE)
(EDAC && EDAC_AMD64) || ~EDAC_AMD64_ERROR_INJECTION
(EDAC && (EDAC_MM_EDAC && (K8_NB && (X86_64 && (PCI && EDAC_DECODE_MCE))))) || ~EDAC_AMD64
(EDAC && (EDAC_MM_EDAC && (PCI && X86_32))) || ~EDAC_AMD76X
(EDAC && (EDAC_MM_EDAC && (PCI && X86_32))) || ~EDAC_E7XXX
(EDAC && (EDAC_MM_EDAC && (PCI && (X86 && HOTPLUG)))) || ~EDAC_E752X
(EDAC && (EDAC_MM_EDAC && (PCI && (X86_32 && BROKEN)))) || ~EDAC_I82443BXGX
(EDAC && (EDAC_MM_EDAC && (PCI && X86_32))) || ~EDAC_I82875P
(EDAC && (EDAC_MM_EDAC && (PCI && X86))) || ~EDAC_I82975X
(EDAC && (EDAC_MM_EDAC && (PCI && X86))) || ~EDAC_I3000
(EDAC && (EDAC_MM_EDAC && (PCI && (X86 && EXPERIMENTAL)))) || ~EDAC_I3200
(EDAC && (EDAC_MM_EDAC && (PCI && X86))) || ~EDAC_X38
(EDAC && (EDAC_MM_EDAC && (PCI && X86))) || ~EDAC_I5400
(EDAC && (EDAC_MM_EDAC && (PCI && X86_32))) || ~EDAC_I82860
(EDAC && (EDAC_MM_EDAC && (PCI && X86_32))) || ~EDAC_R82600
(EDAC && (EDAC_MM_EDAC && (X86 && PCI))) || ~EDAC_I5000
(EDAC && (EDAC_MM_EDAC && (X86 && PCI))) || ~EDAC_I5100
(EDAC && (EDAC_MM_EDAC && (FSL_SOC && (PPC_83xx || MPC85xx)))) || ~EDAC_MPC85XX
(EDAC && (EDAC_MM_EDAC && MV64X60)) || ~EDAC_MV64X60
(EDAC && (EDAC_MM_EDAC && (PCI && PPC_PASEMI))) || ~EDAC_PASEMI
(EDAC && (EDAC_MM_EDAC && PPC_CELL_COMMON)) || ~EDAC_CELL
(EDAC && (EDAC_MM_EDAC && c4xx)) || ~EDAC_PPC4XX
(EDAC && (EDAC_MM_EDAC && (PCI && PPC_MAPLE))) || ~EDAC_AMD8131
(EDAC && (EDAC_MM_EDAC && (PCI && PPC_MAPLE))) || ~EDAC_AMD8111
(EDAC && (EDAC_MM_EDAC && PPC64)) || ~EDAC_CPC925
EDAC || ~EDAC_MM_EDAC
(HAS_IOMEM && (X86 || PPC)) || ~EDAC
RTC_LIB => (RTC_CLASS && ~S390)
(RTC_CLASS && ~S390) => RTC_LIB
(RTC_CLASS && RTC_HCTOSYS) || ~RTC_HCTOSYS_DEVICE
RTC_CLASS || (RTC_HCTOSYS => RTC_CLASS)
RTC_CLASS || ~RTC_DEBUG
(RTC_CLASS && SYSFS) || (RTC_INTF_SYSFS => ((RTC_CLASS && SYSFS) && RTC_CLASS))
(RTC_CLASS && SYSFS) || (((RTC_CLASS && SYSFS) && RTC_CLASS) => RTC_INTF_SYSFS)
(RTC_CLASS && PROC_FS) || (RTC_INTF_PROC => ((RTC_CLASS && PROC_FS) && RTC_CLASS))
(RTC_CLASS && PROC_FS) || (((RTC_CLASS && PROC_FS) && RTC_CLASS) => RTC_INTF_PROC)
(RTC_CLASS && RTC_INTF_DEV) || ~RTC_INTF_DEV_UIE_EMUL
RTC_CLASS || (RTC_INTF_DEV => (RTC_CLASS && RTC_CLASS))
RTC_CLASS || ((RTC_CLASS && RTC_CLASS) => RTC_INTF_DEV)
RTC_CLASS || ~RTC_DRV_TEST
(RTC_CLASS && I2C) || ~RTC_DRV_DS1307
(RTC_CLASS && I2C) || ~RTC_DRV_DS1374
(RTC_CLASS && I2C) || ~RTC_DRV_DS1672
(RTC_CLASS && I2C) || ~RTC_DRV_MAX6900
(RTC_CLASS && I2C) || ~RTC_DRV_RS5C372
(RTC_CLASS && I2C) || ~RTC_DRV_ISL1208
(RTC_CLASS && I2C) || ~RTC_DRV_X1205
(RTC_CLASS && I2C) || ~RTC_DRV_PCF8563
(RTC_CLASS && I2C) || ~RTC_DRV_PCF8583
(RTC_CLASS && (I2C && RTC_DRV_M41T80)) || ~RTC_DRV_M41T80_WDT
(RTC_CLASS && I2C) || ~RTC_DRV_M41T80
(RTC_CLASS && (I2C && MFD_DM355EVM_MSP)) || ~RTC_DRV_DM355EVM
(RTC_CLASS && (I2C && MENELAUS)) || ~RTC_DRV_TWL92330
(I2C && (RTC_CLASS && TWL4030_CORE)) || ~RTC_DRV_TWL4030
(RTC_CLASS && I2C) || ~RTC_DRV_S35390A
(RTC_CLASS && I2C) || ~RTC_DRV_FM3130
(RTC_CLASS && I2C) || ~RTC_DRV_RX8581
(RTC_CLASS && I2C) || ~RTC_DRV_RX8025
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_M41T94
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_DS1305
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_DS1390
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_MAX6902
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_R9701
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_RS5C348
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_DS3234
(RTC_CLASS && SPI_MASTER) || ~RTC_DRV_PCF2123
(RTC_CLASS && (X86 || (ALPHA || (ARM || (M32R || (ATARI || (PPC || (MIPS || SPARC64)))))))) || (RTC_DRV_CMOS => (RTC_CLASS && ((X86 || (ALPHA || (ARM || (M32R || (ATARI || (PPC || (MIPS || SPARC64))))))) && X86)))
(RTC_CLASS && (X86 || (ALPHA || (ARM || (M32R || (ATARI || (PPC || (MIPS || SPARC64)))))))) || ((RTC_CLASS && ((X86 || (ALPHA || (ARM || (M32R || (ATARI || (PPC || (MIPS || SPARC64))))))) && X86)) => RTC_DRV_CMOS)
(RTC_CLASS && SNI_RM) || ~RTC_DRV_DS1216
RTC_CLASS || ~RTC_DRV_DS1286
(RTC_CLASS && SH_SECUREEDGE5410) || ~RTC_DRV_DS1302
RTC_CLASS || ~RTC_DRV_DS1511
RTC_CLASS || ~RTC_DRV_DS1553
RTC_CLASS || ~RTC_DRV_DS1742
(RTC_CLASS && IA64) || ~RTC_DRV_EFI
RTC_CLASS || ~RTC_DRV_STK17TA8
RTC_CLASS || ~RTC_DRV_M48T86
RTC_CLASS || ~RTC_DRV_M48T35
RTC_CLASS || ~RTC_DRV_M48T59
(ARCH_MXC && RTC_CLASS) || ~RTC_MXC
RTC_CLASS || ~RTC_DRV_BQ4802
RTC_CLASS || ~RTC_DRV_V3020
(RTC_CLASS && MFD_WM831X) || ~RTC_DRV_WM831X
(RTC_CLASS && MFD_WM8350) || ~RTC_DRV_WM8350
(RTC_CLASS && MFD_PCF50633) || ~RTC_DRV_PCF50633
(RTC_CLASS && AB3100_CORE) || (RTC_DRV_AB3100 => (RTC_CLASS && AB3100_CORE))
(RTC_CLASS && AB3100_CORE) || ((RTC_CLASS && AB3100_CORE) => RTC_DRV_AB3100)
(RTC_CLASS && (ARCH_OMAP15XX || (ARCH_OMAP16XX || ARCH_OMAP730))) || ~RTC_DRV_OMAP
(RTC_CLASS && ARCH_S3C2410) || ~RTC_DRV_S3C
(RTC_CLASS && ARCH_EP93XX) || ~RTC_DRV_EP93XX
(RTC_CLASS && (ARCH_SA1100 || ARCH_PXA)) || ~RTC_DRV_SA1100
(RTC_CLASS && (SUPERH && HAVE_CLK)) || ~RTC_DRV_SH
(RTC_CLASS && CPU_VR41XX) || ~RTC_DRV_VR41XX
(RTC_CLASS && ARM_AMBA) || ~RTC_DRV_PL030
(RTC_CLASS && ARM_AMBA) || ~RTC_DRV_PL031
(RTC_CLASS && PLATFORM_AT32AP) || ~RTC_DRV_AT32AP700X
(RTC_CLASS && (ARCH_AT91RM9200 || ARCH_AT91SAM9RL)) || ~RTC_DRV_AT91RM9200
(RTC_CLASS && (RTC_DRV_AT91SAM9 && ARCH_AT91SAM9263)) || ~RTC_DRV_AT91SAM9_RTT
(RTC_CLASS && RTC_DRV_AT91SAM9) || ~RTC_DRV_AT91SAM9_GPBR
(RTC_CLASS && (ARCH_AT91 && (~ARCH_AT91RM9200 && ~ARCH_AT91X40))) || ~RTC_DRV_AT91SAM9
(RTC_CLASS && SOC_AU1X00) || ~RTC_DRV_AU1XXX
(RTC_CLASS && (BLACKFIN && ~BF561)) || ~RTC_DRV_BFIN
(RTC_CLASS && SH_LANDISK) || ~RTC_DRV_RS5C313
(RTC_CLASS && (PARISC || (M68K || (PPC || SUPERH32)))) || ~RTC_DRV_GENERIC
(RTC_CLASS && ARCH_PXA) || ~RTC_DRV_PXA
(RTC_CLASS && SPARC64) || ~RTC_DRV_SUN4V
(RTC_CLASS && SPARC64) || ~RTC_DRV_STARFIRE
(RTC_CLASS && SOC_TX4939) || ~RTC_DRV_TX4939
(RTC_CLASS && ARCH_KIRKWOOD) || ~RTC_DRV_MV
(RTC_CLASS && PPC_PS3) || ~RTC_DRV_PS3
(RTC_CLASS && ARCH_U300) || ~RTC_DRV_COH901331
(RTC_CLASS && ARCH_STMP3XXX) || ~RTC_DRV_STMP
(RTC_CLASS && EZX_PCAP) || ~RTC_DRV_PCAP
~S390 || ~RTC_CLASS
ASYNC_TX_DISABLE_CHANNEL_SWITCH => (INTEL_IOATDMA && (DMADEVICES && (PCI && X86)))
(INTEL_IOATDMA && (DMADEVICES && (PCI && X86))) => ASYNC_TX_DISABLE_CHANNEL_SWITCH
(DMADEVICES && (PCI && X86)) || ~INTEL_IOATDMA
(DMADEVICES && (ARCH_IOP32X || (ARCH_IOP33X || ARCH_IOP13XX))) || ~INTEL_IOP_ADMA
(DMADEVICES && AVR32) || (DW_DMAC => (DMADEVICES && (AVR32 && CPU_AT32AP7000)))
(DMADEVICES && AVR32) || ((DMADEVICES && (AVR32 && CPU_AT32AP7000)) => DW_DMAC)
(DMADEVICES && ARCH_AT91SAM9RL) || ~AT_HDMAC
(DMADEVICES && FSL_SOC) || ~FSL_DMA
(DMADEVICES && PLAT_ORION) || ~MV_XOR
(DMADEVICES && MX3_IPU) || ~MX3_IPU_IRQS
(DMADEVICES && ARCH_MX3) || (MX3_IPU => (DMADEVICES && ARCH_MX3))
(DMADEVICES && ARCH_MX3) || ((DMADEVICES && ARCH_MX3) => MX3_IPU)
(DMADEVICES && (MACH_TX49XX || MACH_TX39XX)) || ~TXX9_DMAC
(DMADEVICES && (SUPERH && (SH_DMA && ~SH_DMA_API))) || ~SH_DMAE
DMA_ENGINE => (((((((((MX3_IPU && (DMADEVICES && ARCH_MX3)) || (DW_DMAC && (DMADEVICES && AVR32))) || (MV_XOR && (DMADEVICES && PLAT_ORION))) || (FSL_DMA && (DMADEVICES && FSL_SOC))) || (SH_DMAE && (DMADEVICES && (SUPERH && (SH_DMA && ~SH_DMA_API))))) || (INTEL_IOP_ADMA && (DMADEVICES && (ARCH_IOP32X || (ARCH_IOP33X || ARCH_IOP13XX))))) || (AT_HDMAC && (DMADEVICES && ARCH_AT91SAM9RL))) || (TXX9_DMAC && (DMADEVICES && (MACH_TX49XX || MACH_TX39XX)))) || (INTEL_IOATDMA && (DMADEVICES && (PCI && X86))))
(MX3_IPU && (DMADEVICES && ARCH_MX3)) => DMA_ENGINE
(DW_DMAC && (DMADEVICES && AVR32)) => DMA_ENGINE
(MV_XOR && (DMADEVICES && PLAT_ORION)) => DMA_ENGINE
(FSL_DMA && (DMADEVICES && FSL_SOC)) => DMA_ENGINE
(SH_DMAE && (DMADEVICES && (SUPERH && (SH_DMA && ~SH_DMA_API)))) => DMA_ENGINE
(INTEL_IOP_ADMA && (DMADEVICES && (ARCH_IOP32X || (ARCH_IOP33X || ARCH_IOP13XX)))) => DMA_ENGINE
(AT_HDMAC && (DMADEVICES && ARCH_AT91SAM9RL)) => DMA_ENGINE
(TXX9_DMAC && (DMADEVICES && (MACH_TX49XX || MACH_TX39XX))) => DMA_ENGINE
(INTEL_IOATDMA && (DMADEVICES && (PCI && X86))) => DMA_ENGINE
(DMADEVICES && (DMA_ENGINE && NET)) || (NET_DMA => ((DMADEVICES && (DMA_ENGINE && NET)) && (INTEL_IOATDMA || FSL_DMA)))
(DMADEVICES && (DMA_ENGINE && NET)) || (((DMADEVICES && (DMA_ENGINE && NET)) && (INTEL_IOATDMA || FSL_DMA)) => NET_DMA)
(DMADEVICES && DMA_ENGINE) || ~ASYNC_TX_DMA
(DMADEVICES && DMA_ENGINE) || ~DMATEST
HAS_DMA || ~DMADEVICES
DCA => (INTEL_IOATDMA && (DMADEVICES && (PCI && X86)))
(INTEL_IOATDMA && (DMADEVICES && (PCI && X86))) => DCA
(AUXDISPLAY && KS0108) || ~KS0108_PORT
(AUXDISPLAY && KS0108) || ~KS0108_DELAY
(AUXDISPLAY && CFAG12864B) || ~CFAG12864B_RATE
(AUXDISPLAY && (X86 && (FB && KS0108))) || ~CFAG12864B
(AUXDISPLAY && PARPORT_PC) || ~KS0108
(UIO && PCI) || ~UIO_CIF
UIO || ~UIO_PDRV
UIO || ~UIO_PDRV_GENIRQ
UIO || ~UIO_SMX
(UIO && PCI) || ~UIO_AEC
UIO || ~UIO_SERCOS3
(UIO && PCI) || ~UIO_PCI_GENERIC
~S390 || (UIO => (CNIC && (NETDEVICES && (NETDEV_1000 && PCI))))
~S390 || ((CNIC && (NETDEVICES && (NETDEV_1000 && PCI))) => UIO)
(VLYNQ && DEBUG_KERNEL) || ~VLYNQ_DEBUG
(AR7 && EXPERIMENTAL) || ~VLYNQ
XEN_BALLOON || (XEN_SCRUB_PAGES => XEN_BALLOON)
XEN_BALLOON || (XEN_BALLOON => XEN_SCRUB_PAGES)
XEN || (XEN_BALLOON => XEN)
XEN || (XEN => XEN_BALLOON)
XEN || (XEN_DEV_EVTCHN => XEN)
XEN || (XEN => XEN_DEV_EVTCHN)
XENFS || (XEN_COMPAT_XENFS => XENFS)
XENFS || (XENFS => XEN_COMPAT_XENFS)
XEN || (XENFS => XEN)
XEN || (XEN => XENFS)
(XEN && SYSFS) || (XEN_SYS_HYPERVISOR => (XEN && SYSFS))
(XEN && SYSFS) || ((XEN && SYSFS) => XEN_SYS_HYPERVISOR)
(STAGING && (~STAGING_EXCLUDE_BUILD && ET131X)) || ~ET131X_DEBUG
(STAGING && (~STAGING_EXCLUDE_BUILD && (NETDEV_1000 && PCI))) || ~ET131X
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (X86 && NETDEV_1000)))) || ~SLICOSS
(STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_GO7007_USB && DVB_USB))) || ~VIDEO_GO7007_USB_S2250_BOARD
(STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_GO7007 && USB))) || ~VIDEO_GO7007_USB
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_OV7640
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_SAA7113
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_SAA7115
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_TW9903
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_UDA1342
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_SONY_TUNER
(STAGING && (~STAGING_EXCLUDE_BUILD && VIDEO_GO7007)) || ~VIDEO_GO7007_TW2804
(STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_DEV && (PCI && (I2C && (INPUT && SND)))))) || ~VIDEO_GO7007
(STAGING && (~STAGING_EXCLUDE_BUILD && (VIDEO_CX25821 && (SND && EXPERIMENTAL)))) || ~VIDEO_CX25821_ALSA
(STAGING && (~STAGING_EXCLUDE_BUILD && (DVB_CORE && (VIDEO_DEV && (PCI && (I2C && INPUT)))))) || ~VIDEO_CX25821
(STAGING && (~STAGING_EXCLUDE_BUILD && USB_IP_COMMON)) || ~USB_IP_VHCI_HCD
(STAGING && (~STAGING_EXCLUDE_BUILD && USB_IP_COMMON)) || ~USB_IP_HOST
(STAGING && (~STAGING_EXCLUDE_BUILD && (USB && (NET && EXPERIMENTAL)))) || ~USB_IP_COMMON
(STAGING && (~STAGING_EXCLUDE_BUILD && (MAC80211 && (WLAN && (USB && EXPERIMENTAL))))) || ~W35UND
(STAGING && (~STAGING_EXCLUDE_BUILD && (WLAN && (USB && WIRELESS_EXT)))) || ~PRISM2_USB
(STAGING && ~STAGING_EXCLUDE_BUILD) || ~ECHO
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && UIO))) || ~POCH
(STAGING && (~STAGING_EXCLUDE_BUILD && (USB && (WLAN && MAC80211)))) || ~OTUS
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (X86 && WLAN)))) || ~RT2860
(STAGING && (~STAGING_EXCLUDE_BUILD && (USB && (X86 && WLAN)))) || ~RT2870
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (X86 && WLAN)))) || ~RT3090
(STAGING && (~STAGING_EXCLUDE_BUILD && COMEDI)) || ~COMEDI_DEBUG
(STAGING && (~STAGING_EXCLUDE_BUILD && (COMEDI && PCI))) || ~COMEDI_PCI_DRIVERS
(STAGING && (~STAGING_EXCLUDE_BUILD && (COMEDI && (PCMCIA && PCCARD)))) || ~COMEDI_PCMCIA_DRIVERS
(STAGING && (~STAGING_EXCLUDE_BUILD && (COMEDI && USB))) || ~COMEDI_USB_DRIVERS
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI || (PCMCIA || (PCCARD || USB))))) || ~COMEDI
(STAGING && (~STAGING_EXCLUDE_BUILD && USB)) || ~ASUS_OLED
(STAGING && (~STAGING_EXCLUDE_BUILD && PANEL)) || ~PANEL_PARPORT
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && PANEL_PROFILE))) || ~PANEL_KEYPAD
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_HEIGHT
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_WIDTH
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_BWIDTH
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_HWIDTH
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_CHARSET
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && (PANEL_LCD && PANEL_LCD_PROTO))))) || ~PANEL_LCD_PIN_E
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && (PANEL_LCD && PANEL_LCD_PROTO))))) || ~PANEL_LCD_PIN_RS
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && (PANEL_LCD && PANEL_LCD_PROTO))))) || ~PANEL_LCD_PIN_RW
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && (PANEL_LCD && ~PANEL_LCD_PROTO))))) || ~PANEL_LCD_PIN_SCL
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && (PANEL_LCD && ~PANEL_LCD_PROTO))))) || ~PANEL_LCD_PIN_SDA
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_PROTO
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && (PANEL_PROFILE && PANEL_LCD)))) || ~PANEL_LCD_PIN_BL
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && PANEL_PROFILE))) || ~PANEL_LCD
(STAGING && (~STAGING_EXCLUDE_BUILD && PANEL)) || ~PANEL_PROFILE
(STAGING && (~STAGING_EXCLUDE_BUILD && (PANEL && PANEL_CHANGE_MESSAGE))) || ~PANEL_BOOT_MESSAGE
(STAGING && (~STAGING_EXCLUDE_BUILD && PANEL)) || ~PANEL_CHANGE_MESSAGE
(STAGING && (~STAGING_EXCLUDE_BUILD && PARPORT)) || ~PANEL
(STAGING && (~STAGING_EXCLUDE_BUILD && PCI)) || ~ALTERA_PCIE_CHDMA
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (WLAN && WIRELESS_EXT)))) || ~RTL8187SE
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (WLAN && WIRELESS_EXT)))) || ~RTL8192SU
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (WLAN && WIRELESS_EXT)))) || ~RTL8192E
(STAGING && (~STAGING_EXCLUDE_BUILD && (USB && INPUT))) || ~INPUT_MIMIO
(STAGING && (~STAGING_EXCLUDE_BUILD && USB)) || ~TRANZPORT
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || ~ANDROID_BINDER_IPC
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || ~ANDROID_LOGGER
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE))) || (ANDROID_RAM_CONSOLE_ENABLE_VERBOSE => (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE))))
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE))) || ((STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE))) => ANDROID_RAM_CONSOLE_ENABLE_VERBOSE)
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION))) || ~ANDROID_RAM_CONSOLE_ERROR_CORRECTION_DATA_SIZE
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION))) || ~ANDROID_RAM_CONSOLE_ERROR_CORRECTION_ECC_SIZE
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION))) || ~ANDROID_RAM_CONSOLE_ERROR_CORRECTION_SYMBOL_SIZE
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_ERROR_CORRECTION))) || ~ANDROID_RAM_CONSOLE_ERROR_CORRECTION_POLYNOMIAL
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT)))) || ~ANDROID_RAM_CONSOLE_ERROR_CORRECTION
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT))) || ~ANDROID_RAM_CONSOLE_EARLY_ADDR
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE_EARLY_INIT))) || ~ANDROID_RAM_CONSOLE_EARLY_SIZE
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && ANDROID_RAM_CONSOLE))) || ~ANDROID_RAM_CONSOLE_EARLY_INIT
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || ~ANDROID_RAM_CONSOLE
(STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (GENERIC_GPIO && ANDROID_TIMED_OUTPUT)))) || ~ANDROID_TIMED_GPIO
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || (ANDROID_TIMED_OUTPUT => (STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)))
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || ((STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) => ANDROID_TIMED_OUTPUT)
(STAGING && (~STAGING_EXCLUDE_BUILD && ANDROID)) || ~ANDROID_LOW_MEMORY_KILLER
(STAGING && (~STAGING_EXCLUDE_BUILD && BROKEN)) || ~ANDROID
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER)) || (MSM_RPCSERVERS => (STAGING && (~STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER)))
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER)) || ((STAGING && (~STAGING_EXCLUDE_BUILD && MSM_ONCRPCROUTER)) => MSM_RPCSERVERS)
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_SMD)) || (MSM_ONCRPCROUTER => (STAGING && (~STAGING_EXCLUDE_BUILD && MSM_SMD)))
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_SMD)) || ((STAGING && (~STAGING_EXCLUDE_BUILD && MSM_SMD)) => MSM_ONCRPCROUTER)
(STAGING && (~STAGING_EXCLUDE_BUILD && ARCH_MSM)) || (MSM_SMD => (STAGING && (~STAGING_EXCLUDE_BUILD && ARCH_MSM)))
(STAGING && (~STAGING_EXCLUDE_BUILD && ARCH_MSM)) || ((STAGING && (~STAGING_EXCLUDE_BUILD && ARCH_MSM)) => MSM_SMD)
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~MSM_CAMERA_DEBUG
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~MSM_CAMERA_FLASH
(STAGING && (~STAGING_EXCLUDE_BUILD && (ARCH_MSM && VIDEO_V4L2_COMMON))) || ~MSM_CAMERA
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~MT9T013
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~MT9D112
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~MT9P012
(STAGING && (~STAGING_EXCLUDE_BUILD && MSM_CAMERA)) || ~S5K3E2FX
(STAGING && ~STAGING_EXCLUDE_BUILD) || ~INPUT_GPIO
(STAGING && (~STAGING_EXCLUDE_BUILD && DST)) || ~DST_DEBUG
(STAGING && (~STAGING_EXCLUDE_BUILD && (NET && (CRYPTO && (SYSFS && BLK_DEV))))) || ~DST
(STAGING && (~STAGING_EXCLUDE_BUILD && POHMELFS)) || ~POHMELFS_DEBUG
(STAGING && (~STAGING_EXCLUDE_BUILD && POHMELFS)) || ~POHMELFS_CRYPTO
(STAGING && (~STAGING_EXCLUDE_BUILD && NET)) || ~POHMELFS
(STAGING && (~STAGING_EXCLUDE_BUILD && PCI)) || ~B3DFG
(STAGING && (~STAGING_EXCLUDE_BUILD && (PCI && (ATA && ATA_SFF)))) || ~IDE_PHISON
(STAGING && (~STAGING_EXCLUDE_BUILD && CRYPTO)) || ~PLAN9AUTH
(STAGING && (~STAGING_EXCLUDE_BUILD && (USB && SND))) || ~LINE6_USB
(STAGING && (~STAGING_EXCLUDE_BUILD && DRM_RADEON)) || ~DRM_RADEON_KMS
(STAGING && (~STAGING_EXCLUDE_BUILD && CPU_CAVIUM_OCTEON)) || ~OCTEON_ETHERNET
(STAGING && (~STAGING_EXCLUDE_BUILD && USB_SERIAL)) || ~USB_SERIAL_QUATECH2
(STAGING && (~STAGING_EXCLUDE_BUILD && USB_SERIAL)) || ~USB_SERIAL_QUATECH_USB2
(STAGING && (~STAGING_EXCLUDE_BUILD && (WIRELESS_EXT && PCI))) || ~VT6655
(STAGING && (~STAGING_EXCLUDE_BUILD && (WIRELESS_EXT && USB))) || ~VT6656
(STAGING && (~STAGING_EXCLUDE_BUILD && (FB && USB))) || ~FB_UDL
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && SCSI))) || (HYPERV_STORAGE => ((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && SCSI))) && HYPERV))
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && SCSI))) || (((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && SCSI))) && HYPERV) => HYPERV_STORAGE)
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && (BLOCK && SCSI)))) || (HYPERV_BLOCK => ((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && (BLOCK && SCSI)))) && HYPERV))
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && (BLOCK && SCSI)))) || (((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && (BLOCK && SCSI)))) && HYPERV) => HYPERV_BLOCK)
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && NET))) || (HYPERV_NET => ((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && NET))) && HYPERV))
(STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && NET))) || (((STAGING && (~STAGING_EXCLUDE_BUILD && (HYPERV && NET))) && HYPERV) => HYPERV_NET)
(STAGING && (~STAGING_EXCLUDE_BUILD && X86)) || ~HYPERV
(STAGING && (~STAGING_EXCLUDE_BUILD && VME_BUS)) || ~VME_CA91CX42
(STAGING && (~STAGING_EXCLUDE_BUILD && VME_BUS)) || ~VME_TSI148
(STAGING && (~STAGING_EXCLUDE_BUILD && VME_BUS)) || ~VME_USER
(STAGING && (~STAGING_EXCLUDE_BUILD && PCI)) || ~VME_BUS
(STAGING && ~STAGING_EXCLUDE_BUILD) || ~RAR_REGISTER
(STAGING && (~STAGING_EXCLUDE_BUILD && (RAR_REGISTER && PCI))) || (DX_SEP => (STAGING && (~STAGING_EXCLUDE_BUILD && (RAR_REGISTER && PCI))))
(STAGING && (~STAGING_EXCLUDE_BUILD && (RAR_REGISTER && PCI))) || ((STAGING && (~STAGING_EXCLUDE_BUILD && (RAR_REGISTER && PCI))) => DX_SEP)
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && IIO_RING_BUFFER))) || ~IIO_SW_RING
(STAGING && (~STAGING_EXCLUDE_BUILD && IIO)) || ~IIO_RING_BUFFER
(STAGING && (~STAGING_EXCLUDE_BUILD && IIO)) || ~IIO_TRIGGER
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && SPI))) || ~KXSD9
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && SPI))) || ~LIS3L02DQ
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && (IIO_RING_BUFFER && SPI)))) || ~SCA3000
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && I2C))) || ~MAX1363
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && I2C))) || ~TSL2561
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && (IIO_TRIGGER && RTC_CLASS)))) || ~IIO_PERIODIC_RTC_TRIGGER
(STAGING && (~STAGING_EXCLUDE_BUILD && (IIO && (IIO_TRIGGER && GENERIC_GPIO)))) || ~IIO_GPIO_TRIGGER
(STAGING && (~STAGING_EXCLUDE_BUILD && ~S390)) || ~IIO
STAGING || (STAGING_EXCLUDE_BUILD => STAGING)
STAGING || (STAGING => STAGING_EXCLUDE_BUILD)
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (LEDS_CLASS && (NEW_LEDS && (BACKLIGHT_CLASS_DEVICE && (SERIO_I8042 && (RFKILL || ~RFKILL)))))))) || ~ACER_WMI
(X86 && (X86_PLATFORM_DEVICES && (THERMAL && (THERMAL_HWMON && ACPI)))) || ~ACERHDF
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (~ACPI_ASUS && INPUT)))) || ~ASUS_LAPTOP
(MISC_DEVICES && (X86 && (DCDBAS && (EXPERIMENTAL && (BACKLIGHT_CLASS_DEVICE && (RFKILL && POWER_SUPPLY)))))) || ~DELL_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && (ACPI_WMI && INPUT))) || ~DELL_WMI
(X86 && (X86_PLATFORM_DEVICES && FUJITSU_LAPTOP)) || ~FUJITSU_LAPTOP_DEBUG
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (BACKLIGHT_CLASS_DEVICE && (LEDS_CLASS || ~LEDS_CLASS)))))) || ~FUJITSU_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && (~X86_64 && (EXPERIMENTAL && ACPI)))) || ~TC1100_WMI
(X86 && (X86_PLATFORM_DEVICES && (ACPI_WMI && (INPUT && (RFKILL || ~RFKILL))))) || ~HP_WMI
(X86 && (X86_PLATFORM_DEVICES && (ACPI && BACKLIGHT_CLASS_DEVICE))) || ~MSI_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && (INPUT && (ACPI && BACKLIGHT_CLASS_DEVICE)))) || ~PANASONIC_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && (ACPI && BACKLIGHT_CLASS_DEVICE))) || ~COMPAL_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && SONY_LAPTOP)) || ~SONYPI_COMPAT
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && RFKILL)))) || ~SONY_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || ~THINKPAD_ACPI_DEBUGFACILITIES
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || ~THINKPAD_ACPI_DEBUG
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || ~THINKPAD_ACPI_UNSAFE_LEDS
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || (THINKPAD_ACPI_VIDEO => (X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)))
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || ((X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) => THINKPAD_ACPI_VIDEO)
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || (THINKPAD_ACPI_HOTKEY_POLL => (X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)))
(X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) || ((X86 && (X86_PLATFORM_DEVICES && THINKPAD_ACPI)) => THINKPAD_ACPI_HOTKEY_POLL)
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))) || ~THINKPAD_ACPI
(X86 && (X86_PLATFORM_DEVICES && ACPI_THERMAL)) || ~INTEL_MENLOW
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (EXPERIMENTAL && ((RFKILL || ~RFKILL) && HOTPLUG_PCI)))))) || ~EEEPC_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && ACPI)) || (ACPI_WMI => ((TC1100_WMI && (X86 && (X86_PLATFORM_DEVICES && (~X86_64 && (EXPERIMENTAL && ACPI))))) || (ACER_WMI && (X86 && (X86_PLATFORM_DEVICES && (ACPI && (LEDS_CLASS && (NEW_LEDS && (BACKLIGHT_CLASS_DEVICE && (SERIO_I8042 && (RFKILL || ~RFKILL)))))))))))
(X86 && (X86_PLATFORM_DEVICES && ACPI)) || ((TC1100_WMI && (X86 && (X86_PLATFORM_DEVICES && (~X86_64 && (EXPERIMENTAL && ACPI))))) => ACPI_WMI)
(X86 && (X86_PLATFORM_DEVICES && ACPI)) || ~ACPI_ASUS
(X86 && (X86_PLATFORM_DEVICES && (ACPI && INPUT))) || ~TOPSTAR_LAPTOP
(X86 && (X86_PLATFORM_DEVICES && (ACPI && (INPUT && (RFKILL || ~RFKILL))))) || ~ACPI_TOSHIBA
X86 || (X86_PLATFORM_DEVICES => X86)
X86 || (X86 => X86_PLATFORM_DEVICES)
EDD || ~EDD_OFF
~IA64 || ~EDD
EMBEDDED || (FIRMWARE_MEMMAP => (X86_64 || X86_32))
EMBEDDED || ((X86_64 || X86_32) => FIRMWARE_MEMMAP)
EFI || ~EFI_VARS
(ACPI && (EFI && IA64)) || (EFI_PCDP => (ACPI && (EFI && IA64)))
(ACPI && (EFI && IA64)) || ((ACPI && (EFI && IA64)) => EFI_PCDP)
X86 || ~DELL_RBU
X86 || ~DCDBAS
DMI || (DMIID => DMI)
DMI || (DMI => DMIID)
ISCSI_IBFT_FIND || ~ISCSI_IBFT
X86 || ~ISCSI_IBFT_FIND
(BLOCK && EXT2_FS_XATTR) || ~EXT2_FS_POSIX_ACL
(BLOCK && EXT2_FS_XATTR) || ~EXT2_FS_SECURITY
(BLOCK && EXT2_FS) || ~EXT2_FS_XATTR
(BLOCK && (EXT2_FS && MMU)) || ~EXT2_FS_XIP
BLOCK || ~EXT2_FS
(BLOCK && EXT3_FS) || ~EXT3_DEFAULTS_TO_ORDERED
(BLOCK && EXT3_FS_XATTR) || ~EXT3_FS_POSIX_ACL
(BLOCK && EXT3_FS_XATTR) || ~EXT3_FS_SECURITY
(BLOCK && EXT3_FS) || (EXT3_FS_XATTR => (BLOCK && EXT3_FS))
(BLOCK && EXT3_FS) || ((BLOCK && EXT3_FS) => EXT3_FS_XATTR)
BLOCK || ~EXT3_FS
(BLOCK && EXT4_FS_XATTR) || ~EXT4_FS_POSIX_ACL
(BLOCK && EXT4_FS_XATTR) || ~EXT4_FS_SECURITY
(BLOCK && EXT4_FS) || (EXT4_FS_XATTR => (BLOCK && EXT4_FS))
(BLOCK && EXT4_FS) || ((BLOCK && EXT4_FS) => EXT4_FS_XATTR)
(BLOCK && EXT4_FS) || ~EXT4_DEBUG
BLOCK || ~EXT4_FS
FS_XIP => (BLOCK && EXT2_FS_XIP)
(BLOCK && EXT2_FS_XIP) => FS_XIP
JBD => (EXT3_FS && BLOCK)
(EXT3_FS && BLOCK) => JBD
(BLOCK && (JBD && DEBUG_FS)) || ~JBD_DEBUG
JBD2 => ((EXT4_FS && BLOCK) || (OCFS2_FS && (BLOCK && (NET && SYSFS))))
(EXT4_FS && BLOCK) => JBD2
(OCFS2_FS && (BLOCK && (NET && SYSFS))) => JBD2
(BLOCK && (JBD2 && DEBUG_FS)) || ~JBD2_DEBUG
FS_MBCACHE => ((((BLOCK && (EXT2_FS && EXT2_FS_XATTR)) || (~BLOCK && (EXT2_FS && EXT2_FS_XATTR) && (BLOCK && (EXT3_FS && EXT3_FS_XATTR)))) || ((~BLOCK && (EXT3_FS && EXT3_FS_XATTR) && ~BLOCK && (EXT2_FS && EXT2_FS_XATTR)) && (BLOCK && (EXT4_FS && EXT4_FS_XATTR)))) || (((~BLOCK && (EXT4_FS && EXT4_FS_XATTR) && ~BLOCK && (EXT3_FS && EXT3_FS_XATTR)) && ~BLOCK && (EXT2_FS && EXT2_FS_XATTR)) && (BLOCK && (EXT2_FS_XATTR || (EXT3_FS_XATTR || EXT4_FS_XATTR)))))
(BLOCK && (EXT2_FS_XATTR || (EXT3_FS_XATTR || EXT4_FS_XATTR))) => FS_MBCACHE
(BLOCK && REISERFS_FS) || ~REISERFS_CHECK
(BLOCK && (REISERFS_FS && PROC_FS)) || ~REISERFS_PROC_INFO
(BLOCK && REISERFS_FS_XATTR) || ~REISERFS_FS_POSIX_ACL
(BLOCK && REISERFS_FS_XATTR) || ~REISERFS_FS_SECURITY
(BLOCK && REISERFS_FS) || ~REISERFS_FS_XATTR
BLOCK || ~REISERFS_FS
(BLOCK && JFS_FS) || ~JFS_POSIX_ACL
(BLOCK && JFS_FS) || ~JFS_SECURITY
(BLOCK && JFS_FS) || ~JFS_DEBUG
(BLOCK && JFS_FS) || ~JFS_STATISTICS
BLOCK || ~JFS_FS
FS_POSIX_ACL => (((((((((((((BTRFS_FS_POSIX_ACL && (BLOCK && BTRFS_FS)) || (NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL))))) || (GFS2_FS && (BLOCK && (EXPERIMENTAL && (c64BIT || LBDAF))))) || (EXT3_FS_POSIX_ACL && (BLOCK && EXT3_FS_XATTR))) || (NFS_ACL_SUPPORT && NETWORK_FILESYSTEMS)) || (JFFS2_FS_POSIX_ACL && (MISC_FILESYSTEMS && JFFS2_FS_XATTR))) || (EXT4_FS_POSIX_ACL && (BLOCK && EXT4_FS_XATTR))) || (REISERFS_FS_POSIX_ACL && (BLOCK && REISERFS_FS_XATTR))) || (OCFS2_FS_POSIX_ACL && (BLOCK && OCFS2_FS))) || (XFS_POSIX_ACL && (BLOCK && XFS_FS))) || (EXT2_FS_POSIX_ACL && (BLOCK && EXT2_FS_XATTR))) || (JFS_POSIX_ACL && (BLOCK && JFS_FS))) || GENERIC_ACL)
(BTRFS_FS_POSIX_ACL && (BLOCK && BTRFS_FS)) => FS_POSIX_ACL
(NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL)))) => FS_POSIX_ACL
(GFS2_FS && (BLOCK && (EXPERIMENTAL && (c64BIT || LBDAF)))) => FS_POSIX_ACL
(EXT3_FS_POSIX_ACL && (BLOCK && EXT3_FS_XATTR)) => FS_POSIX_ACL
(NFS_ACL_SUPPORT && NETWORK_FILESYSTEMS) => FS_POSIX_ACL
(JFFS2_FS_POSIX_ACL && (MISC_FILESYSTEMS && JFFS2_FS_XATTR)) => FS_POSIX_ACL
(EXT4_FS_POSIX_ACL && (BLOCK && EXT4_FS_XATTR)) => FS_POSIX_ACL
(REISERFS_FS_POSIX_ACL && (BLOCK && REISERFS_FS_XATTR)) => FS_POSIX_ACL
(OCFS2_FS_POSIX_ACL && (BLOCK && OCFS2_FS)) => FS_POSIX_ACL
(XFS_POSIX_ACL && (BLOCK && XFS_FS)) => FS_POSIX_ACL
(EXT2_FS_POSIX_ACL && (BLOCK && EXT2_FS_XATTR)) => FS_POSIX_ACL
(JFS_POSIX_ACL && (BLOCK && JFS_FS)) => FS_POSIX_ACL
GENERIC_ACL => FS_POSIX_ACL
(BLOCK && XFS_FS) || ~XFS_QUOTA
(BLOCK && XFS_FS) || ~XFS_POSIX_ACL
(BLOCK && XFS_FS) || ~XFS_RT
(BLOCK && (XFS_FS && EXPERIMENTAL)) || ~XFS_DEBUG
BLOCK || ~XFS_FS
(BLOCK && (GFS2_FS && (NET && (INET && ((IPV6 || ~IPV6) && HOTPLUG))))) || ~GFS2_FS_LOCKING_DLM
(BLOCK && (EXPERIMENTAL && (c64BIT || LBDAF))) || ~GFS2_FS
(BLOCK && OCFS2_FS) || (OCFS2_FS_O2CB => (BLOCK && OCFS2_FS))
(BLOCK && OCFS2_FS) || ((BLOCK && OCFS2_FS) => OCFS2_FS_O2CB)
(BLOCK && (OCFS2_FS && DLM)) || (OCFS2_FS_USERSPACE_CLUSTER => (BLOCK && (OCFS2_FS && DLM)))
(BLOCK && (OCFS2_FS && DLM)) || ((BLOCK && (OCFS2_FS && DLM)) => OCFS2_FS_USERSPACE_CLUSTER)
(BLOCK && OCFS2_FS) || (OCFS2_FS_STATS => (BLOCK && OCFS2_FS))
(BLOCK && OCFS2_FS) || ((BLOCK && OCFS2_FS) => OCFS2_FS_STATS)
(BLOCK && OCFS2_FS) || (OCFS2_DEBUG_MASKLOG => (BLOCK && OCFS2_FS))
(BLOCK && OCFS2_FS) || ((BLOCK && OCFS2_FS) => OCFS2_DEBUG_MASKLOG)
(BLOCK && OCFS2_FS) || ~OCFS2_DEBUG_FS
(BLOCK && OCFS2_FS) || ~OCFS2_FS_POSIX_ACL
(BLOCK && (NET && SYSFS)) || ~OCFS2_FS
(BLOCK && BTRFS_FS) || ~BTRFS_FS_POSIX_ACL
(BLOCK && EXPERIMENTAL) || ~BTRFS_FS
(BLOCK && EXPERIMENTAL) || ~NILFS2_FS
EMBEDDED || FILE_LOCKING
FSNOTIFY => (DNOTIFY || INOTIFY_USER)
DNOTIFY => FSNOTIFY
INOTIFY_USER => FSNOTIFY
(QUOTA && NET) || ~QUOTA_NETLINK_INTERFACE
QUOTA || (PRINT_QUOTA_WARNING => QUOTA)
QUOTA || (QUOTA => PRINT_QUOTA_WARNING)
QUOTA_TREE => ((QFMT_V2 && QUOTA) || (OCFS2_FS && (BLOCK && (NET && SYSFS))))
(QFMT_V2 && QUOTA) => QUOTA_TREE
(OCFS2_FS && (BLOCK && (NET && SYSFS))) => QUOTA_TREE
QUOTA || ~QFMT_V1
QUOTA || ~QFMT_V2
QUOTACTL => (XFS_QUOTA || QUOTA)
(XFS_QUOTA || QUOTA) => QUOTACTL
FUSE_FS || ~CUSE
GENERIC_ACL => (TMPFS_POSIX_ACL && TMPFS)
(TMPFS_POSIX_ACL && TMPFS) => GENERIC_ACL
(FSCACHE && PROC_FS) || ~FSCACHE_STATS
(FSCACHE && PROC_FS) || ~FSCACHE_HISTOGRAM
FSCACHE || ~FSCACHE_DEBUG
(FSCACHE && PROC_FS) || ~FSCACHE_OBJECT_LIST
CACHEFILES || ~CACHEFILES_DEBUG
(CACHEFILES && PROC_FS) || ~CACHEFILES_HISTOGRAM
(FSCACHE && BLOCK) || ~CACHEFILES
EXPERIMENTAL || ~FSCACHE
(BLOCK && ISO9660_FS) || ~JOLIET
(BLOCK && ISO9660_FS) || ~ZISOFS
BLOCK || ~ISO9660_FS
UDF_NLS => (BLOCK && ((UDF_FS && NLS) || (UDF_FS && NLS)))
BLOCK || ~UDF_FS
FAT_FS => ((MSDOS_FS && BLOCK) || (VFAT_FS && BLOCK))
(MSDOS_FS && BLOCK) => FAT_FS
(VFAT_FS && BLOCK) => FAT_FS
BLOCK || ~MSDOS_FS
(BLOCK && (MSDOS_FS || VFAT_FS)) || ~FAT_DEFAULT_CODEPAGE
(BLOCK && VFAT_FS) || ~FAT_DEFAULT_IOCHARSET
BLOCK || ~VFAT_FS
(BLOCK && NTFS_FS) || ~NTFS_DEBUG
(BLOCK && NTFS_FS) || ~NTFS_RW
BLOCK || ~NTFS_FS
(PROC_FS && (MMU && ~ARM)) || ~PROC_KCORE
(PROC_FS && CRASH_DUMP) || (PROC_VMCORE => (PROC_FS && CRASH_DUMP))
(PROC_FS && CRASH_DUMP) || ((PROC_FS && CRASH_DUMP) => PROC_VMCORE)
(PROC_FS && EMBEDDED) || (PROC_SYSCTL => PROC_FS)
(PROC_FS && EMBEDDED) || (PROC_FS => PROC_SYSCTL)
(PROC_FS && (MMU && EMBEDDED)) || (PROC_PAGE_MONITOR => (PROC_FS && MMU))
(PROC_FS && (MMU && EMBEDDED)) || ((PROC_FS && MMU) => PROC_PAGE_MONITOR)
EMBEDDED || PROC_FS
EMBEDDED || ((GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && GFS2_FS_LOCKING_DLM)))) => SYSFS)
EMBEDDED || SYSFS
TMPFS || ~TMPFS_POSIX_ACL
SHMEM || ~TMPFS
(X86 || (IA64 || (SPARC64 || ((S390 && c64BIT) || (SYS_SUPPORTS_HUGETLBFS || BROKEN))))) || ~HUGETLBFS
HUGETLB_PAGE => HUGETLBFS
HUGETLBFS => HUGETLB_PAGE
SYSFS || (CONFIGFS_FS => ((((NETCONSOLE_DYNAMIC && (NETDEVICES && (NETCONSOLE && (SYSFS && EXPERIMENTAL)))) || (GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && GFS2_FS_LOCKING_DLM))))) || (DLM && (EXPERIMENTAL && (INET && (SYSFS && (IPV6 || ~IPV6)))))) || (OCFS2_FS && (BLOCK && (NET && SYSFS)))))
SYSFS || ((NETCONSOLE_DYNAMIC && (NETDEVICES && (NETCONSOLE && (SYSFS && EXPERIMENTAL)))) => CONFIGFS_FS)
SYSFS || ((GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && GFS2_FS_LOCKING_DLM)))) => CONFIGFS_FS)
SYSFS || ((OCFS2_FS && (BLOCK && (NET && SYSFS))) => CONFIGFS_FS)
(MISC_FILESYSTEMS && ADFS_FS) || ~ADFS_FS_RW
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~ADFS_FS
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~AFFS_FS
(MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO))) || ~ECRYPT_FS
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~HFS_FS
(MISC_FILESYSTEMS && BLOCK) || ~HFSPLUS_FS
(MISC_FILESYSTEMS && BEFS_FS) || ~BEFS_DEBUG
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~BEFS_FS
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~BFS_FS
(MISC_FILESYSTEMS && (BLOCK && EXPERIMENTAL)) || ~EFS_FS
(MISC_FILESYSTEMS && JFFS2_FS) || ~JFFS2_FS_DEBUG
(MISC_FILESYSTEMS && JFFS2_FS_WRITEBUFFER) || ~JFFS2_FS_WBUF_VERIFY
(MISC_FILESYSTEMS && JFFS2_FS) || (JFFS2_FS_WRITEBUFFER => (MISC_FILESYSTEMS && JFFS2_FS))
(MISC_FILESYSTEMS && JFFS2_FS) || ((MISC_FILESYSTEMS && JFFS2_FS) => JFFS2_FS_WRITEBUFFER)
(MISC_FILESYSTEMS && (JFFS2_FS && EXPERIMENTAL)) || ~JFFS2_SUMMARY
(MISC_FILESYSTEMS && JFFS2_FS_XATTR) || (JFFS2_FS_POSIX_ACL => (MISC_FILESYSTEMS && JFFS2_FS_XATTR))
(MISC_FILESYSTEMS && JFFS2_FS_XATTR) || ((MISC_FILESYSTEMS && JFFS2_FS_XATTR) => JFFS2_FS_POSIX_ACL)
(MISC_FILESYSTEMS && JFFS2_FS_XATTR) || (JFFS2_FS_SECURITY => (MISC_FILESYSTEMS && JFFS2_FS_XATTR))
(MISC_FILESYSTEMS && JFFS2_FS_XATTR) || ((MISC_FILESYSTEMS && JFFS2_FS_XATTR) => JFFS2_FS_SECURITY)
(MISC_FILESYSTEMS && (JFFS2_FS && EXPERIMENTAL)) || ~JFFS2_FS_XATTR
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || (JFFS2_ZLIB => (MISC_FILESYSTEMS && JFFS2_FS))
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || ((MISC_FILESYSTEMS && JFFS2_FS) => JFFS2_ZLIB)
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || ~JFFS2_LZO
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || (JFFS2_RTIME => (MISC_FILESYSTEMS && JFFS2_FS))
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || ((MISC_FILESYSTEMS && JFFS2_FS) => JFFS2_RTIME)
(MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)) || ~JFFS2_RUBIN
MISC_FILESYSTEMS && (JFFS2_FS && JFFS2_COMPRESSION_OPTIONS)
(MISC_FILESYSTEMS && JFFS2_FS) || ~JFFS2_COMPRESSION_OPTIONS
(MISC_FILESYSTEMS && MTD) || ~JFFS2_FS
(MISC_FILESYSTEMS && UBIFS_FS) || ~UBIFS_FS_XATTR
(MISC_FILESYSTEMS && (UBIFS_FS && UBIFS_FS_ADVANCED_COMPR)) || (UBIFS_FS_LZO => (MISC_FILESYSTEMS && UBIFS_FS))
(MISC_FILESYSTEMS && (UBIFS_FS && UBIFS_FS_ADVANCED_COMPR)) || ((MISC_FILESYSTEMS && UBIFS_FS) => UBIFS_FS_LZO)
(MISC_FILESYSTEMS && (UBIFS_FS && UBIFS_FS_ADVANCED_COMPR)) || (UBIFS_FS_ZLIB => (MISC_FILESYSTEMS && UBIFS_FS))
(MISC_FILESYSTEMS && (UBIFS_FS && UBIFS_FS_ADVANCED_COMPR)) || ((MISC_FILESYSTEMS && UBIFS_FS) => UBIFS_FS_ZLIB)
(MISC_FILESYSTEMS && UBIFS_FS) || ~UBIFS_FS_ADVANCED_COMPR
(MISC_FILESYSTEMS && UBIFS_FS_DEBUG) || ~UBIFS_FS_DEBUG_MSG_LVL
(MISC_FILESYSTEMS && UBIFS_FS_DEBUG) || ~UBIFS_FS_DEBUG_CHKS
(MISC_FILESYSTEMS && UBIFS_FS) || ~UBIFS_FS_DEBUG
(MISC_FILESYSTEMS && MTD_UBI) || ~UBIFS_FS
(MISC_FILESYSTEMS && BLOCK) || ~CRAMFS
(MISC_FILESYSTEMS && (SQUASHFS && SQUASHFS_EMBEDDED)) || ~SQUASHFS_FRAGMENT_CACHE_SIZE
(MISC_FILESYSTEMS && SQUASHFS) || ~SQUASHFS_EMBEDDED
(MISC_FILESYSTEMS && BLOCK) || ~SQUASHFS
(MISC_FILESYSTEMS && BLOCK) || ~VXFS_FS
(MISC_FILESYSTEMS && BLOCK) || ~MINIX_FS
(MISC_FILESYSTEMS && BLOCK) || ~OMFS_FS
(MISC_FILESYSTEMS && BLOCK) || ~HPFS_FS
(MISC_FILESYSTEMS && BLOCK) || ~QNX4FS_FS
BLOCK || ~ROMFS_BACKED_BY_BLOCK
(MTD || (ROMFS_FS && MTD)) || ~ROMFS_BACKED_BY_MTD
(BLOCK && (MTD || (ROMFS_FS && MTD))) || ~ROMFS_BACKED_BY_BOTH
MISC_FILESYSTEMS && ROMFS_FS
(MISC_FILESYSTEMS && (BLOCK || MTD)) || ~ROMFS_FS
ROMFS_ON_BLOCK => (MISC_FILESYSTEMS && (ROMFS_BACKED_BY_BLOCK || ROMFS_BACKED_BY_BOTH))
(MISC_FILESYSTEMS && (ROMFS_BACKED_BY_BLOCK || ROMFS_BACKED_BY_BOTH)) => ROMFS_ON_BLOCK
ROMFS_ON_MTD => (MISC_FILESYSTEMS && (ROMFS_BACKED_BY_MTD || ROMFS_BACKED_BY_BOTH))
(MISC_FILESYSTEMS && (ROMFS_BACKED_BY_MTD || ROMFS_BACKED_BY_BOTH)) => ROMFS_ON_MTD
(MISC_FILESYSTEMS && BLOCK) || ~SYSV_FS
(MISC_FILESYSTEMS && (UFS_FS && EXPERIMENTAL)) || ~UFS_FS_WRITE
(MISC_FILESYSTEMS && UFS_FS) || ~UFS_DEBUG
(MISC_FILESYSTEMS && BLOCK) || ~UFS_FS
(MISC_FILESYSTEMS && EXOFS_FS) || ~EXOFS_DEBUG
(MISC_FILESYSTEMS && SCSI_OSD_ULD) || ~EXOFS_FS
(NETWORK_FILESYSTEMS && NFS_V3) || ~NFS_V3_ACL
(NETWORK_FILESYSTEMS && NFS_FS) || ~NFS_V3
(NETWORK_FILESYSTEMS && (NFS_V4 && EXPERIMENTAL)) || ~NFS_V4_1
(NETWORK_FILESYSTEMS && (NFS_FS && EXPERIMENTAL)) || ~NFS_V4
(NETWORK_FILESYSTEMS && (NFS_FS && IP_PNP)) || ~ROOT_NFS
(NETWORK_FILESYSTEMS && (INET && FILE_LOCKING)) || ~NFS_FS
(NETWORK_FILESYSTEMS && (EXPERIMENTAL && ((NFS_FS && FSCACHE) || (NFS_FS && FSCACHE)))) || ~NFS_FSCACHE
NFSD_V2_ACL => (NFSD_V3_ACL && (NETWORK_FILESYSTEMS && NFSD_V3))
(NFSD_V3_ACL && (NETWORK_FILESYSTEMS && NFSD_V3)) => NFSD_V2_ACL
(NETWORK_FILESYSTEMS && NFSD_V3) || ~NFSD_V3_ACL
(NETWORK_FILESYSTEMS && NFSD) || (NFSD_V3 => (NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL)))))
(NETWORK_FILESYSTEMS && NFSD) || ((NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL)))) => NFSD_V3)
(NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL))) || ~NFSD_V4
(NETWORK_FILESYSTEMS && (INET && FILE_LOCKING)) || ~NFSD
LOCKD => ((NFS_FS && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) || (NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))))
(NFS_FS && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) => LOCKD
(NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) => LOCKD
LOCKD_V4 => (NETWORK_FILESYSTEMS && ((NFSD_V3 || NFS_V3) && FILE_LOCKING))
(NETWORK_FILESYSTEMS && ((NFSD_V3 || NFS_V3) && FILE_LOCKING)) => LOCKD_V4
EXPORTFS => ((NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) || (XFS_FS && BLOCK))
(NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) => EXPORTFS
(XFS_FS && BLOCK) => EXPORTFS
NFS_ACL_SUPPORT => ((NFSD && (NETWORK_FILESYSTEMS && (INET && (FILE_LOCKING && NFSD_V2_ACL)))) || (NFS_FS && (NETWORK_FILESYSTEMS && (INET && (FILE_LOCKING && NFS_V3_ACL)))))
(NFSD && (NETWORK_FILESYSTEMS && (INET && (FILE_LOCKING && NFSD_V2_ACL)))) => NFS_ACL_SUPPORT
(NFS_FS && (NETWORK_FILESYSTEMS && (INET && (FILE_LOCKING && NFS_V3_ACL)))) => NFS_ACL_SUPPORT
NFS_COMMON => (NETWORK_FILESYSTEMS && (NFSD || NFS_FS))
(NETWORK_FILESYSTEMS && (NFSD || NFS_FS)) => NFS_COMMON
SUNRPC => ((NFS_FS && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) || (NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))))
(NFS_FS && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) => SUNRPC
(NFSD && (NETWORK_FILESYSTEMS && (INET && FILE_LOCKING))) => SUNRPC
SUNRPC_GSS => ((RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) || (RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))))
(RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => SUNRPC_GSS
(RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => SUNRPC_GSS
SUNRPC_XPRT_RDMA => ((NETWORK_FILESYSTEMS && (SUNRPC && (INFINIBAND && (INFINIBAND_ADDR_TRANS && EXPERIMENTAL)))) && (SUNRPC && INFINIBAND))
((NETWORK_FILESYSTEMS && (SUNRPC && (INFINIBAND && (INFINIBAND_ADDR_TRANS && EXPERIMENTAL)))) && (SUNRPC && INFINIBAND)) => SUNRPC_XPRT_RDMA
(NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)) || (RPCSEC_GSS_KRB5 => ((NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL)))) || (NFS_V4 && (NETWORK_FILESYSTEMS && (NFS_FS && EXPERIMENTAL)))))
(NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)) || ((NFSD_V4 && (NETWORK_FILESYSTEMS && (NFSD && (PROC_FS && EXPERIMENTAL)))) => RPCSEC_GSS_KRB5)
(NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)) || ((NFS_V4 && (NETWORK_FILESYSTEMS && (NFS_FS && EXPERIMENTAL))) => RPCSEC_GSS_KRB5)
(NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)) || ~RPCSEC_GSS_SPKM3
(NETWORK_FILESYSTEMS && SMB_NLS_DEFAULT) || ~SMB_NLS_REMOTE
(NETWORK_FILESYSTEMS && SMB_FS) || ~SMB_NLS_DEFAULT
(NETWORK_FILESYSTEMS && INET) || ~SMB_FS
(NETWORK_FILESYSTEMS && CIFS_STATS) || ~CIFS_STATS2
(NETWORK_FILESYSTEMS && CIFS) || ~CIFS_STATS
(NETWORK_FILESYSTEMS && CIFS) || ~CIFS_WEAK_PW_HASH
(NETWORK_FILESYSTEMS && (CIFS && KEYS)) || ~CIFS_UPCALL
(NETWORK_FILESYSTEMS && CIFS_XATTR) || ~CIFS_POSIX
(NETWORK_FILESYSTEMS && CIFS) || ~CIFS_XATTR
(NETWORK_FILESYSTEMS && CIFS) || ~CIFS_DEBUG2
(NETWORK_FILESYSTEMS && (CIFS && KEYS)) || ~CIFS_DFS_UPCALL
(NETWORK_FILESYSTEMS && (CIFS && EXPERIMENTAL)) || ~CIFS_EXPERIMENTAL
(NETWORK_FILESYSTEMS && INET) || ~CIFS
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_PACKET_SIGNING
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_IOCTL_LOCKING
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_STRONG
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_NFS_NS
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_OS2_NS
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_SMALLDOS
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_NLS
(NETWORK_FILESYSTEMS && NCP_FS) || ~NCPFS_EXTRAS
(NETWORK_FILESYSTEMS && (IPX || INET)) || ~NCP_FS
(NETWORK_FILESYSTEMS && INET) || ~CODA_FS
(NETWORK_FILESYSTEMS && AFS_FS) || ~AFS_DEBUG
(NETWORK_FILESYSTEMS && (INET && EXPERIMENTAL)) || ~AFS_FS
(NETWORK_FILESYSTEMS && (EXPERIMENTAL && ((AFS_FS && FSCACHE) || (AFS_FS && FSCACHE)))) || ~AFS_FSCACHE
(NETWORK_FILESYSTEMS && (INET && (NET_9P && EXPERIMENTAL))) || ~c9P_FS
(NETWORK_FILESYSTEMS && (EXPERIMENTAL && ((c9P_FS && FSCACHE) || (c9P_FS && FSCACHE)))) || ~c9P_FSCACHE
NET || (NETWORK_FILESYSTEMS => NET)
NET || (NET => NETWORK_FILESYSTEMS)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_CUMANA => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_CUMANA)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_EESOX => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_EESOX)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_ICS => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_ICS)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_ADFS => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_ADFS)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_POWERTEC => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_POWERTEC)
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || (ACORN_PARTITION_RISCIX => (BLOCK && (ACORN_PARTITION && ARCH_ACORN)))
(BLOCK && (ACORN_PARTITION && PARTITION_ADVANCED)) || ((BLOCK && (ACORN_PARTITION && ARCH_ACORN)) => ACORN_PARTITION_RISCIX)
(BLOCK && PARTITION_ADVANCED) || (ACORN_PARTITION => (BLOCK && ARCH_ACORN))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && ARCH_ACORN) => ACORN_PARTITION)
(BLOCK && PARTITION_ADVANCED) || (OSF_PARTITION => (BLOCK && ALPHA))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && ALPHA) => OSF_PARTITION)
(BLOCK && PARTITION_ADVANCED) || (AMIGA_PARTITION => (BLOCK && (AMIGA || AFFS_FS)))
(BLOCK && PARTITION_ADVANCED) || (ATARI_PARTITION => (BLOCK && ATARI))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && ATARI) => ATARI_PARTITION)
(BLOCK && (PARTITION_ADVANCED && S390)) || ~IBM_PARTITION
(BLOCK && PARTITION_ADVANCED) || (MAC_PARTITION => (BLOCK && (MAC || PPC_PMAC)))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && (MAC || PPC_PMAC)) => MAC_PARTITION)
(BLOCK && (PARTITION_ADVANCED && MSDOS_PARTITION)) || ~BSD_DISKLABEL
(BLOCK && (PARTITION_ADVANCED && MSDOS_PARTITION)) || ~MINIX_SUBPARTITION
(BLOCK && (PARTITION_ADVANCED && MSDOS_PARTITION)) || ~SOLARIS_X86_PARTITION
(BLOCK && (PARTITION_ADVANCED && MSDOS_PARTITION)) || ~UNIXWARE_DISKLABEL
(BLOCK && PARTITION_ADVANCED) || (MSDOS_PARTITION => BLOCK)
(BLOCK && PARTITION_ADVANCED) || (BLOCK => MSDOS_PARTITION)
(BLOCK && LDM_PARTITION) || ~LDM_DEBUG
(BLOCK && PARTITION_ADVANCED) || ~LDM_PARTITION
(BLOCK && PARTITION_ADVANCED) || (SGI_PARTITION => (BLOCK && DEFAULT_SGI_PARTITION))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && DEFAULT_SGI_PARTITION) => SGI_PARTITION)
(BLOCK && PARTITION_ADVANCED) || (ULTRIX_PARTITION => (BLOCK && MACH_DECSTATION))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && MACH_DECSTATION) => ULTRIX_PARTITION)
(BLOCK && PARTITION_ADVANCED) || (SUN_PARTITION => (BLOCK && (SPARC || (SUN3 || SUN3X))))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && (SPARC || (SUN3 || SUN3X))) => SUN_PARTITION)
(BLOCK && PARTITION_ADVANCED) || ~KARMA_PARTITION
(BLOCK && PARTITION_ADVANCED) || ~EFI_PARTITION
(BLOCK && PARTITION_ADVANCED) || (SYSV68_PARTITION => (BLOCK && VME))
(BLOCK && PARTITION_ADVANCED) || ((BLOCK && VME) => SYSV68_PARTITION)
BLOCK || ~PARTITION_ADVANCED
NLS || ~NLS_DEFAULT
NLS || ~NLS_CODEPAGE_437
NLS || ~NLS_CODEPAGE_737
NLS || ~NLS_CODEPAGE_775
NLS || ~NLS_CODEPAGE_850
NLS || ~NLS_CODEPAGE_852
NLS || ~NLS_CODEPAGE_855
NLS || ~NLS_CODEPAGE_857
NLS || ~NLS_CODEPAGE_860
NLS || ~NLS_CODEPAGE_861
NLS || ~NLS_CODEPAGE_862
NLS || ~NLS_CODEPAGE_863
NLS || ~NLS_CODEPAGE_864
NLS || ~NLS_CODEPAGE_865
NLS || ~NLS_CODEPAGE_866
NLS || ~NLS_CODEPAGE_869
NLS || ~NLS_CODEPAGE_936
NLS || ~NLS_CODEPAGE_950
NLS || ~NLS_CODEPAGE_932
NLS || ~NLS_CODEPAGE_949
NLS || ~NLS_CODEPAGE_874
NLS || ~NLS_ISO8859_8
NLS || ~NLS_CODEPAGE_1250
NLS || ~NLS_CODEPAGE_1251
NLS || ~NLS_ASCII
NLS || ~NLS_ISO8859_1
NLS || ~NLS_ISO8859_2
NLS || ~NLS_ISO8859_3
NLS || ~NLS_ISO8859_4
NLS || ~NLS_ISO8859_5
NLS || ~NLS_ISO8859_6
NLS || ~NLS_ISO8859_7
NLS || ~NLS_ISO8859_9
NLS || ~NLS_ISO8859_13
NLS || ~NLS_ISO8859_14
NLS || ~NLS_ISO8859_15
NLS || ~NLS_KOI8_R
NLS || ~NLS_KOI8_U
NLS || (NLS_UTF8 => (HFSPLUS_FS && (MISC_FILESYSTEMS && BLOCK)))
NLS || ((HFSPLUS_FS && (MISC_FILESYSTEMS && BLOCK)) => NLS_UTF8)
DLM || ~DLM_DEBUG
(EXPERIMENTAL && (INET && (SYSFS && (IPV6 || ~IPV6)))) || (DLM => (GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && GFS2_FS_LOCKING_DLM)))))
(EXPERIMENTAL && (INET && (SYSFS && (IPV6 || ~IPV6)))) || ((GFS2_FS && (BLOCK && (EXPERIMENTAL && ((c64BIT || LBDAF) && GFS2_FS_LOCKING_DLM)))) => DLM)
TRACE_IRQFLAGS_SUPPORT
PRINTK || ~PRINTK_TIME
~UML || (MAGIC_SYSRQ => (KGDB_SERIAL_CONSOLE && KGDB))
~UML || ((KGDB_SERIAL_CONSOLE && KGDB) => MAGIC_SYSRQ)
SYSFS || (DEBUG_FS => (((((((TREE_RCU_TRACE || (MTD_UBI_DEBUG && (MTD && (SYSFS && MTD_UBI)))) || (UBIFS_FS_DEBUG && (MISC_FILESYSTEMS && UBIFS_FS))) || (AMD_IOMMU_STATS && AMD_IOMMU)) || TRACING) || (DEBUG_KMEMLEAK && (DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && ((X86 || (ARM || (PPC || S390))) && SYSFS)))))) || (X86_PTDUMP && DEBUG_KERNEL)) || (BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK))))))
SYSFS || (TREE_RCU_TRACE => DEBUG_FS)
SYSFS || ((MTD_UBI_DEBUG && (MTD && (SYSFS && MTD_UBI))) => DEBUG_FS)
SYSFS || ((UBIFS_FS_DEBUG && (MISC_FILESYSTEMS && UBIFS_FS)) => DEBUG_FS)
SYSFS || ((AMD_IOMMU_STATS && AMD_IOMMU) => DEBUG_FS)
SYSFS || (TRACING => DEBUG_FS)
SYSFS || ((DEBUG_KMEMLEAK && (DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && ((X86 || (ARM || (PPC || S390))) && SYSFS))))) => DEBUG_FS)
SYSFS || ((X86_PTDUMP && DEBUG_KERNEL) => DEBUG_FS)
SYSFS || ((BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))) => DEBUG_FS)
~UML || ~HEADERS_CHECK
UNDEFINED || ~DEBUG_SECTION_MISMATCH
(DEBUG_KERNEL && GENERIC_HARDIRQS) || ~DEBUG_SHIRQ
DETECT_SOFTLOCKUP || ~BOOTPARAM_SOFTLOCKUP_PANIC
~BOOTPARAM_SOFTLOCKUP_PANIC_VALUE
(DEBUG_KERNEL && ~S390) || (DETECT_SOFTLOCKUP => (DEBUG_KERNEL && ~S390))
(DEBUG_KERNEL && ~S390) || ((DEBUG_KERNEL && ~S390) => DETECT_SOFTLOCKUP)
DETECT_HUNG_TASK || ~BOOTPARAM_HUNG_TASK_PANIC
~BOOTPARAM_HUNG_TASK_PANIC_VALUE
DEBUG_KERNEL || (DETECT_HUNG_TASK => (DEBUG_KERNEL && DETECT_SOFTLOCKUP))
DEBUG_KERNEL || ((DEBUG_KERNEL && DETECT_SOFTLOCKUP) => DETECT_HUNG_TASK)
(DEBUG_KERNEL && PROC_FS) || (SCHED_DEBUG => ((LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) || (DEBUG_KERNEL && PROC_FS)))
(DEBUG_KERNEL && PROC_FS) || ((LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) => SCHED_DEBUG)
(DEBUG_KERNEL && PROC_FS) || ((DEBUG_KERNEL && PROC_FS) => SCHED_DEBUG)
(DEBUG_KERNEL && PROC_FS) || (SCHEDSTATS => (LATENCYTOP && HAVE_LATENCYTOP_SUPPORT))
(DEBUG_KERNEL && PROC_FS) || ((LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) => SCHEDSTATS)
(DEBUG_KERNEL && PROC_FS) || ~TIMER_STATS
DEBUG_OBJECTS || ~DEBUG_OBJECTS_SELFTEST
DEBUG_OBJECTS || ~DEBUG_OBJECTS_FREE
DEBUG_OBJECTS || ~DEBUG_OBJECTS_TIMERS
DEBUG_OBJECTS || ~DEBUG_OBJECTS_ENABLE_DEFAULT
DEBUG_KERNEL || ~DEBUG_OBJECTS
DEBUG_SLAB || ~DEBUG_SLAB_LEAK
(DEBUG_KERNEL && (SLAB && ~KMEMCHECK)) || ~DEBUG_SLAB
(SLUB && (SLUB_DEBUG && ~KMEMCHECK)) || ~SLUB_DEBUG_ON
(SLUB && (SLUB_DEBUG && SYSFS)) || ~SLUB_STATS
DEBUG_KMEMLEAK || ~DEBUG_KMEMLEAK_EARLY_LOG_SIZE
DEBUG_KMEMLEAK || ~DEBUG_KMEMLEAK_TEST
(DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && (X86 || (ARM || (PPC || S390)))))) || ~DEBUG_KMEMLEAK
(DEBUG_KERNEL && (PREEMPT && TRACE_IRQFLAGS_SUPPORT)) || (DEBUG_PREEMPT => (DEBUG_KERNEL && (PREEMPT && TRACE_IRQFLAGS_SUPPORT)))
(DEBUG_KERNEL && (PREEMPT && TRACE_IRQFLAGS_SUPPORT)) || ((DEBUG_KERNEL && (PREEMPT && TRACE_IRQFLAGS_SUPPORT)) => DEBUG_PREEMPT)
DEBUG_PI_LIST => DEBUG_RT_MUTEXES
DEBUG_RT_MUTEXES => DEBUG_PI_LIST
(DEBUG_KERNEL && RT_MUTEXES) || ~DEBUG_RT_MUTEXES
(DEBUG_KERNEL && RT_MUTEXES) || ~RT_MUTEX_TESTER
DEBUG_KERNEL || (DEBUG_SPINLOCK => (((DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) || (PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))) || (LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))))
DEBUG_KERNEL || ((DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_SPINLOCK)
DEBUG_KERNEL || ((PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_SPINLOCK)
DEBUG_KERNEL || ((LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_SPINLOCK)
DEBUG_KERNEL || (DEBUG_MUTEXES => (((DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) || (PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))) || (LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))))
DEBUG_KERNEL || ((DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_MUTEXES)
DEBUG_KERNEL || ((PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_MUTEXES)
DEBUG_KERNEL || ((LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_MUTEXES)
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))) || (DEBUG_LOCK_ALLOC => ((PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) || (LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))))
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))) || ((PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_LOCK_ALLOC)
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))) || ((LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => DEBUG_LOCK_ALLOC)
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))) || ~PROVE_LOCKING
LOCKDEP => (((DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) || (PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))) || (LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))))
(DEBUG_LOCK_ALLOC && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => LOCKDEP
(PROVE_LOCKING && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => LOCKDEP
(LOCK_STAT && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => LOCKDEP
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))) || ~LOCK_STAT
(DEBUG_KERNEL && LOCKDEP) || ~DEBUG_LOCKDEP
TRACE_IRQFLAGS => ((IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) || (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING)))
(IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) => TRACE_IRQFLAGS
(DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && PROVE_LOCKING)) => TRACE_IRQFLAGS
DEBUG_KERNEL || ~DEBUG_SPINLOCK_SLEEP
DEBUG_KERNEL || ~DEBUG_LOCKING_API_SELFTESTS
STACKTRACE => ((((((((STACK_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) || (FAULT_INJECTION_STACKTRACE_FILTER && (FAULT_INJECTION_DEBUG_FS && (STACKTRACE_SUPPORT && ~X86_64)))) || (DEBUG_KMEMLEAK && (DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && ((X86 || (ARM || (PPC || S390))) && STACKTRACE_SUPPORT)))))) || (LATENCYTOP && HAVE_LATENCYTOP_SUPPORT)) || (TRACING && STACKTRACE_SUPPORT)) || (KMEMCHECK && (HAVE_ARCH_KMEMCHECK && (DEBUG_KERNEL && (~X86_USE_3DNOW && ((SLUB || SLAB) && (~CC_OPTIMIZE_FOR_SIZE && ~FUNCTION_TRACER))))))) || (LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT))))) || (BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))))
(STACK_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => STACKTRACE
(FAULT_INJECTION_STACKTRACE_FILTER && (FAULT_INJECTION_DEBUG_FS && (STACKTRACE_SUPPORT && ~X86_64))) => STACKTRACE
(DEBUG_KMEMLEAK && (DEBUG_KERNEL && (EXPERIMENTAL && (~MEMORY_HOTPLUG && ((X86 || (ARM || (PPC || S390))) && STACKTRACE_SUPPORT))))) => STACKTRACE
(LATENCYTOP && HAVE_LATENCYTOP_SUPPORT) => STACKTRACE
(TRACING && STACKTRACE_SUPPORT) => STACKTRACE
(KMEMCHECK && (HAVE_ARCH_KMEMCHECK && (DEBUG_KERNEL && (~X86_USE_3DNOW && ((SLUB || SLAB) && (~CC_OPTIMIZE_FOR_SIZE && ~FUNCTION_TRACER)))))) => STACKTRACE
(LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && LOCKDEP_SUPPORT)))) => STACKTRACE
(BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))) => STACKTRACE
DEBUG_KERNEL || ~DEBUG_KOBJECT
(DEBUG_KERNEL && HIGHMEM) || ~DEBUG_HIGHMEM
(BUG && ((ARM || (AVR32 || (M32R || (M68K || (SPARC32 || (SPARC64 || (FRV || (SUPERH || (GENERIC_BUG || (BLACKFIN || MN10300)))))))))) && (DEBUG_KERNEL && EMBEDDED))) || (DEBUG_BUGVERBOSE => ((BUG && (ARM || (AVR32 || (M32R || (M68K || (SPARC32 || (SPARC64 || (FRV || (SUPERH || (GENERIC_BUG || (BLACKFIN || MN10300))))))))))) && ~EMBEDDED))
(BUG && ((ARM || (AVR32 || (M32R || (M68K || (SPARC32 || (SPARC64 || (FRV || (SUPERH || (GENERIC_BUG || (BLACKFIN || MN10300)))))))))) && (DEBUG_KERNEL && EMBEDDED))) || (((BUG && (ARM || (AVR32 || (M32R || (M68K || (SPARC32 || (SPARC64 || (FRV || (SUPERH || (GENERIC_BUG || (BLACKFIN || MN10300))))))))))) && ~EMBEDDED) => DEBUG_BUGVERBOSE)
DEBUG_KERNEL || ~DEBUG_INFO
DEBUG_KERNEL || ~DEBUG_VM
(DEBUG_KERNEL && X86) || ~DEBUG_VIRTUAL
(DEBUG_KERNEL && ~MMU) || ~DEBUG_NOMMU_REGIONS
DEBUG_KERNEL || ~DEBUG_WRITECOUNT
EMBEDDED || (DEBUG_MEMORY_INIT => ~EMBEDDED)
EMBEDDED || (~EMBEDDED => DEBUG_MEMORY_INIT)
DEBUG_KERNEL || ~DEBUG_LIST
DEBUG_KERNEL || ~DEBUG_SG
DEBUG_KERNEL || ~DEBUG_NOTIFIERS
DEBUG_KERNEL || ~DEBUG_CREDENTIALS
ARCH_WANT_FRAME_POINTERS => X86
X86 => ARCH_WANT_FRAME_POINTERS
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || (FRAME_POINTER => ((((((FAULT_INJECTION_STACKTRACE_FILTER && (FAULT_INJECTION_DEBUG_FS && (STACKTRACE_SUPPORT && (~X86_64 && (~PPC && ~S390))))) || (LATENCYTOP && (HAVE_LATENCYTOP_SUPPORT && (~MIPS && (~PPC && ~S390))))) || (KMEMCHECK && (HAVE_ARCH_KMEMCHECK && (DEBUG_KERNEL && (~X86_USE_3DNOW && ((SLUB || SLAB) && (~CC_OPTIMIZE_FOR_SIZE && ~FUNCTION_TRACER))))))) || (FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)))) || (LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && (LOCKDEP_SUPPORT && (~MIPS && (~PPC && (~ARM_UNWIND && ~S390))))))))) || (((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) && ((DEBUG_INFO && UML) || ARCH_WANT_FRAME_POINTERS))))
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((FAULT_INJECTION_STACKTRACE_FILTER && (FAULT_INJECTION_DEBUG_FS && (STACKTRACE_SUPPORT && (~X86_64 && (~PPC && ~S390))))) => FRAME_POINTER)
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((LATENCYTOP && (HAVE_LATENCYTOP_SUPPORT && (~MIPS && (~PPC && ~S390)))) => FRAME_POINTER)
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((KMEMCHECK && (HAVE_ARCH_KMEMCHECK && (DEBUG_KERNEL && (~X86_USE_3DNOW && ((SLUB || SLAB) && (~CC_OPTIMIZE_FOR_SIZE && ~FUNCTION_TRACER)))))) => FRAME_POINTER)
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => FRAME_POINTER)
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((LOCKDEP && (DEBUG_KERNEL && (TRACE_IRQFLAGS_SUPPORT && (STACKTRACE_SUPPORT && (LOCKDEP_SUPPORT && (~MIPS && (~PPC && (~ARM_UNWIND && ~S390)))))))) => FRAME_POINTER)
((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) || ((((DEBUG_KERNEL && (CRIS || (M68K || (M68KNOMMU || (FRV || (UML || (AVR32 || (SUPERH || (BLACKFIN || MN10300))))))))) || ARCH_WANT_FRAME_POINTERS) && ((DEBUG_INFO && UML) || ARCH_WANT_FRAME_POINTERS)) => FRAME_POINTER)
(DEBUG_KERNEL && (PRINTK && GENERIC_CALIBRATE_DELAY)) || ~BOOT_PRINTK_DELAY
RCU_TORTURE_TEST || ~RCU_TORTURE_TEST_RUNNABLE
DEBUG_KERNEL || ~RCU_TORTURE_TEST
(TREE_RCU || TREE_PREEMPT_RCU) || ~RCU_CPU_STALL_DETECTOR
(DEBUG_KERNEL && KPROBES) || ~KPROBES_SANITY_TEST
DEBUG_KERNEL || ~BACKTRACE_SELF_TEST
(DEBUG_KERNEL && BLOCK) || ~DEBUG_BLOCK_EXT_DEVT
DEBUG_KERNEL || ~DEBUG_FORCE_WEAK_PER_CPU
(DEBUG_KERNEL && (KPROBES && BLOCK)) || ~LKDTM
(FAULT_INJECTION && (SLAB || SLUB)) || ~FAILSLAB
FAULT_INJECTION || ~FAIL_PAGE_ALLOC
(FAULT_INJECTION && BLOCK) || ~FAIL_MAKE_REQUEST
(FAULT_INJECTION && BLOCK) || ~FAIL_IO_TIMEOUT
(FAULT_INJECTION_DEBUG_FS && (STACKTRACE_SUPPORT && ~X86_64)) || ~FAULT_INJECTION_STACKTRACE_FILTER
(FAULT_INJECTION && (SYSFS && DEBUG_FS)) || ~FAULT_INJECTION_DEBUG_FS
DEBUG_KERNEL || ~FAULT_INJECTION
HAVE_LATENCYTOP_SUPPORT || ~LATENCYTOP
SYSCTL_SYSCALL || ~SYSCTL_SYSCALL_CHECK
(DEBUG_KERNEL && (ARCH_SUPPORTS_DEBUG_PAGEALLOC && ((~HIBERNATION || (~PPC && ~SPARC)) && ~KMEMCHECK))) || (DEBUG_PAGEALLOC => (PAGE_POISONING && (DEBUG_KERNEL && (~ARCH_SUPPORTS_DEBUG_PAGEALLOC && ~HIBERNATION))))
(DEBUG_KERNEL && (ARCH_SUPPORTS_DEBUG_PAGEALLOC && ((~HIBERNATION || (~PPC && ~SPARC)) && ~KMEMCHECK))) || ((PAGE_POISONING && (DEBUG_KERNEL && (~ARCH_SUPPORTS_DEBUG_PAGEALLOC && ~HIBERNATION))) => DEBUG_PAGEALLOC)
WANT_PAGE_DEBUG_FLAGS => (PAGE_POISONING && (DEBUG_KERNEL && (~ARCH_SUPPORTS_DEBUG_PAGEALLOC && ~HIBERNATION)))
(PAGE_POISONING && (DEBUG_KERNEL && (~ARCH_SUPPORTS_DEBUG_PAGEALLOC && ~HIBERNATION))) => WANT_PAGE_DEBUG_FLAGS
(DEBUG_KERNEL && (~ARCH_SUPPORTS_DEBUG_PAGEALLOC && ~HIBERNATION)) || ~PAGE_POISONING
USER_STACKTRACE_SUPPORT => X86
X86 => USER_STACKTRACE_SUPPORT
NOP_TRACER => TRACING
TRACING => NOP_TRACER
HAVE_FTRACE_NMI_ENTER => (X86 && DYNAMIC_FTRACE)
(X86 && DYNAMIC_FTRACE) => HAVE_FTRACE_NMI_ENTER
HAVE_FUNCTION_TRACER => X86
X86 => HAVE_FUNCTION_TRACER
HAVE_FUNCTION_GRAPH_TRACER => X86
X86 => HAVE_FUNCTION_GRAPH_TRACER
HAVE_FUNCTION_GRAPH_FP_TEST => X86
X86 => HAVE_FUNCTION_GRAPH_FP_TEST
HAVE_FUNCTION_TRACE_MCOUNT_TEST => X86
X86 => HAVE_FUNCTION_TRACE_MCOUNT_TEST
HAVE_DYNAMIC_FTRACE => X86
X86 => HAVE_DYNAMIC_FTRACE
HAVE_FTRACE_MCOUNT_RECORD => X86
X86 => HAVE_FTRACE_MCOUNT_RECORD
HAVE_HW_BRANCH_TRACER => (X86_DS && X86_DEBUGCTLMSR)
(X86_DS && X86_DEBUGCTLMSR) => HAVE_HW_BRANCH_TRACER
HAVE_SYSCALL_TRACEPOINTS => X86
X86 => HAVE_SYSCALL_TRACEPOINTS
TRACER_MAX_TRACE => (((IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) || (PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT))))) || (SCHED_TRACER && (TRACING_SUPPORT && FTRACE)))
(IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) => TRACER_MAX_TRACE
(PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT)))) => TRACER_MAX_TRACE
(SCHED_TRACER && (TRACING_SUPPORT && FTRACE)) => TRACER_MAX_TRACE
RING_BUFFER => (TRACING || (OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))))
TRACING => RING_BUFFER
(OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))) => RING_BUFFER
FTRACE_NMI_ENTER => HAVE_FTRACE_NMI_ENTER
HAVE_FTRACE_NMI_ENTER => FTRACE_NMI_ENTER
EVENT_TRACING => TRACING
TRACING => EVENT_TRACING
CONTEXT_SWITCH_TRACER => (((((SCHED_TRACER && (TRACING_SUPPORT && FTRACE)) || EVENT_TRACING) || (BOOT_TRACER && (TRACING_SUPPORT && FTRACE))) || (FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)))) || (SYSPROF_TRACER && (TRACING_SUPPORT && (FTRACE && X86))))
(SCHED_TRACER && (TRACING_SUPPORT && FTRACE)) => CONTEXT_SWITCH_TRACER
EVENT_TRACING => CONTEXT_SWITCH_TRACER
(BOOT_TRACER && (TRACING_SUPPORT && FTRACE)) => CONTEXT_SWITCH_TRACER
(FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => CONTEXT_SWITCH_TRACER
(SYSPROF_TRACER && (TRACING_SUPPORT && (FTRACE && X86))) => CONTEXT_SWITCH_TRACER
RING_BUFFER_ALLOW_SWAP => (((IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) || (PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT))))) || (OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))))
(IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) => RING_BUFFER_ALLOW_SWAP
(PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT)))) => RING_BUFFER_ALLOW_SWAP
(OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))) => RING_BUFFER_ALLOW_SWAP
TRACING => (((ENABLE_DEFAULT_TRACERS && (TRACING_SUPPORT && (FTRACE && ~GENERIC_TRACER))) || GENERIC_TRACER) || (OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))))
(ENABLE_DEFAULT_TRACERS && (TRACING_SUPPORT && (FTRACE && ~GENERIC_TRACER))) => TRACING
GENERIC_TRACER => TRACING
(OPROFILE && (PROFILING && (HAVE_OPROFILE && TRACING_SUPPORT))) => TRACING
GENERIC_TRACER => ((((((((((((((FTRACE_SYSCALLS && (TRACING_SUPPORT && (FTRACE && HAVE_SYSCALL_TRACEPOINTS))) || (MMIOTRACE && (TRACING_SUPPORT && (FTRACE && (HAVE_MMIOTRACE_SUPPORT && PCI))))) || (KMEMTRACE && (TRACING_SUPPORT && FTRACE))) || (SCHED_TRACER && (TRACING_SUPPORT && FTRACE))) || (TRACE_BRANCH_PROFILING && (TRACING_SUPPORT && FTRACE))) || (BOOT_TRACER && (TRACING_SUPPORT && FTRACE))) || (FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)))) || (SYSPROF_TRACER && (TRACING_SUPPORT && (FTRACE && X86)))) || (HW_BRANCH_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_HW_BRANCH_TRACER)))) || (WORKQUEUE_TRACER && (TRACING_SUPPORT && FTRACE))) || (IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME))))) || (PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT))))) || (POWER_TRACER && (TRACING_SUPPORT && (FTRACE && X86)))) || (BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))))
(FTRACE_SYSCALLS && (TRACING_SUPPORT && (FTRACE && HAVE_SYSCALL_TRACEPOINTS))) => GENERIC_TRACER
(MMIOTRACE && (TRACING_SUPPORT && (FTRACE && (HAVE_MMIOTRACE_SUPPORT && PCI)))) => GENERIC_TRACER
(KMEMTRACE && (TRACING_SUPPORT && FTRACE)) => GENERIC_TRACER
(SCHED_TRACER && (TRACING_SUPPORT && FTRACE)) => GENERIC_TRACER
(TRACE_BRANCH_PROFILING && (TRACING_SUPPORT && FTRACE)) => GENERIC_TRACER
(BOOT_TRACER && (TRACING_SUPPORT && FTRACE)) => GENERIC_TRACER
(FUNCTION_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => GENERIC_TRACER
(SYSPROF_TRACER && (TRACING_SUPPORT && (FTRACE && X86))) => GENERIC_TRACER
(HW_BRANCH_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_HW_BRANCH_TRACER))) => GENERIC_TRACER
(WORKQUEUE_TRACER && (TRACING_SUPPORT && FTRACE)) => GENERIC_TRACER
(IRQSOFF_TRACER && (TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME)))) => GENERIC_TRACER
(PREEMPT_TRACER && (TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT)))) => GENERIC_TRACER
(POWER_TRACER && (TRACING_SUPPORT && (FTRACE && X86))) => GENERIC_TRACER
(BLK_DEV_IO_TRACE && (TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK)))) => GENERIC_TRACER
TRACING_SUPPORT => ((TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT)
((TRACE_IRQFLAGS_SUPPORT || PPC32) && STACKTRACE_SUPPORT) => TRACING_SUPPORT
(TRACING_SUPPORT && (FTRACE && (HAVE_FUNCTION_GRAPH_TRACER && (FUNCTION_TRACER && (~X86_32 || ~CC_OPTIMIZE_FOR_SIZE))))) || (FUNCTION_GRAPH_TRACER => (TRACING_SUPPORT && (FTRACE && (HAVE_FUNCTION_GRAPH_TRACER && (FUNCTION_TRACER && (~X86_32 || ~CC_OPTIMIZE_FOR_SIZE))))))
(TRACING_SUPPORT && (FTRACE && (HAVE_FUNCTION_GRAPH_TRACER && (FUNCTION_TRACER && (~X86_32 || ~CC_OPTIMIZE_FOR_SIZE))))) || ((TRACING_SUPPORT && (FTRACE && (HAVE_FUNCTION_GRAPH_TRACER && (FUNCTION_TRACER && (~X86_32 || ~CC_OPTIMIZE_FOR_SIZE))))) => FUNCTION_GRAPH_TRACER)
(TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)) || (FUNCTION_TRACER => (STACK_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))))
(TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)) || ((STACK_TRACER && (TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER))) => FUNCTION_TRACER)
(TRACING_SUPPORT && (FTRACE && (TRACE_IRQFLAGS_SUPPORT && GENERIC_TIME))) || ~IRQSOFF_TRACER
(TRACING_SUPPORT && (FTRACE && (GENERIC_TIME && PREEMPT))) || ~PREEMPT_TRACER
(TRACING_SUPPORT && (FTRACE && X86)) || ~SYSPROF_TRACER
(TRACING_SUPPORT && FTRACE) || ~SCHED_TRACER
(TRACING_SUPPORT && (FTRACE && ~GENERIC_TRACER)) || ~ENABLE_DEFAULT_TRACERS
(TRACING_SUPPORT && (FTRACE && HAVE_SYSCALL_TRACEPOINTS)) || ~FTRACE_SYSCALLS
(TRACING_SUPPORT && FTRACE) || ~BOOT_TRACER
TRACE_BRANCH_PROFILING => (PROFILE_ANNOTATED_BRANCHES || PROFILE_ALL_BRANCHES)
PROFILE_ANNOTATED_BRANCHES => TRACE_BRANCH_PROFILING
PROFILE_ALL_BRANCHES => TRACE_BRANCH_PROFILING
TRACING_SUPPORT && FTRACE
TRACING_BRANCHES => (BRANCH_TRACER && (TRACING_SUPPORT && (FTRACE && TRACE_BRANCH_PROFILING)))
(BRANCH_TRACER && (TRACING_SUPPORT && (FTRACE && TRACE_BRANCH_PROFILING))) => TRACING_BRANCHES
(TRACING_SUPPORT && (FTRACE && TRACE_BRANCH_PROFILING)) || ~BRANCH_TRACER
(TRACING_SUPPORT && (FTRACE && X86)) || ~POWER_TRACER
(TRACING_SUPPORT && (FTRACE && HAVE_FUNCTION_TRACER)) || ~STACK_TRACER
(TRACING_SUPPORT && (FTRACE && HAVE_HW_BRANCH_TRACER)) || ~HW_BRANCH_TRACER
(TRACING_SUPPORT && FTRACE) || ~KMEMTRACE
(TRACING_SUPPORT && FTRACE) || ~WORKQUEUE_TRACER
(TRACING_SUPPORT && (FTRACE && (SYSFS && BLOCK))) || ~BLK_DEV_IO_TRACE
(TRACING_SUPPORT && (FTRACE && (FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE))) || (DYNAMIC_FTRACE => (TRACING_SUPPORT && (FTRACE && (FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE))))
(TRACING_SUPPORT && (FTRACE && (FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE))) || ((TRACING_SUPPORT && (FTRACE && (FUNCTION_TRACER && HAVE_DYNAMIC_FTRACE))) => DYNAMIC_FTRACE)
(TRACING_SUPPORT && (FTRACE && FUNCTION_TRACER)) || ~FUNCTION_PROFILER
FTRACE_MCOUNT_RECORD => (TRACING_SUPPORT && (FTRACE && (DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD)))
(TRACING_SUPPORT && (FTRACE && (DYNAMIC_FTRACE && HAVE_FTRACE_MCOUNT_RECORD))) => FTRACE_MCOUNT_RECORD
FTRACE_SELFTEST => (FTRACE_STARTUP_TEST && (TRACING_SUPPORT && (FTRACE && GENERIC_TRACER)))
(FTRACE_STARTUP_TEST && (TRACING_SUPPORT && (FTRACE && GENERIC_TRACER))) => FTRACE_SELFTEST
(TRACING_SUPPORT && (FTRACE && FTRACE_STARTUP_TEST)) || ~EVENT_TRACE_TEST_SYSCALLS
(TRACING_SUPPORT && (FTRACE && GENERIC_TRACER)) || ~FTRACE_STARTUP_TEST
(TRACING_SUPPORT && (FTRACE && MMIOTRACE)) || ~MMIOTRACE_TEST
(TRACING_SUPPORT && (FTRACE && (HAVE_MMIOTRACE_SUPPORT && PCI))) || ~MMIOTRACE
(TRACING_SUPPORT && (FTRACE && RING_BUFFER)) || ~RING_BUFFER_BENCHMARK
TRACING_SUPPORT || (FTRACE => (TRACING_SUPPORT && DEBUG_KERNEL))
TRACING_SUPPORT || ((TRACING_SUPPORT && DEBUG_KERNEL) => FTRACE)
(PCI && X86) || ~PROVIDE_OHCI1394_DMA_INIT
FIREWIRE_OHCI || ~FIREWIRE_OHCI_REMOTE_DMA
HEADERS_CHECK || ~BUILD_DOCSRC
(PRINTK && DEBUG_FS) || ~DYNAMIC_DEBUG
HAVE_DMA_API_DEBUG || ~DMA_API_DEBUG
(SAMPLES && TRACEPOINTS) || ~SAMPLE_TRACEPOINTS
(SAMPLES && EVENT_TRACING) || ~SAMPLE_TRACE_EVENTS
SAMPLES || ~SAMPLE_KOBJECT
(SAMPLES && (SAMPLE_KPROBES && KRETPROBES)) || (SAMPLE_KRETPROBES => (SAMPLES && (SAMPLE_KPROBES && KRETPROBES)))
(SAMPLES && (SAMPLE_KPROBES && KRETPROBES)) || ((SAMPLES && (SAMPLE_KPROBES && KRETPROBES)) => SAMPLE_KRETPROBES)
(SAMPLES && KPROBES) || ~SAMPLE_KPROBES
HAVE_ARCH_KGDB => X86
X86 => HAVE_ARCH_KGDB
KGDB || (KGDB_SERIAL_CONSOLE => KGDB)
KGDB || (KGDB => KGDB_SERIAL_CONSOLE)
(KGDB && KGDB_TESTS_ON_BOOT) || ~KGDB_TESTS_BOOT_STRING
(KGDB && KGDB_TESTS) || ~KGDB_TESTS_ON_BOOT
KGDB || ~KGDB_TESTS
(HAVE_ARCH_KGDB && (DEBUG_KERNEL && EXPERIMENTAL)) || ~KGDB
HAVE_ARCH_KMEMCHECK => X86
X86 => HAVE_ARCH_KMEMCHECK
KMEMCHECK || ~KMEMCHECK_DISABLED_BY_DEFAULT
KMEMCHECK || ~KMEMCHECK_ENABLED_BY_DEFAULT
KMEMCHECK || ~KMEMCHECK_ONESHOT_BY_DEFAULT
HAVE_ARCH_KMEMCHECK && KMEMCHECK
(HAVE_ARCH_KMEMCHECK && KMEMCHECK) || ~KMEMCHECK_QUEUE_SIZE
(HAVE_ARCH_KMEMCHECK && KMEMCHECK) || ~KMEMCHECK_SHADOW_COPY_SHIFT
(HAVE_ARCH_KMEMCHECK && KMEMCHECK) || (KMEMCHECK_PARTIAL_OK => (HAVE_ARCH_KMEMCHECK && KMEMCHECK))
(HAVE_ARCH_KMEMCHECK && KMEMCHECK) || ((HAVE_ARCH_KMEMCHECK && KMEMCHECK) => KMEMCHECK_PARTIAL_OK)
(HAVE_ARCH_KMEMCHECK && KMEMCHECK) || ~KMEMCHECK_BITOPS_OK
(HAVE_ARCH_KMEMCHECK && (DEBUG_KERNEL && (~X86_USE_3DNOW && ((SLUB || SLAB) && (~CC_OPTIMIZE_FOR_SIZE && ~FUNCTION_TRACER))))) || ~KMEMCHECK
(EARLY_PRINTK && PCI) || ~EARLY_PRINTK_DBGP
EMBEDDED || EARLY_PRINTK
DEBUG_KERNEL || ~DEBUG_STACKOVERFLOW
DEBUG_KERNEL || ~DEBUG_STACK_USAGE
(DEBUG_KERNEL && SMP) || ~DEBUG_PER_CPU_MAPS
DEBUG_KERNEL || ~X86_PTDUMP
DEBUG_RODATA || (DEBUG_RODATA_TEST => DEBUG_RODATA)
DEBUG_RODATA || (DEBUG_RODATA => DEBUG_RODATA_TEST)
DEBUG_KERNEL || (DEBUG_RODATA => DEBUG_KERNEL)
DEBUG_KERNEL || (DEBUG_KERNEL => DEBUG_RODATA)
DEBUG_KERNEL || ~DEBUG_NX_TEST
X86_32 || ~c4KSTACKS
(X86_32 && EMBEDDED) || (DOUBLEFAULT => X86_32)
(X86_32 && EMBEDDED) || (X86_32 => DOUBLEFAULT)
(GART_IOMMU && (DEBUG_KERNEL && X86_64)) || ~IOMMU_DEBUG
(IOMMU_DEBUG && DMA_API_DEBUG) || ~IOMMU_LEAK
(DEBUG_KERNEL && X86_DS) || (X86_DS_SELFTEST => (DEBUG_KERNEL && X86_DS))
(DEBUG_KERNEL && X86_DS) || ((DEBUG_KERNEL && X86_DS) => X86_DS_SELFTEST)
HAVE_MMIOTRACE_SUPPORT
~IO_DELAY_TYPE_0X80
~IO_DELAY_TYPE_0XED
~IO_DELAY_TYPE_UDELAY
~IO_DELAY_TYPE_NONE
DEFAULT_IO_DELAY_TYPE => ((((IO_DELAY_0X80 && IO_DELAY_TYPE_0X80) || ((~IO_DELAY_0X80 && IO_DELAY_0XED) && IO_DELAY_TYPE_0XED)) || (((~IO_DELAY_0XED && ~IO_DELAY_0X80) && IO_DELAY_UDELAY) && IO_DELAY_TYPE_UDELAY)) || ((((~IO_DELAY_UDELAY && ~IO_DELAY_0XED) && ~IO_DELAY_0X80) && IO_DELAY_NONE) && IO_DELAY_TYPE_NONE))
(IO_DELAY_0X80 && IO_DELAY_TYPE_0X80) => DEFAULT_IO_DELAY_TYPE
((~IO_DELAY_0X80 && IO_DELAY_0XED) && IO_DELAY_TYPE_0XED) => DEFAULT_IO_DELAY_TYPE
(((~IO_DELAY_0XED && ~IO_DELAY_0X80) && IO_DELAY_UDELAY) && IO_DELAY_TYPE_UDELAY) => DEFAULT_IO_DELAY_TYPE
((((~IO_DELAY_UDELAY && ~IO_DELAY_0XED) && ~IO_DELAY_0X80) && IO_DELAY_NONE) && IO_DELAY_TYPE_NONE) => DEFAULT_IO_DELAY_TYPE
DEBUG_KERNEL || ~CPA_DEBUG
KEYS || ~KEYS_DEBUG_PROC_KEYS
SYSFS || ~SECURITY
(XFRM && SECURITY_NETWORK) || ~SECURITY_NETWORK_XFRM
SECURITY || ~SECURITY_NETWORK
SECURITY || (SECURITY_PATH => (SECURITY_TOMOYO && SECURITY))
SECURITY || ((SECURITY_TOMOYO && SECURITY) => SECURITY_PATH)
(USB && SECURITY) || ~SECURITY_ROOTPLUG
HAVE_INTEL_TXT || ~INTEL_TXT
(SECURITY && SECURITY_SELINUX) || ~LSM_MMAP_MIN_ADDR
SECURITY_SELINUX_BOOTPARAM || ~SECURITY_SELINUX_BOOTPARAM_VALUE
SECURITY_SELINUX || ~SECURITY_SELINUX_BOOTPARAM
SECURITY_SELINUX || ~SECURITY_SELINUX_DISABLE
SECURITY_SELINUX || (SECURITY_SELINUX_DEVELOP => SECURITY_SELINUX)
SECURITY_SELINUX || (SECURITY_SELINUX => SECURITY_SELINUX_DEVELOP)
SECURITY_SELINUX || (SECURITY_SELINUX_AVC_STATS => SECURITY_SELINUX)
SECURITY_SELINUX || (SECURITY_SELINUX => SECURITY_SELINUX_AVC_STATS)
SECURITY_SELINUX || ~SECURITY_SELINUX_CHECKREQPROT_VALUE
SECURITY_SELINUX_POLICYDB_VERSION_MAX || ~SECURITY_SELINUX_POLICYDB_VERSION_MAX_VALUE
SECURITY_SELINUX || ~SECURITY_SELINUX_POLICYDB_VERSION_MAX
(SECURITY_NETWORK && (AUDIT && (NET && INET))) || ~SECURITY_SELINUX
(NETLABEL && SECURITY_NETWORK) || ~SECURITY_SMACK
SECURITY || ~SECURITY_TOMOYO
~IMA_MEASURE_PCR_IDX
IMA_AUDIT => IMA
IMA => IMA_AUDIT
IMA_LSM_RULES => (IMA && (AUDIT && (SECURITY_SELINUX || SECURITY_SMACK)))
(IMA && (AUDIT && (SECURITY_SELINUX || SECURITY_SMACK))) => IMA_LSM_RULES
ACPI || ~IMA
XOR_BLOCKS => ASYNC_XOR
ASYNC_XOR => XOR_BLOCKS
ASYNC_CORE => ((((ASYNC_MEMCPY || ASYNC_PQ) || ASYNC_RAID6_RECOV) || ASYNC_MEMSET) || ASYNC_XOR)
ASYNC_MEMCPY => ASYNC_CORE
ASYNC_PQ => ASYNC_CORE
ASYNC_RAID6_RECOV => ASYNC_CORE
ASYNC_MEMSET => ASYNC_CORE
ASYNC_XOR => ASYNC_CORE
ASYNC_MEMCPY => (MD_RAID456 && (MD && BLK_DEV_MD))
(MD_RAID456 && (MD && BLK_DEV_MD)) => ASYNC_MEMCPY
ASYNC_XOR => (MD_RAID456 && (MD && BLK_DEV_MD))
(MD_RAID456 && (MD && BLK_DEV_MD)) => ASYNC_XOR
~ASYNC_MEMSET
ASYNC_PQ => (ASYNC_RAID6_RECOV || (MD_RAID456 && (MD && BLK_DEV_MD)))
ASYNC_RAID6_RECOV => ASYNC_PQ
(MD_RAID456 && (MD && BLK_DEV_MD)) => ASYNC_PQ
ASYNC_RAID6_RECOV => ((ASYNC_RAID6_TEST && (MD && MD_RAID6_PQ)) || (MD_RAID456 && (MD && BLK_DEV_MD)))
(ASYNC_RAID6_TEST && (MD && MD_RAID6_PQ)) => ASYNC_RAID6_RECOV
(MD_RAID456 && (MD && BLK_DEV_MD)) => ASYNC_RAID6_RECOV
ASYNC_TX_DISABLE_PQ_VAL_DMA => (INTEL_IOATDMA && (DMADEVICES && (PCI && X86)))
(INTEL_IOATDMA && (DMADEVICES && (PCI && X86))) => ASYNC_TX_DISABLE_PQ_VAL_DMA
ASYNC_TX_DISABLE_XOR_VAL_DMA => (INTEL_IOATDMA && (DMADEVICES && (PCI && X86)))
(INTEL_IOATDMA && (DMADEVICES && (PCI && X86))) => ASYNC_TX_DISABLE_XOR_VAL_DMA
(CRYPTO && CRYPTO_ANSI_CPRNG) || ~CRYPTO_FIPS
CRYPTO_ALGAPI => ((((((((((((((((((((((((((((((((((CRYPTO_BLKCIPHER && CRYPTO) || (CRYPTO_RNG && CRYPTO)) || (CRYPTO_FCRYPT && CRYPTO)) || (CRYPTO_AES && CRYPTO)) || (CRYPTO_AES_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT)))) || (CRYPTO_TWOFISH_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT)))) || (CRYPTO_NULL && CRYPTO)) || (CRYPTO_DEV_GEODE && (CRYPTO && (CRYPTO_HW && (X86_32 && PCI))))) || (CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI)))) || (CRYPTO_CAMELLIA && CRYPTO)) || (CRYPTO_HASH && CRYPTO)) || (CRYPTO_ANUBIS && CRYPTO)) || (CRYPTO_TWOFISH && CRYPTO)) || (CRYPTO_AES_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT)))) || (CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX)))) || (CRYPTO_SERPENT && CRYPTO)) || (CRYPTO_CAST5 && CRYPTO)) || (CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT)))) || (CRYPTO_BLOWFISH && CRYPTO)) || (CRYPTO_SEED && CRYPTO)) || (CRYPTO_AES_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx))))) || (CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION)))) || (CRYPTO_TWOFISH_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT)))) || (CRYPTO_DEV_TALITOS && (CRYPTO && (CRYPTO_HW && FSL_SOC)))) || (CRYPTO_ARC4 && CRYPTO)) || (CRYPTO_TEA && CRYPTO)) || (CRYPTO_DES_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_KHAZAD && CRYPTO)) || (CRYPTO_LZO && CRYPTO)) || (CRYPTO_CAST6 && CRYPTO)) || (CRYPTO_AEAD && CRYPTO)) || (CRYPTO_DES && CRYPTO)) || (CRYPTO_DEFLATE && CRYPTO))
(CRYPTO_BLKCIPHER && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_RNG && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_FCRYPT && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AES && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AES_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_ALGAPI
(CRYPTO_TWOFISH_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_ALGAPI
(CRYPTO_NULL && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_DEV_GEODE && (CRYPTO && (CRYPTO_HW && (X86_32 && PCI)))) => CRYPTO_ALGAPI
(CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI))) => CRYPTO_ALGAPI
(CRYPTO_CAMELLIA && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_HASH && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_ANUBIS && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_TWOFISH && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AES_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT))) => CRYPTO_ALGAPI
(CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX))) => CRYPTO_ALGAPI
(CRYPTO_SERPENT && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_CAST5 && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_ALGAPI
(CRYPTO_BLOWFISH && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_SEED && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AES_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_ALGAPI
(CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx)))) => CRYPTO_ALGAPI
(CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION))) => CRYPTO_ALGAPI
(CRYPTO_TWOFISH_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT))) => CRYPTO_ALGAPI
(CRYPTO_DEV_TALITOS && (CRYPTO && (CRYPTO_HW && FSL_SOC))) => CRYPTO_ALGAPI
(CRYPTO_ARC4 && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_TEA && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_DES_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_ALGAPI
(CRYPTO_KHAZAD && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_LZO && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_CAST6 && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_AEAD && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_DES && CRYPTO) => CRYPTO_ALGAPI
(CRYPTO_DEFLATE && CRYPTO) => CRYPTO_ALGAPI
CRYPTO_ALGAPI2 => ((((((CRYPTO_RNG2 && CRYPTO) || (CRYPTO_AEAD2 && CRYPTO)) || (CRYPTO_PCOMP && CRYPTO)) || (CRYPTO_ALGAPI && CRYPTO)) || (CRYPTO_HASH2 && CRYPTO)) || (CRYPTO_BLKCIPHER2 && CRYPTO))
(CRYPTO_RNG2 && CRYPTO) => CRYPTO_ALGAPI2
(CRYPTO_AEAD2 && CRYPTO) => CRYPTO_ALGAPI2
(CRYPTO_PCOMP && CRYPTO) => CRYPTO_ALGAPI2
(CRYPTO_ALGAPI && CRYPTO) => CRYPTO_ALGAPI2
(CRYPTO_HASH2 && CRYPTO) => CRYPTO_ALGAPI2
(CRYPTO_BLKCIPHER2 && CRYPTO) => CRYPTO_ALGAPI2
CRYPTO_AEAD => ((((CRYPTO_CCM && CRYPTO) || (CRYPTO_AUTHENC && CRYPTO)) || (CRYPTO_GCM && CRYPTO)) || (CRYPTO_SEQIV && CRYPTO))
(CRYPTO_CCM && CRYPTO) => CRYPTO_AEAD
(CRYPTO_AUTHENC && CRYPTO) => CRYPTO_AEAD
(CRYPTO_GCM && CRYPTO) => CRYPTO_AEAD
(CRYPTO_SEQIV && CRYPTO) => CRYPTO_AEAD
CRYPTO_AEAD2 => ((CRYPTO_AEAD && CRYPTO) || (CRYPTO_MANAGER2 && CRYPTO))
(CRYPTO_AEAD && CRYPTO) => CRYPTO_AEAD2
(CRYPTO_MANAGER2 && CRYPTO) => CRYPTO_AEAD2
CRYPTO_BLKCIPHER => ((((((((((((((((((((((((((CRYPTO_SALSA20_586 && (CRYPTO && ((X86 || UML_X86) && (~c64BIT && EXPERIMENTAL)))) || (CRYPTO_CTR && CRYPTO)) || (CRYPTO_LRW && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_FCRYPT && CRYPTO)) || (CRYPTO_DES_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_SEQIV && CRYPTO)) || (CRYPTO_CRYPTD && CRYPTO)) || (POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET)))) || (CRYPTO_ECB && CRYPTO)) || (CRYPTO_AUTHENC && CRYPTO)) || (CRYPTO_CTS && CRYPTO)) || (CRYPTO_XTS && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_NULL && CRYPTO)) || (CRYPTO_SALSA20_X86_64 && (CRYPTO && ((X86 || UML_X86) && (c64BIT && EXPERIMENTAL))))) || (CRYPTO_DEV_PADLOCK_AES && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)))) || (CRYPTO_DEV_GEODE && (CRYPTO && (CRYPTO_HW && (X86_32 && PCI))))) || (RXKAD && (NET && AF_RXRPC))) || (CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI)))) || (CRYPTO_SALSA20 && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX)))) || (CRYPTO_AES_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_FPU && CRYPTO)) || (CRYPTO_CBC && CRYPTO)) || (CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx))))) || (USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB)))) || (CRYPTO_PCBC && CRYPTO))
(CRYPTO_SALSA20_586 && (CRYPTO && ((X86 || UML_X86) && (~c64BIT && EXPERIMENTAL)))) => CRYPTO_BLKCIPHER
(CRYPTO_CTR && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_LRW && (CRYPTO && EXPERIMENTAL)) => CRYPTO_BLKCIPHER
(CRYPTO_FCRYPT && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_DES_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_BLKCIPHER
(CRYPTO_SEQIV && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_CRYPTD && CRYPTO) => CRYPTO_BLKCIPHER
(POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET))) => CRYPTO_BLKCIPHER
(CRYPTO_ECB && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_AUTHENC && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_CTS && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_XTS && (CRYPTO && EXPERIMENTAL)) => CRYPTO_BLKCIPHER
(CRYPTO_NULL && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_SALSA20_X86_64 && (CRYPTO && ((X86 || UML_X86) && (c64BIT && EXPERIMENTAL)))) => CRYPTO_BLKCIPHER
(CRYPTO_DEV_PADLOCK_AES && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))) => CRYPTO_BLKCIPHER
(CRYPTO_DEV_GEODE && (CRYPTO && (CRYPTO_HW && (X86_32 && PCI)))) => CRYPTO_BLKCIPHER
(RXKAD && (NET && AF_RXRPC)) => CRYPTO_BLKCIPHER
(CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI))) => CRYPTO_BLKCIPHER
(CRYPTO_SALSA20 && (CRYPTO && EXPERIMENTAL)) => CRYPTO_BLKCIPHER
(CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX))) => CRYPTO_BLKCIPHER
(CRYPTO_AES_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_BLKCIPHER
(CRYPTO_FPU && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_CBC && CRYPTO) => CRYPTO_BLKCIPHER
(CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx)))) => CRYPTO_BLKCIPHER
(USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))) => CRYPTO_BLKCIPHER
(CRYPTO_PCBC && CRYPTO) => CRYPTO_BLKCIPHER
CRYPTO_BLKCIPHER2 => (((CRYPTO_BLKCIPHER && CRYPTO) || (CRYPTO_MANAGER2 && CRYPTO)) || (CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION))))
(CRYPTO_BLKCIPHER && CRYPTO) => CRYPTO_BLKCIPHER2
(CRYPTO_MANAGER2 && CRYPTO) => CRYPTO_BLKCIPHER2
(CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION))) => CRYPTO_BLKCIPHER2
CRYPTO_HASH => (((((((((((((((((((((((((CRYPTO_TGR192 && CRYPTO) || (CRYPTO_CRC32C_INTEL && (CRYPTO && X86))) || (CRYPTO_CRYPTD && CRYPTO)) || (CRYPTO_VMAC && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_MD4 && CRYPTO)) || (CRYPTO_MD5 && CRYPTO)) || (CRYPTO_SHA1 && CRYPTO)) || (CRYPTO_SHA1_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_AUTHENC && CRYPTO)) || (CRYPTO_NULL && CRYPTO)) || (CRYPTO_XCBC && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_RMD160 && CRYPTO)) || (CRYPTO_SHA256_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_MICHAEL_MIC && CRYPTO)) || (CRYPTO_RMD256 && CRYPTO)) || (CRYPTO_SHA512_S390 && (CRYPTO && (CRYPTO_HW && S390)))) || (CRYPTO_RMD128 && CRYPTO)) || (CRYPTO_HMAC && CRYPTO)) || (CRYPTO_RMD320 && CRYPTO)) || (CRYPTO_SHA256 && CRYPTO)) || (CRYPTO_CRC32C && CRYPTO)) || (CRYPTO_SHA512 && CRYPTO)) || (CRYPTO_WP512 && CRYPTO)) || (CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)))) || (CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx)))))
(CRYPTO_TGR192 && CRYPTO) => CRYPTO_HASH
(CRYPTO_CRC32C_INTEL && (CRYPTO && X86)) => CRYPTO_HASH
(CRYPTO_CRYPTD && CRYPTO) => CRYPTO_HASH
(CRYPTO_VMAC && (CRYPTO && EXPERIMENTAL)) => CRYPTO_HASH
(CRYPTO_MD4 && CRYPTO) => CRYPTO_HASH
(CRYPTO_MD5 && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA1 && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA1_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_HASH
(CRYPTO_AUTHENC && CRYPTO) => CRYPTO_HASH
(CRYPTO_NULL && CRYPTO) => CRYPTO_HASH
(CRYPTO_XCBC && (CRYPTO && EXPERIMENTAL)) => CRYPTO_HASH
(CRYPTO_RMD160 && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA256_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_HASH
(CRYPTO_MICHAEL_MIC && CRYPTO) => CRYPTO_HASH
(CRYPTO_RMD256 && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA512_S390 && (CRYPTO && (CRYPTO_HW && S390))) => CRYPTO_HASH
(CRYPTO_RMD128 && CRYPTO) => CRYPTO_HASH
(CRYPTO_HMAC && CRYPTO) => CRYPTO_HASH
(CRYPTO_RMD320 && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA256 && CRYPTO) => CRYPTO_HASH
(CRYPTO_CRC32C && CRYPTO) => CRYPTO_HASH
(CRYPTO_SHA512 && CRYPTO) => CRYPTO_HASH
(CRYPTO_WP512 && CRYPTO) => CRYPTO_HASH
(CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))) => CRYPTO_HASH
(CRYPTO_DEV_PPC4XX && (CRYPTO && (CRYPTO_HW && (PPC && c4xx)))) => CRYPTO_HASH
CRYPTO_HASH2 => ((CRYPTO_HASH && CRYPTO) || (CRYPTO_MANAGER2 && CRYPTO))
(CRYPTO_HASH && CRYPTO) => CRYPTO_HASH2
(CRYPTO_MANAGER2 && CRYPTO) => CRYPTO_HASH2
CRYPTO_RNG => ((CRYPTO_ANSI_CPRNG && CRYPTO) || (CRYPTO_SEQIV && CRYPTO))
(CRYPTO_ANSI_CPRNG && CRYPTO) => CRYPTO_RNG
(CRYPTO_SEQIV && CRYPTO) => CRYPTO_RNG
CRYPTO_RNG2 => ((CRYPTO_RNG && CRYPTO) || (CRYPTO_BLKCIPHER2 && CRYPTO))
(CRYPTO_RNG && CRYPTO) => CRYPTO_RNG2
(CRYPTO_BLKCIPHER2 && CRYPTO) => CRYPTO_RNG2
CRYPTO_PCOMP => ((CRYPTO_ZLIB && CRYPTO) || (CRYPTO_MANAGER2 && CRYPTO))
(CRYPTO_ZLIB && CRYPTO) => CRYPTO_PCOMP
(CRYPTO_MANAGER2 && CRYPTO) => CRYPTO_PCOMP
CRYPTO || (CRYPTO_MANAGER => (((((((((((((((CRYPTO_CTR && CRYPTO) || (CRYPTO_LRW && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_CRYPTD && CRYPTO)) || (CRYPTO_VMAC && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_ECB && CRYPTO)) || (CRYPTO_AUTHENC && CRYPTO)) || (CRYPTO_XTS && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_XCBC && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_TEST && CRYPTO)) || (RXKAD && (NET && AF_RXRPC))) || (CRYPTO_HMAC && CRYPTO)) || (CRYPTO_FPU && CRYPTO)) || (CRYPTO_CBC && CRYPTO)) || (USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB)))) || (CRYPTO_PCBC && CRYPTO)))
CRYPTO || ((CRYPTO_CTR && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_LRW && (CRYPTO && EXPERIMENTAL)) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_CRYPTD && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_VMAC && (CRYPTO && EXPERIMENTAL)) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_ECB && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_AUTHENC && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_XTS && (CRYPTO && EXPERIMENTAL)) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_XCBC && (CRYPTO && EXPERIMENTAL)) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_TEST && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((RXKAD && (NET && AF_RXRPC)) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_HMAC && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_FPU && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_CBC && CRYPTO) => CRYPTO_MANAGER)
CRYPTO || ((USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))) => CRYPTO_MANAGER)
CRYPTO || ((CRYPTO_PCBC && CRYPTO) => CRYPTO_MANAGER)
CRYPTO_MANAGER2 => ((CRYPTO_MANAGER && CRYPTO) || (CRYPTO && (CRYPTO_MANAGER || (CRYPTO_MANAGER && CRYPTO_ALGAPI))))
(CRYPTO_MANAGER && CRYPTO) => CRYPTO_MANAGER2
(CRYPTO && EXPERIMENTAL) || (CRYPTO_GF128MUL => (((CRYPTO_XTS && (CRYPTO && EXPERIMENTAL)) || (CRYPTO_LRW && (CRYPTO && EXPERIMENTAL))) || (CRYPTO_GHASH && CRYPTO)))
(CRYPTO && EXPERIMENTAL) || ((CRYPTO_XTS && (CRYPTO && EXPERIMENTAL)) => CRYPTO_GF128MUL)
(CRYPTO && EXPERIMENTAL) || ((CRYPTO_LRW && (CRYPTO && EXPERIMENTAL)) => CRYPTO_GF128MUL)
(CRYPTO && EXPERIMENTAL) || ((CRYPTO_GHASH && CRYPTO) => CRYPTO_GF128MUL)
CRYPTO || ~CRYPTO_NULL
CRYPTO_WORKQUEUE => ((CRYPTO_BLKCIPHER2 && CRYPTO) || (CRYPTO_CRYPTD && CRYPTO))
(CRYPTO_BLKCIPHER2 && CRYPTO) => CRYPTO_WORKQUEUE
(CRYPTO_CRYPTD && CRYPTO) => CRYPTO_WORKQUEUE
CRYPTO || (CRYPTO_CRYPTD => (CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))))
CRYPTO || ((CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_CRYPTD)
CRYPTO || (CRYPTO_AUTHENC => ((((CRYPTO_DEV_TALITOS && (CRYPTO && (CRYPTO_HW && FSL_SOC))) || (INET6_ESP && (NET && (INET && IPV6)))) || (CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX)))) || (INET_ESP && (NET && INET))))
CRYPTO || ((CRYPTO_DEV_TALITOS && (CRYPTO && (CRYPTO_HW && FSL_SOC))) => CRYPTO_AUTHENC)
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_AUTHENC)
CRYPTO || ((CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX))) => CRYPTO_AUTHENC)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_AUTHENC)
CRYPTO || ~CRYPTO_TEST
CRYPTO || ~CRYPTO_CCM
CRYPTO || ~CRYPTO_GCM
CRYPTO || (CRYPTO_SEQIV => (CRYPTO_CTR && CRYPTO))
CRYPTO || ((CRYPTO_CTR && CRYPTO) => CRYPTO_SEQIV)
CRYPTO || (CRYPTO_CBC => ((((((((DM_CRYPT && (MD && BLK_DEV_DM)) || (ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO))))) || (INET6_ESP && (NET && (INET && IPV6)))) || (BLK_DEV_CRYPTOLOOP && (BLK_DEV && BLK_DEV_LOOP))) || (RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB)))) || (INET_ESP && (NET && INET))))
CRYPTO || ((DM_CRYPT && (MD && BLK_DEV_DM)) => CRYPTO_CBC)
CRYPTO || ((ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO)))) => CRYPTO_CBC)
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_CBC)
CRYPTO || ((BLK_DEV_CRYPTOLOOP && (BLK_DEV && BLK_DEV_LOOP)) => CRYPTO_CBC)
CRYPTO || ((RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_CBC)
CRYPTO || ((RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_CBC)
CRYPTO || ((USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))) => CRYPTO_CBC)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_CBC)
CRYPTO || (CRYPTO_CTR => ((CRYPTO_CCM && CRYPTO) || (CRYPTO_GCM && CRYPTO)))
CRYPTO || ((CRYPTO_CCM && CRYPTO) => CRYPTO_CTR)
CRYPTO || ((CRYPTO_GCM && CRYPTO) => CRYPTO_CTR)
CRYPTO || ~CRYPTO_CTS
CRYPTO || (CRYPTO_ECB => (((((ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO)))) || (HOSTAP && (NETDEVICES && (WLAN && WLAN_80211)))) || (PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL)))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (MAC80211 && (NET && (WIRELESS && CFG80211)))))
CRYPTO || ((ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO)))) => CRYPTO_ECB)
CRYPTO || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => CRYPTO_ECB)
CRYPTO || ((PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL))) => CRYPTO_ECB)
CRYPTO || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => CRYPTO_ECB)
CRYPTO || ((MAC80211 && (NET && (WIRELESS && CFG80211))) => CRYPTO_ECB)
(CRYPTO && EXPERIMENTAL) || ~CRYPTO_LRW
CRYPTO || (CRYPTO_PCBC => (RXKAD && (NET && AF_RXRPC)))
CRYPTO || ((RXKAD && (NET && AF_RXRPC)) => CRYPTO_PCBC)
(CRYPTO && EXPERIMENTAL) || ~CRYPTO_XTS
CRYPTO_FPU => (CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT)))
(CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_FPU
CRYPTO || (CRYPTO_HMAC => (((((((INET_AH && (NET && INET)) || (POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET)))) || (IP_SCTP && (NET && (INET && (EXPERIMENTAL && (IPV6 || ~IPV6)))))) || (INET6_ESP && (NET && (INET && IPV6)))) || (IMA && ACPI)) || (INET_ESP && (NET && INET))) || (INET6_AH && (NET && (INET && IPV6)))))
CRYPTO || ((INET_AH && (NET && INET)) => CRYPTO_HMAC)
CRYPTO || ((POHMELFS && (STAGING && (~STAGING_EXCLUDE_BUILD && NET))) => CRYPTO_HMAC)
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_HMAC)
CRYPTO || ((IMA && ACPI) => CRYPTO_HMAC)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_HMAC)
CRYPTO || ((INET6_AH && (NET && (INET && IPV6))) => CRYPTO_HMAC)
(CRYPTO && EXPERIMENTAL) || ~CRYPTO_XCBC
(CRYPTO && EXPERIMENTAL) || ~CRYPTO_VMAC
CRYPTO || (CRYPTO_CRC32C => (LIBCRC32C || (ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET)))))
CRYPTO || (LIBCRC32C => CRYPTO_CRC32C)
CRYPTO || ((ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET))) => CRYPTO_CRC32C)
(CRYPTO && X86) || ~CRYPTO_CRC32C_INTEL
CRYPTO || (CRYPTO_GHASH => (CRYPTO_GCM && CRYPTO))
CRYPTO || ((CRYPTO_GCM && CRYPTO) => CRYPTO_GHASH)
CRYPTO || ~CRYPTO_MD4
CRYPTO || (CRYPTO_MD5 => (((((((((((INET_AH && (NET && INET)) || (TCP_MD5SIG && (NET && (INET && EXPERIMENTAL)))) || (ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET)))) || (ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO))))) || (INET6_ESP && (NET && (INET && IPV6)))) || (IP_SCTP && (NET && (INET && (EXPERIMENTAL && ((IPV6 || ~IPV6) && SCTP_HMAC_MD5)))))) || (IMA && ACPI)) || (RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (INET_ESP && (NET && INET))) || (INET6_AH && (NET && (INET && IPV6)))))
CRYPTO || ((INET_AH && (NET && INET)) => CRYPTO_MD5)
CRYPTO || ((TCP_MD5SIG && (NET && (INET && EXPERIMENTAL))) => CRYPTO_MD5)
CRYPTO || ((ISCSI_TCP && (SCSI_LOWLEVEL && (SCSI && INET))) => CRYPTO_MD5)
CRYPTO || ((ECRYPT_FS && (MISC_FILESYSTEMS && (EXPERIMENTAL && (KEYS && CRYPTO)))) => CRYPTO_MD5)
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_MD5)
CRYPTO || ((IMA && ACPI) => CRYPTO_MD5)
CRYPTO || ((RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_MD5)
CRYPTO || ((RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_MD5)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_MD5)
CRYPTO || ((INET6_AH && (NET && (INET && IPV6))) => CRYPTO_MD5)
CRYPTO || (CRYPTO_MICHAEL_MIC => (((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) || (HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211)))))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))))
CRYPTO || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => CRYPTO_MICHAEL_MIC)
CRYPTO || ((HERMES && (NETDEVICES && (WLAN && ((PPC_PMAC || (PCI || PCMCIA)) && (WLAN_80211 && CFG80211))))) => CRYPTO_MICHAEL_MIC)
CRYPTO || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => CRYPTO_MICHAEL_MIC)
CRYPTO || ~CRYPTO_RMD128
CRYPTO || ~CRYPTO_RMD160
CRYPTO || ~CRYPTO_RMD256
CRYPTO || ~CRYPTO_RMD320
CRYPTO || (CRYPTO_SHA1 => ((((((((INET_AH && (NET && INET)) || (IP_SCTP && (NET && (INET && (EXPERIMENTAL && (IPV6 || ~IPV6)))))) || (INET6_ESP && (NET && (INET && IPV6)))) || (CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)))) || (IMA && ACPI)) || (PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL)))) || (INET_ESP && (NET && INET))) || (INET6_AH && (NET && (INET && IPV6)))))
CRYPTO || ((INET_AH && (NET && INET)) => CRYPTO_SHA1)
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_SHA1)
CRYPTO || ((CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))) => CRYPTO_SHA1)
CRYPTO || ((IMA && ACPI) => CRYPTO_SHA1)
CRYPTO || ((PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL))) => CRYPTO_SHA1)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_SHA1)
CRYPTO || ((INET6_AH && (NET && (INET && IPV6))) => CRYPTO_SHA1)
CRYPTO || (CRYPTO_SHA256 => (CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))))
CRYPTO || ((CRYPTO_DEV_PADLOCK_SHA && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))) => CRYPTO_SHA256)
CRYPTO || ~CRYPTO_SHA512
CRYPTO || ~CRYPTO_TGR192
CRYPTO || ~CRYPTO_WP512
CRYPTO || (CRYPTO_AES => ((((((((((AIRO_CS && (NETDEVICES && (WLAN && (PCMCIA && ((BROKEN || ~M32R) && WLAN_80211))))) || (CRYPTO_AES_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT)))) || (CRYPTO_ANSI_CPRNG && CRYPTO)) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (MAC80211 && (NET && (WIRELESS && CFG80211)))) || (CRYPTO_AES_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT)))) || (HOSTAP && (NETDEVICES && (WLAN && WLAN_80211)))) || (USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB)))) || (CRYPTO_DEV_PADLOCK_AES && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)))) || (CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION)))))
CRYPTO || ((AIRO_CS && (NETDEVICES && (WLAN && (PCMCIA && ((BROKEN || ~M32R) && WLAN_80211))))) => CRYPTO_AES)
CRYPTO || ((CRYPTO_AES_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT))) => CRYPTO_AES)
CRYPTO || ((CRYPTO_ANSI_CPRNG && CRYPTO) => CRYPTO_AES)
CRYPTO || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => CRYPTO_AES)
CRYPTO || ((MAC80211 && (NET && (WIRELESS && CFG80211))) => CRYPTO_AES)
CRYPTO || ((CRYPTO_AES_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_AES)
CRYPTO || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => CRYPTO_AES)
CRYPTO || ((USB_WUSB && (USB_SUPPORT && (EXPERIMENTAL && USB))) => CRYPTO_AES)
CRYPTO || ((CRYPTO_DEV_PADLOCK_AES && (CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK))) => CRYPTO_AES)
CRYPTO || ((CRYPTO_DEV_MV_CESA && (CRYPTO && (CRYPTO_HW && PLAT_ORION))) => CRYPTO_AES)
(CRYPTO && ((X86 || UML_X86) && ~c64BIT)) || ~CRYPTO_AES_586
(CRYPTO && ((X86 || UML_X86) && c64BIT)) || (CRYPTO_AES_X86_64 => (CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))))
(CRYPTO && ((X86 || UML_X86) && c64BIT)) || ((CRYPTO_AES_NI_INTEL && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_AES_X86_64)
(CRYPTO && ((X86 || UML_X86) && c64BIT)) || ~CRYPTO_AES_NI_INTEL
CRYPTO || ~CRYPTO_ANUBIS
CRYPTO || (CRYPTO_ARC4 => ((((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) || (PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL)))) || (LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211)))))) || (MAC80211 && (NET && (WIRELESS && CFG80211)))))
CRYPTO || ((HOSTAP && (NETDEVICES && (WLAN && WLAN_80211))) => CRYPTO_ARC4)
CRYPTO || ((PPP_MPPE && (NETDEVICES && (PPP && EXPERIMENTAL))) => CRYPTO_ARC4)
CRYPTO || ((LIBIPW && (NETDEVICES && (WLAN && (PCI && (WLAN_80211 && CFG80211))))) => CRYPTO_ARC4)
CRYPTO || ((MAC80211 && (NET && (WIRELESS && CFG80211))) => CRYPTO_ARC4)
CRYPTO || ~CRYPTO_BLOWFISH
CRYPTO || ~CRYPTO_CAMELLIA
CRYPTO || (CRYPTO_CAST5 => (RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))))
CRYPTO || ((RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_CAST5)
CRYPTO || ~CRYPTO_CAST6
CRYPTO || (CRYPTO_DES => ((((((INET6_ESP && (NET && (INET && IPV6))) || (CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX)))) || (RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL)))) || (INET_ESP && (NET && INET))) || (CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI)))))
CRYPTO || ((INET6_ESP && (NET && (INET && IPV6))) => CRYPTO_DES)
CRYPTO || ((CRYPTO_DEV_IXP4XX && (CRYPTO && (CRYPTO_HW && ARCH_IXP4XX))) => CRYPTO_DES)
CRYPTO || ((RPCSEC_GSS_SPKM3 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_DES)
CRYPTO || ((RPCSEC_GSS_KRB5 && (NETWORK_FILESYSTEMS && (SUNRPC && EXPERIMENTAL))) => CRYPTO_DES)
CRYPTO || ((INET_ESP && (NET && INET)) => CRYPTO_DES)
CRYPTO || ((CRYPTO_DEV_HIFN_795X && (CRYPTO && (CRYPTO_HW && PCI))) => CRYPTO_DES)
CRYPTO || (CRYPTO_FCRYPT => (RXKAD && (NET && AF_RXRPC)))
CRYPTO || ((RXKAD && (NET && AF_RXRPC)) => CRYPTO_FCRYPT)
CRYPTO || ~CRYPTO_KHAZAD
(CRYPTO && EXPERIMENTAL) || ~CRYPTO_SALSA20
(CRYPTO && ((X86 || UML_X86) && (~c64BIT && EXPERIMENTAL))) || ~CRYPTO_SALSA20_586
(CRYPTO && ((X86 || UML_X86) && (c64BIT && EXPERIMENTAL))) || ~CRYPTO_SALSA20_X86_64
CRYPTO || ~CRYPTO_SEED
CRYPTO || ~CRYPTO_SERPENT
CRYPTO || ~CRYPTO_TEA
CRYPTO || ~CRYPTO_TWOFISH
CRYPTO_TWOFISH_COMMON => (((CRYPTO_TWOFISH_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT))) || (CRYPTO_TWOFISH && CRYPTO)) || (CRYPTO_TWOFISH_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT))))
(CRYPTO_TWOFISH_586 && (CRYPTO && ((X86 || UML_X86) && ~c64BIT))) => CRYPTO_TWOFISH_COMMON
(CRYPTO_TWOFISH && CRYPTO) => CRYPTO_TWOFISH_COMMON
(CRYPTO_TWOFISH_X86_64 && (CRYPTO && ((X86 || UML_X86) && c64BIT))) => CRYPTO_TWOFISH_COMMON
(CRYPTO && ((X86 || UML_X86) && ~c64BIT)) || ~CRYPTO_TWOFISH_586
(CRYPTO && ((X86 || UML_X86) && c64BIT)) || ~CRYPTO_TWOFISH_X86_64
CRYPTO || (CRYPTO_DEFLATE => ((UBIFS_FS && (MISC_FILESYSTEMS && (MTD_UBI && UBIFS_FS_ZLIB))) || (XFRM_IPCOMP && NET)))
CRYPTO || ((UBIFS_FS && (MISC_FILESYSTEMS && (MTD_UBI && UBIFS_FS_ZLIB))) => CRYPTO_DEFLATE)
CRYPTO || ((XFRM_IPCOMP && NET) => CRYPTO_DEFLATE)
CRYPTO || ~CRYPTO_ZLIB
CRYPTO || (CRYPTO_LZO => (UBIFS_FS && (MISC_FILESYSTEMS && (MTD_UBI && UBIFS_FS_LZO))))
CRYPTO || ((UBIFS_FS && (MISC_FILESYSTEMS && (MTD_UBI && UBIFS_FS_LZO))) => CRYPTO_LZO)
CRYPTO || (CRYPTO_ANSI_CPRNG => CRYPTO)
CRYPTO || (CRYPTO => CRYPTO_ANSI_CPRNG)
(CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)) || ~CRYPTO_DEV_PADLOCK_AES
(CRYPTO && (CRYPTO_HW && CRYPTO_DEV_PADLOCK)) || ~CRYPTO_DEV_PADLOCK_SHA
(CRYPTO && (CRYPTO_HW && (X86 && ~UML))) || ~CRYPTO_DEV_PADLOCK
(CRYPTO && (CRYPTO_HW && (X86_32 && PCI))) || ~CRYPTO_DEV_GEODE
(CRYPTO && (CRYPTO_HW && ZCRYPT)) || (ZCRYPT_MONOLITHIC => (ZCRYPT && (CRYPTO && (CRYPTO_HW && (S390 && ZCRYPT)))))
(CRYPTO && (CRYPTO_HW && S390)) || ~ZCRYPT
(CRYPTO && (CRYPTO_HW && S390)) || ~CRYPTO_SHA1_S390
(CRYPTO && (CRYPTO_HW && S390)) || ~CRYPTO_SHA256_S390
(CRYPTO && (CRYPTO_HW && S390)) || ~CRYPTO_SHA512_S390
(CRYPTO && (CRYPTO_HW && S390)) || ~CRYPTO_DES_S390
(CRYPTO && (CRYPTO_HW && S390)) || ~CRYPTO_AES_S390
(CRYPTO && (CRYPTO_HW && S390)) || (S390_PRNG => (CRYPTO && (CRYPTO_HW && S390)))
(CRYPTO && (CRYPTO_HW && S390)) || ((CRYPTO && (CRYPTO_HW && S390)) => S390_PRNG)
(CRYPTO && (CRYPTO_HW && PLAT_ORION)) || ~CRYPTO_DEV_MV_CESA
(CRYPTO && (CRYPTO_HW && CRYPTO_DEV_HIFN_795X)) || ~CRYPTO_DEV_HIFN_795X_RNG
(CRYPTO && (CRYPTO_HW && PCI)) || ~CRYPTO_DEV_HIFN_795X
(CRYPTO && (CRYPTO_HW && FSL_SOC)) || ~CRYPTO_DEV_TALITOS
(CRYPTO && (CRYPTO_HW && ARCH_IXP4XX)) || ~CRYPTO_DEV_IXP4XX
(CRYPTO && (CRYPTO_HW && (PPC && c4xx))) || ~CRYPTO_DEV_PPC4XX
CRYPTO || (CRYPTO_HW => CRYPTO)
CRYPTO || (CRYPTO => CRYPTO_HW)
HAVE_KVM => X86
X86 => HAVE_KVM
HAVE_KVM_IRQCHIP => (KVM && (VIRTUALIZATION && (HAVE_KVM && PCI)))
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => HAVE_KVM_IRQCHIP
HAVE_KVM_EVENTFD => (KVM && (VIRTUALIZATION && (HAVE_KVM && PCI)))
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => HAVE_KVM_EVENTFD
KVM_APIC_ARCHITECTURE => (KVM && (VIRTUALIZATION && (HAVE_KVM && PCI)))
(KVM && (VIRTUALIZATION && (HAVE_KVM && PCI))) => KVM_APIC_ARCHITECTURE
(VIRTUALIZATION && KVM) || ~KVM_INTEL
(VIRTUALIZATION && KVM) || ~KVM_AMD
(VIRTUALIZATION && (HAVE_KVM && PCI)) || ~KVM
(VIRTUALIZATION && (X86_32 && (EXPERIMENTAL && EVENTFD))) || ~LGUEST
VIRTIO => (((VIRTIO_PCI && (VIRTUALIZATION && (PCI && EXPERIMENTAL))) || (LGUEST_GUEST && (PARAVIRT_GUEST && X86_32))) || (VIRTIO_BALLOON && VIRTUALIZATION))
(VIRTIO_PCI && (VIRTUALIZATION && (PCI && EXPERIMENTAL))) => VIRTIO
(LGUEST_GUEST && (PARAVIRT_GUEST && X86_32)) => VIRTIO
(VIRTIO_BALLOON && VIRTUALIZATION) => VIRTIO
VIRTIO_RING => (((VIRTIO_PCI && (VIRTUALIZATION && (PCI && EXPERIMENTAL))) || (LGUEST_GUEST && (PARAVIRT_GUEST && X86_32))) || (VIRTIO_BALLOON && VIRTUALIZATION))
(VIRTIO_PCI && (VIRTUALIZATION && (PCI && EXPERIMENTAL))) => VIRTIO_RING
(LGUEST_GUEST && (PARAVIRT_GUEST && X86_32)) => VIRTIO_RING
(VIRTIO_BALLOON && VIRTUALIZATION) => VIRTIO_RING
(VIRTUALIZATION && (PCI && EXPERIMENTAL)) || ~VIRTIO_PCI
VIRTUALIZATION || ~VIRTIO_BALLOON
(HAVE_KVM || X86) || (VIRTUALIZATION => (HAVE_KVM || X86))
(HAVE_KVM || X86) || ((HAVE_KVM || X86) => VIRTUALIZATION)
BINARY_PRINTF => TRACING
TRACING => BINARY_PRINTF
BITREVERSE => (((((((((((((((ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA)))) || (MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE)))) || (ATM_AMBASSADOR && (ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS)))))) || (FB_NVIDIA && (HAS_IOMEM && (FB && PCI)))) || (HISAX_ST5481 && (ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL)))))) || (CARDMAN_4000 && (HOTPLUG && PCMCIA))) || (ISDN_HDLC && ISDN)) || CRC32) || (SKFP && (NETDEVICES && (FDDI && PCI)))) || (RTC_DRV_S35390A && (RTC_CLASS && I2C))) || (FB_RIVA && (HAS_IOMEM && (FB && PCI)))) || (INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP)))))) || (BT_HCIUART_BCSP && (NET && (BT && BT_HCIUART)))) || (FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC))))) || (ISDN_DRV_GIGASET && (ISDN && ISDN_I4L)))
(ETHOC && (NETDEVICES && (NET_ETHERNET && (HAS_IOMEM && HAS_DMA)))) => BITREVERSE
(MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE))) => BITREVERSE
(ATM_AMBASSADOR && (ATM_DRIVERS && (NETDEVICES && (ATM && (PCI && VIRT_TO_BUS))))) => BITREVERSE
(FB_NVIDIA && (HAS_IOMEM && (FB && PCI))) => BITREVERSE
(HISAX_ST5481 && (ISDN && (ISDN_I4L && (ISDN_DRV_HISAX && (USB && EXPERIMENTAL))))) => BITREVERSE
(CARDMAN_4000 && (HOTPLUG && PCMCIA)) => BITREVERSE
(ISDN_HDLC && ISDN) => BITREVERSE
CRC32 => BITREVERSE
(SKFP && (NETDEVICES && (FDDI && PCI))) => BITREVERSE
(RTC_DRV_S35390A && (RTC_CLASS && I2C)) => BITREVERSE
(FB_RIVA && (HAS_IOMEM && (FB && PCI))) => BITREVERSE
(INPUT_WINBOND_CIR && (~S390 && (INPUT && (INPUT_MISC && (X86 && PNP))))) => BITREVERSE
(BT_HCIUART_BCSP && (NET && (BT && BT_HCIUART))) => BITREVERSE
(FB_TGA && (HAS_IOMEM && (FB && (ALPHA || TC)))) => BITREVERSE
(ISDN_DRV_GIGASET && (ISDN && ISDN_I4L)) => BITREVERSE
RATIONAL => (SERIAL_IMX && (HAS_IOMEM && (ARM && (ARCH_IMX || ARCH_MXC))))
(SERIAL_IMX && (HAS_IOMEM && (ARM && (ARCH_IMX || ARCH_MXC)))) => RATIONAL
GENERIC_FIND_FIRST_BIT => X86_CPU
X86_CPU => GENERIC_FIND_FIRST_BIT
GENERIC_FIND_NEXT_BIT => X86_CPU
X86_CPU => GENERIC_FIND_NEXT_BIT
GENERIC_FIND_LAST_BIT
AUDIT_GENERIC => (AUDIT && ~AUDIT_ARCH)
(AUDIT && ~AUDIT_ARCH) => AUDIT_GENERIC
ZLIB_INFLATE => (((((((((((BINFMT_ZFLAT && BINFMT_FLAT) || (BNX2X && (NETDEVICES && (NETDEV_10000 && PCI)))) || (ZISOFS && (BLOCK && ISO9660_FS))) || (CRYPTO_ZLIB && CRYPTO)) || (PPP_DEFLATE && (NETDEVICES && PPP))) || DECOMPRESS_GZIP) || (CRYPTO_DEFLATE && CRYPTO)) || (JFFS2_ZLIB && (MISC_FILESYSTEMS && JFFS2_FS))) || (CRAMFS && (MISC_FILESYSTEMS && BLOCK))) || (BTRFS_FS && (BLOCK && EXPERIMENTAL))) || (SQUASHFS && (MISC_FILESYSTEMS && BLOCK)))
(BINFMT_ZFLAT && BINFMT_FLAT) => ZLIB_INFLATE
(BNX2X && (NETDEVICES && (NETDEV_10000 && PCI))) => ZLIB_INFLATE
(ZISOFS && (BLOCK && ISO9660_FS)) => ZLIB_INFLATE
(CRYPTO_ZLIB && CRYPTO) => ZLIB_INFLATE
(PPP_DEFLATE && (NETDEVICES && PPP)) => ZLIB_INFLATE
DECOMPRESS_GZIP => ZLIB_INFLATE
(CRYPTO_DEFLATE && CRYPTO) => ZLIB_INFLATE
(JFFS2_ZLIB && (MISC_FILESYSTEMS && JFFS2_FS)) => ZLIB_INFLATE
(CRAMFS && (MISC_FILESYSTEMS && BLOCK)) => ZLIB_INFLATE
(BTRFS_FS && (BLOCK && EXPERIMENTAL)) => ZLIB_INFLATE
(SQUASHFS && (MISC_FILESYSTEMS && BLOCK)) => ZLIB_INFLATE
ZLIB_DEFLATE => (((((CRYPTO_ZLIB && CRYPTO) || (CRYPTO_DEFLATE && CRYPTO)) || (PPP_DEFLATE && (NETDEVICES && PPP))) || (JFFS2_ZLIB && (MISC_FILESYSTEMS && JFFS2_FS))) || (BTRFS_FS && (BLOCK && EXPERIMENTAL)))
(CRYPTO_ZLIB && CRYPTO) => ZLIB_DEFLATE
(CRYPTO_DEFLATE && CRYPTO) => ZLIB_DEFLATE
(PPP_DEFLATE && (NETDEVICES && PPP)) => ZLIB_DEFLATE
(JFFS2_ZLIB && (MISC_FILESYSTEMS && JFFS2_FS)) => ZLIB_DEFLATE
(BTRFS_FS && (BLOCK && EXPERIMENTAL)) => ZLIB_DEFLATE
LZO_COMPRESS => ((CRYPTO_LZO && CRYPTO) || (JFFS2_LZO && (MISC_FILESYSTEMS && JFFS2_FS)))
(CRYPTO_LZO && CRYPTO) => LZO_COMPRESS
(JFFS2_LZO && (MISC_FILESYSTEMS && JFFS2_FS)) => LZO_COMPRESS
LZO_DECOMPRESS => ((CRYPTO_LZO && CRYPTO) || (JFFS2_LZO && (MISC_FILESYSTEMS && JFFS2_FS)))
(CRYPTO_LZO && CRYPTO) => LZO_DECOMPRESS
(JFFS2_LZO && (MISC_FILESYSTEMS && JFFS2_FS)) => LZO_DECOMPRESS
DECOMPRESS_GZIP => (RD_GZIP && BLK_DEV_INITRD)
(RD_GZIP && BLK_DEV_INITRD) => DECOMPRESS_GZIP
DECOMPRESS_BZIP2 => (RD_BZIP2 && BLK_DEV_INITRD)
(RD_BZIP2 && BLK_DEV_INITRD) => DECOMPRESS_BZIP2
DECOMPRESS_LZMA => (RD_LZMA && BLK_DEV_INITRD)
(RD_LZMA && BLK_DEV_INITRD) => DECOMPRESS_LZMA
GENERIC_ALLOCATOR => ((INFINIBAND_CXGB3 && (INFINIBAND && (CHELSIO_T3 && INET))) || (SGI_XP && (MISC_DEVICES && (NET && ((IA64_GENERIC || (IA64_SGI_SN2 || (IA64_SGI_UV || X86_UV))) && (SMP && (IA64_GENERIC || IA64_SGI_SN2)))))))
(INFINIBAND_CXGB3 && (INFINIBAND && (CHELSIO_T3 && INET))) => GENERIC_ALLOCATOR
(SGI_XP && (MISC_DEVICES && (NET && ((IA64_GENERIC || (IA64_SGI_SN2 || (IA64_SGI_UV || X86_UV))) && (SMP && (IA64_GENERIC || IA64_SGI_SN2)))))) => GENERIC_ALLOCATOR
REED_SOLOMON => ((((ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT))))) || (MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE)))) || (MTD_NAND_DISKONCHIP && (MTD && (MTD_NAND && EXPERIMENTAL)))) || (MTD_NAND_CAFE && (MTD && (MTD_NAND && PCI))))
(ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT))))) => REED_SOLOMON
(MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE))) => REED_SOLOMON
(MTD_NAND_DISKONCHIP && (MTD && (MTD_NAND && EXPERIMENTAL))) => REED_SOLOMON
(MTD_NAND_CAFE && (MTD && (MTD_NAND && PCI))) => REED_SOLOMON
REED_SOLOMON_ENC8 => (ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT)))))
(ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT))))) => REED_SOLOMON_ENC8
REED_SOLOMON_DEC8 => ((ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT))))) || (MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE))))
(ANDROID_RAM_CONSOLE_ERROR_CORRECTION && (STAGING && (~STAGING_EXCLUDE_BUILD && (ANDROID && (ANDROID_RAM_CONSOLE && ~ANDROID_RAM_CONSOLE_EARLY_INIT))))) => REED_SOLOMON_DEC8
(MTD_NAND_RTC_FROM4 && (MTD && (MTD_NAND && SH_SOLUTION_ENGINE))) => REED_SOLOMON_DEC8
~REED_SOLOMON_ENC16
REED_SOLOMON_DEC16 => ((MTD_NAND_DISKONCHIP && (MTD && (MTD_NAND && EXPERIMENTAL))) || (MTD_NAND_CAFE && (MTD && (MTD_NAND && PCI))))
(MTD_NAND_DISKONCHIP && (MTD && (MTD_NAND && EXPERIMENTAL))) => REED_SOLOMON_DEC16
(MTD_NAND_CAFE && (MTD && (MTD_NAND && PCI))) => REED_SOLOMON_DEC16
TEXTSEARCH => (((NF_CONNTRACK_AMANDA && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || (NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH)))) || (NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NF_CONNTRACK_AMANDA && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED))))) => TEXTSEARCH
(NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) => TEXTSEARCH
(NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => TEXTSEARCH
TEXTSEARCH_KMP => (((NF_CONNTRACK_AMANDA && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED))))) || (NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH)))) || (NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NF_CONNTRACK_AMANDA && (NET && (INET && (NETFILTER && (NF_CONNTRACK && NETFILTER_ADVANCED))))) => TEXTSEARCH_KMP
(NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) => TEXTSEARCH_KMP
(NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => TEXTSEARCH_KMP
TEXTSEARCH_BM => ((NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) || (NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) => TEXTSEARCH_BM
(NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => TEXTSEARCH_BM
TEXTSEARCH_FSM => ((NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) || (NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))))
(NET_EMATCH_TEXT && (NET && (NET_SCHED && NET_EMATCH))) => TEXTSEARCH_FSM
(NETFILTER_XT_MATCH_STRING && (NET && (INET && (NETFILTER && (NETFILTER_XTABLES && NETFILTER_ADVANCED))))) => TEXTSEARCH_FSM
HAS_IOMEM => ~NO_IOMEM
~NO_IOMEM => HAS_IOMEM
HAS_IOPORT => (HAS_IOMEM && ~NO_IOPORT)
(HAS_IOMEM && ~NO_IOPORT) => HAS_IOPORT
HAS_DMA => ~NO_DMA
~NO_DMA => HAS_DMA
CHECK_SIGNATURE => ((((((((SCSI_FUTURE_DOMAIN && (SCSI_LOWLEVEL && ((ISA || PCI) && SCSI))) || (SCSI_AHA152X && (SCSI_LOWLEVEL && (ISA && (SCSI && ~c64BIT))))) || (SCSI_7000FASST && (SCSI_LOWLEVEL && (ISA && (SCSI && ISA_DMA_API))))) || (BLK_DEV_XD && (BLK_DEV && (ISA && ISA_DMA_API)))) || (SCSI_T128 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (SCSI_DTC3280 && (SCSI_LOWLEVEL && (ISA && SCSI)))) || (INPUT_APANEL && (~S390 && (INPUT && (INPUT_MISC && (X86 && (I2C && LEDS_CLASS))))))) || (INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64))))))
(SCSI_FUTURE_DOMAIN && (SCSI_LOWLEVEL && ((ISA || PCI) && SCSI))) => CHECK_SIGNATURE
(SCSI_AHA152X && (SCSI_LOWLEVEL && (ISA && (SCSI && ~c64BIT)))) => CHECK_SIGNATURE
(SCSI_7000FASST && (SCSI_LOWLEVEL && (ISA && (SCSI && ISA_DMA_API)))) => CHECK_SIGNATURE
(BLK_DEV_XD && (BLK_DEV && (ISA && ISA_DMA_API))) => CHECK_SIGNATURE
(SCSI_T128 && (SCSI_LOWLEVEL && (ISA && SCSI))) => CHECK_SIGNATURE
(SCSI_DTC3280 && (SCSI_LOWLEVEL && (ISA && SCSI))) => CHECK_SIGNATURE
(INPUT_APANEL && (~S390 && (INPUT && (INPUT_MISC && (X86 && (I2C && LEDS_CLASS)))))) => CHECK_SIGNATURE
(INPUT_WISTRON_BTNS && (~S390 && (INPUT && (INPUT_MISC && (X86 && ~X86_64))))) => CHECK_SIGNATURE
~HAVE_LMB
DEBUG_PER_CPU_MAPS || (CPUMASK_OFFSTACK => (MAXSMP && (X86_64 && (SMP && (DEBUG_KERNEL && EXPERIMENTAL)))))
DEBUG_PER_CPU_MAPS || ((MAXSMP && (X86_64 && (SMP && (DEBUG_KERNEL && EXPERIMENTAL)))) => CPUMASK_OFFSTACK)
(EXPERIMENTAL && (BROKEN && DEBUG_PER_CPU_MAPS)) || ~DISABLE_OBSOLETE_CPUMASK_FUNCTIONS
NLATTR => ((CRYPTO_ZLIB && CRYPTO) || NET)
(CRYPTO_ZLIB && CRYPTO) => NLATTR
NET => NLATTR
~GENERIC_ATOMIC64
